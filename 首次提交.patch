Index: app/src/main/java/app/mango/music/drawable/PlayStateDrawable.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/drawable/PlayStateDrawable.kt b/app/src/main/java/app/mango/music/drawable/PlayStateDrawable.kt
new file mode 100644
--- /dev/null	(date 1654496866308)
+++ b/app/src/main/java/app/mango/music/drawable/PlayStateDrawable.kt	(date 1654496866308)
@@ -0,0 +1,148 @@
+package app.mango.music.drawable
+
+import android.animation.ValueAnimator
+import android.content.Context
+import android.graphics.*
+import android.graphics.drawable.Drawable
+import android.util.TypedValue
+import androidx.annotation.AttrRes
+import androidx.core.animation.doOnEnd
+import app.mango.music.R
+import app.mango.music.utils.dpToDimension
+import app.mango.music.utils.interpolate
+import app.mango.music.utils.themeInterpolator
+import kotlin.math.abs
+import kotlin.random.Random
+
+class PlayStateDrawable(val context: Context) : Drawable() {
+
+    private fun colorControlNormal(): Int = getColorForAttrId(androidx.appcompat.R.attr.colorControlNormal)
+
+    private fun getColorForAttrId(@AttrRes resId:Int):Int{
+        val typedValue = TypedValue()
+        val a = context.obtainStyledAttributes(typedValue.data, intArrayOf(resId))
+        val color = a.getColor(0, Color.BLUE)
+        a.recycle()
+        return color
+    }
+
+    private val paint = Paint().apply {
+        color = colorControlNormal()
+    }
+
+    private val height = intrinsicHeight.toFloat()
+
+    private var progress = 0F
+        set(value) {
+            val constrained = value.coerceIn(0F, 1F)
+            if (constrained != field) {
+                field = constrained
+                callback?.invalidateDrawable(this)
+            }
+        }
+    private var progressAnim: ValueAnimator? = null
+
+    private val random:Random = Random.Default
+    init {
+        setAnimate()
+    }
+
+    private val dur = context.resources.getInteger(R.integer.motion_duration_medium)
+    private val interrupt = context.themeInterpolator(R.attr.motionInterpolatorPersistent)
+
+    private fun update() {
+        callback?.invalidateDrawable(this)
+    }
+
+    override fun onBoundsChange(bounds: Rect?) {
+        if (bounds == null)  return
+        update()
+    }
+
+    private var isInfinite = false
+    private val edge = context.dpToDimension(5f).toInt()
+    private val mid = context.dpToDimension(3.5f).toInt()
+    private val weight = context.dpToDimension(3f).toInt()
+    private val small = context.dpToDimension(8f).toInt()
+    private val large = context.dpToDimension(4f).toInt()
+
+    override fun draw(canvas: Canvas) {
+        val learn = interpolate(
+            0,large,
+            0F,1F,
+            progress
+        )
+
+        canvas.drawRect(Rect(
+            edge,
+            small-learn,
+            edge+weight,
+            height.toInt()-small+learn
+        ),paint)
+
+        canvas.drawRect(Rect(
+            edge+mid+weight,
+            large-learn,
+            weight*2+edge+mid,
+            height.toInt()-large+learn
+        ),paint)
+
+        canvas.drawRect(Rect(
+            weight*2+edge+mid*2,
+            small-learn,
+            weight*3+edge+mid*2,
+            height.toInt()-small+learn
+        ),paint)
+
+        canvas.drawRect(Rect(
+            -weight/3,
+            (small*1.1).toInt(),
+            edge-weight,
+            (height-small*1.1).toInt()
+        ),paint)
+
+        canvas.drawRect(Rect(
+            weight*2+mid*2+edge*2+weight/4,
+            (small*1.1).toInt(),
+            weight*3+mid*2+edge*2+weight/4,
+            (height-small*1.1).toInt()
+        ),paint)
+    }
+
+    override fun setAlpha(alpha: Int) {
+        paint.alpha = alpha
+    }
+
+    private fun setAnimate(){
+        val newProgress = random.nextDouble(0.0,1.0).toFloat()
+        val initialProgress = progress
+        progressAnim?.cancel()
+        progressAnim = ValueAnimator.ofFloat(initialProgress, newProgress).apply {
+            addUpdateListener {
+                progress = animatedValue as Float
+            }
+            doOnEnd {
+                if(isInfinite) setAnimate()
+            }
+            interpolator = interrupt
+            duration = (abs(newProgress - initialProgress) * dur).toLong()
+        }
+        progressAnim?.start()
+    }
+
+    fun setInfinite(infinite:Boolean){
+        if(!isInfinite && infinite) setAnimate()
+        isInfinite = infinite
+    }
+
+    override fun setColorFilter(cf: ColorFilter?) {
+        cf?.let { paint.colorFilter = cf }
+    }
+
+    override fun getOpacity(): Int = PixelFormat.TRANSLUCENT
+
+    override fun getIntrinsicHeight(): Int = context.dpToDimension(24f).toInt()
+
+    override fun getIntrinsicWidth(): Int = context.dpToDimension(24f).toInt()
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/nav/view/ForegroundCompatKt.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/view/ForegroundCompatKt.kt b/app/src/main/java/app/mango/music/ui/nav/view/ForegroundCompatKt.kt
new file mode 100644
--- /dev/null	(date 1655870046661)
+++ b/app/src/main/java/app/mango/music/ui/nav/view/ForegroundCompatKt.kt	(date 1655870046661)
@@ -0,0 +1,34 @@
+package app.mango.music.ui.nav.view
+
+import android.graphics.drawable.Drawable
+import android.os.Build
+import android.view.View
+import android.widget.FrameLayout
+
+fun getForeground(view: View): Drawable? {
+    return if (view is FrameLayout) {
+        view.foreground
+    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
+        && isTargetingMOrAbove(view)) {
+        view.foreground
+    } else if (view is ForegroundCompatView) {
+        (view as ForegroundCompatView).getSupportForeground()
+    } else {
+        null
+    }
+}
+
+fun setForeground(view: View, foreground: Drawable?) {
+    foreground?:return
+    if (view is FrameLayout) {
+        view.foreground = foreground
+    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && isTargetingMOrAbove(view)) {
+        view.foreground = foreground
+    } else if (view is ForegroundCompatView) {
+        (view as ForegroundCompatView).setSupportForeground(foreground)
+    }
+}
+
+private fun isTargetingMOrAbove(view: View): Boolean {
+    return view.context.applicationInfo.targetSdkVersion >= Build.VERSION_CODES.M
+}
\ No newline at end of file
Index: app/src/androidTest/java/app/mango/music/ExampleInstrumentedTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/androidTest/java/app/mango/music/ExampleInstrumentedTest.kt b/app/src/androidTest/java/app/mango/music/ExampleInstrumentedTest.kt
new file mode 100644
--- /dev/null	(date 1653569773383)
+++ b/app/src/androidTest/java/app/mango/music/ExampleInstrumentedTest.kt	(date 1653569773383)
@@ -0,0 +1,24 @@
+package app.mango.music
+
+import androidx.test.platform.app.InstrumentationRegistry
+import androidx.test.ext.junit.runners.AndroidJUnit4
+
+import org.junit.Test
+import org.junit.runner.RunWith
+
+import org.junit.Assert.*
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * See [testing documentation](http://d.android.com/tools/testing).
+ */
+@RunWith(AndroidJUnit4::class)
+class ExampleInstrumentedTest {
+    @Test
+    fun useAppContext() {
+        // Context of the app under test.
+        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
+        assertEquals("app.mango.music", appContext.packageName)
+    }
+}
\ No newline at end of file
Index: app/src/main/res/xml/root_preferences.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/root_preferences.xml b/app/src/main/res/xml/root_preferences.xml
new file mode 100644
--- /dev/null	(date 1655349361446)
+++ b/app/src/main/res/xml/root_preferences.xml	(date 1655349361446)
@@ -0,0 +1,49 @@
+<PreferenceScreen xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <PreferenceCategory app:title="@string/set_theme">
+        <ListPreference
+            app:useSimpleSummaryProvider="true"
+            app:key="@string/key_set_theme_dark_mode"
+            app:defaultValue="@string/set_theme_dark_mode_def"
+            app:entryValues="@array/set_theme_dark_mode_value"
+            app:entries="@array/set_theme_dark_mode_entries"
+            app:title="@string/set_theme_dark_mode"/>
+        <SwitchPreferenceCompat
+            app:title="@string/set_theme_color_filter"
+            app:key="@string/key_set_theme_color_filter"/>
+    </PreferenceCategory>
+
+    <PreferenceCategory app:title="@string/set_sync">
+        <SwitchPreferenceCompat
+            app:key="@string/key_set_sync_unknown"
+            app:title="@string/set_sync_unknown"/>
+    </PreferenceCategory>
+
+    <PreferenceCategory
+        app:allowDividerBelow="true"
+        app:title="@string/set_play">
+        <SwitchPreferenceCompat
+            app:summaryOn="@string/set_play_with_other_summary_on"
+            app:summaryOff="@string/set_play_with_other_summary_off"
+            app:key="@string/key_set_play_with_other"
+            app:title="@string/set_play_with_other"/>
+        <ListPreference
+            app:useSimpleSummaryProvider="true"
+            app:entries="@array/set_play_playback_parameters_entries"
+            app:entryValues="@array/set_play_playback_parameters_value"
+            app:title="@string/set_play_playback_parameters"
+            app:defaultValue="@string/set_play_playback_parameters_def"
+            app:key="@string/key_set_play_playback_parameters"/>
+        <SeekBarPreference
+            app:summary="@string/key_set_play_summary"
+            app:showSeekBarValue="true"
+            app:defaultValue="@integer/set_play_volume_def"
+            app:min="@integer/set_play_volume_min"
+            android:max="@integer/set_play_volume_max"
+            app:title="@string/set_play_volume"
+            app:allowDividerBelow="true"
+            app:key="@string/key_set_play_volume"/>
+    </PreferenceCategory>
+
+</PreferenceScreen>
\ No newline at end of file
Index: app/src/main/res/xml/data_extraction_rules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/data_extraction_rules.xml b/app/src/main/res/xml/data_extraction_rules.xml
new file mode 100644
--- /dev/null	(date 1653569773886)
+++ b/app/src/main/res/xml/data_extraction_rules.xml	(date 1653569773886)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?><!--
+   Sample data extraction rules file; uncomment and customize as necessary.
+   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
+   for details.
+-->
+<data-extraction-rules>
+    <cloud-backup>
+        <!-- TODO: Use <include> and <exclude> to control what is backed up.
+        <include .../>
+        <exclude .../>
+        -->
+    </cloud-backup>
+    <!--
+    <device-transfer>
+        <include .../>
+        <exclude .../>
+    </device-transfer>
+    -->
+</data-extraction-rules>
\ No newline at end of file
Index: app/src/main/res/layout/text_switcher.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/text_switcher.xml b/app/src/main/res/layout/text_switcher.xml
new file mode 100644
--- /dev/null	(date 1653983319061)
+++ b/app/src/main/res/layout/text_switcher.xml	(date 1653983319061)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:textColor="?attr/colorPrimaryVariant"
+    android:textSize="16sp"
+    android:padding="4dp"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"/>
\ No newline at end of file
Index: app/src/main/res/xml/backup_rules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/backup_rules.xml b/app/src/main/res/xml/backup_rules.xml
new file mode 100644
--- /dev/null	(date 1653569773825)
+++ b/app/src/main/res/xml/backup_rules.xml	(date 1653569773825)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?><!--
+   Sample backup rules file; uncomment and customize as necessary.
+   See https://developer.android.com/guide/topics/data/autobackup
+   for details.
+   Note: This file is ignored for devices older that API 31
+   See https://developer.android.com/about/versions/12/backup-restore
+-->
+<full-backup-content>
+    <!--
+   <include domain="sharedpref" path="."/>
+   <exclude domain="sharedpref" path="device.xml"/>
+-->
+</full-backup-content>
\ No newline at end of file
Index: app/src/main/res/anim/message_in.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/anim/message_in.xml b/app/src/main/res/anim/message_in.xml
new file mode 100644
--- /dev/null	(date 1653983319015)
+++ b/app/src/main/res/anim/message_in.xml	(date 1653983319015)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="300">
+    <translate
+        android:fromXDelta="0"
+        android:fromYDelta="100%"
+        android:toXDelta="0"
+        android:toYDelta="0"/>
+</set>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/MusicHiltModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/MusicHiltModule.kt b/app/src/main/java/app/mango/music/MusicHiltModule.kt
new file mode 100644
--- /dev/null	(date 1653813602018)
+++ b/app/src/main/java/app/mango/music/MusicHiltModule.kt	(date 1653813602018)
@@ -0,0 +1,34 @@
+package app.mango.music
+
+import android.content.Context
+import androidx.room.Room
+import app.mango.music.data.MusicDao
+import app.mango.music.data.MusicDatabase
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.android.qualifiers.ApplicationContext
+import dagger.hilt.components.SingletonComponent
+import kotlinx.coroutines.ExperimentalCoroutinesApi
+import javax.inject.Singleton
+
+@Module
+@ExperimentalCoroutinesApi
+@InstallIn(SingletonComponent::class)
+object MusicHiltModule {
+    @Provides
+    @Singleton
+    fun provideLMusicDatabase(@ApplicationContext context: Context): MusicDatabase {
+        return Room.databaseBuilder(
+            context,
+            MusicDatabase::class.java,
+            "music_database.db"
+        ).fallbackToDestructiveMigration()
+            .build()
+    }
+
+    @Provides
+    fun provideTaskDao(appDatabase: MusicDatabase): MusicDao {
+        return appDatabase.musicDao()
+    }
+}
\ No newline at end of file
Index: app/src/main/res/menu/menu_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/menu/menu_main.xml b/app/src/main/res/menu/menu_main.xml
new file mode 100644
--- /dev/null	(date 1654483947103)
+++ b/app/src/main/res/menu/menu_main.xml	(date 1654483947103)
@@ -0,0 +1,39 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    tools:context="app.mango.music.ui.main.MainActivity">
+    <group android:checkableBehavior="single">
+        <item
+            android:id="@+id/to_music_library"
+            android:checked="true"
+            android:icon="@drawable/ic_library_music"
+            android:title="@string/navigation_music" />
+        <item
+            android:id="@+id/to_favorite"
+            android:checked="true"
+            android:icon="@drawable/ic_favorite"
+            android:title="@string/navigation_favorite" />
+        <item
+            android:id="@+id/to_album"
+            android:checked="true"
+            android:icon="@drawable/ic_album"
+            android:title="@string/navigation_album" />
+        <item
+            android:id="@+id/to_artist"
+            android:checked="true"
+            android:icon="@drawable/ic_account"
+            android:title="@string/navigation_artist" />
+    </group>
+    <group android:checkableBehavior="single">
+
+        <item
+            android:id="@+id/to_style"
+            android:checked="true"
+            android:icon="@drawable/ic_style"
+            android:title="@string/navigation_style" />
+        <!--<item
+            android:id="@+id/to_sync"
+            android:checked="true"
+            android:icon="@drawable/ic_sync"
+            android:title="@string/navigation_sync" />-->
+    </group>
+</menu>
\ No newline at end of file
Index: app/src/main/res/menu/bottom_app_bar_settings_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/menu/bottom_app_bar_settings_menu.xml b/app/src/main/res/menu/bottom_app_bar_settings_menu.xml
new file mode 100644
--- /dev/null	(date 1653574315188)
+++ b/app/src/main/res/menu/bottom_app_bar_settings_menu.xml	(date 1653574315188)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <item
+        android:id="@+id/menu_settings"
+        android:icon="@drawable/ic_settings"
+        app:showAsAction="ifRoom"
+        android:title="@string/menu_item_settings"/>
+
+</menu>
\ No newline at end of file
Index: app/src/main/res/menu/bottom_app_bar_detail_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/menu/bottom_app_bar_detail_menu.xml b/app/src/main/res/menu/bottom_app_bar_detail_menu.xml
new file mode 100644
--- /dev/null	(date 1653753762633)
+++ b/app/src/main/res/menu/bottom_app_bar_detail_menu.xml	(date 1653753762633)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <item
+        android:id="@+id/menu_music_favorite"
+        android:icon="@drawable/ic_favorite"
+        app:showAsAction="ifRoom"
+        android:title="@string/menu_item_favorite"/>
+
+    <item
+        android:id="@+id/menu_music_delete"
+        android:icon="@drawable/ic_delete"
+        app:showAsAction="ifRoom"
+        android:title="@string/menu_item_delete"/>
+
+</menu>
\ No newline at end of file
Index: app/src/main/res/menu/bottom_app_bar_home_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/menu/bottom_app_bar_home_menu.xml b/app/src/main/res/menu/bottom_app_bar_home_menu.xml
new file mode 100644
--- /dev/null	(date 1654606003831)
+++ b/app/src/main/res/menu/bottom_app_bar_home_menu.xml	(date 1654606003831)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <item
+        android:id="@+id/menu_search"
+        android:icon="@drawable/ic_search"
+        app:showAsAction="ifRoom"
+        android:title="@string/menu_item_search"/>
+    <item
+        android:id="@+id/menu_filters"
+        android:icon="@drawable/ic_filter_list"
+        app:showAsAction="ifRoom"
+        android:title="@string/menu_item_filters"/>
+
+</menu>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_bottom_nav_drawer.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_bottom_nav_drawer.xml b/app/src/main/res/layout/fragment_bottom_nav_drawer.xml
new file mode 100644
--- /dev/null	(date 1655040050500)
+++ b/app/src/main/res/layout/fragment_bottom_nav_drawer.xml	(date 1655040050500)
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.coordinatorlayout.widget.CoordinatorLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <androidx.appcompat.widget.LinearLayoutCompat
+            android:id="@+id/background_container"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            app:behavior_halfExpandedRatio="0.6"
+            app:behavior_hideable="true"
+            app:behavior_skipCollapsed="true"
+            app:layout_behavior="@string/bottom_sheet_behavior">
+
+            <androidx.cardview.widget.CardView
+                android:clickable="true"
+                android:focusable="true"
+                app:marginTopSystemWindowInsets="@{true}"
+                android:id="@+id/foreground_container"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:translationZ="@dimen/bottom_app_bar_logo_size"
+                app:cardCornerRadius="@dimen/bottom_app_bar_logo_size">
+
+                <androidx.appcompat.widget.LinearLayoutCompat
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="vertical">
+
+                    <androidx.appcompat.widget.Toolbar
+                        android:id="@+id/toolbar"
+                        android:layout_width="match_parent"
+                        android:layout_height="?actionBarSize"
+                        app:navigationIcon="@drawable/ic_close"
+                        app:subtitle="version - mango 1.2"
+                        app:title="@string/app_name" />
+
+                    <app.mango.music.ui.nav.view.NavigationView
+                        android:id="@+id/nav"
+                        android:overScrollMode="never"
+                        android:clipToPadding="true"
+                        android:paddingBottom="@dimen/navigation_drawer_nav_bottom_margin"
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent" />
+
+                </androidx.appcompat.widget.LinearLayoutCompat>
+            </androidx.cardview.widget.CardView>
+        </androidx.appcompat.widget.LinearLayoutCompat>
+
+    </androidx.coordinatorlayout.widget.CoordinatorLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/views/PlayStateButton.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/PlayStateButton.kt b/app/src/main/java/app/mango/music/views/PlayStateButton.kt
new file mode 100644
--- /dev/null	(date 1654435218519)
+++ b/app/src/main/java/app/mango/music/views/PlayStateButton.kt	(date 1654435218519)
@@ -0,0 +1,19 @@
+package app.mango.music.views
+
+import android.content.Context
+import android.util.AttributeSet
+import app.mango.music.drawable.PlayStateDrawable
+import com.google.android.material.floatingactionbutton.FloatingActionButton
+
+class PlayStateButton @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+): FloatingActionButton(context, attrs, defStyleAttr){
+
+    private val playStateDrawable = PlayStateDrawable(context)
+    init {
+        setImageDrawable(playStateDrawable)
+    }
+    fun setInfinite(infinite:Boolean) = playStateDrawable.setInfinite(infinite)
+}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_settings.xml b/app/src/main/res/layout/fragment_settings.xml
new file mode 100644
--- /dev/null	(date 1655351521894)
+++ b/app/src/main/res/layout/fragment_settings.xml	(date 1655351521894)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <androidx.core.widget.NestedScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="?colorAppBarSurface"
+        android:fillViewport="true">
+
+        <androidx.appcompat.widget.LinearLayoutCompat
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical"
+            android:clipToPadding="false"
+            android:paddingBottom="64dp"
+            android:overScrollMode="never"
+            app:marginTopSystemWindowInsets="@{true}">
+
+            <fragment
+                android:name="app.mango.music.ui.settings.Settings"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:tag="@string/settings_fragment_label"
+                tools:ignore="MissingConstraints" />
+<!--
+            <fragment
+                android:name="app.mango.music.ui.settings.AudioEffectSettings"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:tag="app.mango.music.ui.settings.AudioEffectSettings" />-->
+
+        </androidx.appcompat.widget.LinearLayoutCompat>
+    </androidx.core.widget.NestedScrollView>
+
+</layout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_style.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_style.xml b/app/src/main/res/layout/fragment_style.xml
new file mode 100644
--- /dev/null	(date 1654694067096)
+++ b/app/src/main/res/layout/fragment_style.xml	(date 1654694067096)
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:tools="http://schemas.android.com/tools"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.coordinatorlayout.widget.CoordinatorLayout
+        android:background="?scrimBackground"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <com.google.android.material.appbar.AppBarLayout
+            android:background="?attr/colorSurface"
+            app:elevation="0dp"
+            app:marginTopSystemWindowInsets="@{true}"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
+
+            <androidx.appcompat.widget.Toolbar
+                android:id="@+id/toolbar"
+                app:title="@string/style_fragment_label"
+                app:navigationIcon="@drawable/ic_arrow_back"
+                android:layout_width="match_parent"
+                android:layout_height="?actionBarSize"/>
+
+        </com.google.android.material.appbar.AppBarLayout>
+
+        <androidx.appcompat.widget.LinearLayoutCompat
+            android:gravity="center"
+            android:clipChildren="false"
+            app:layout_behavior="com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+            <View
+                android:id="@+id/test"
+                android:layout_width="100dp"
+                android:layout_height="100dp"/>
+        </androidx.appcompat.widget.LinearLayoutCompat>
+
+    </androidx.coordinatorlayout.widget.CoordinatorLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/views/MusicSeekBar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/MusicSeekBar.kt b/app/src/main/java/app/mango/music/views/MusicSeekBar.kt
new file mode 100644
--- /dev/null	(date 1654924443780)
+++ b/app/src/main/java/app/mango/music/views/MusicSeekBar.kt	(date 1654924443780)
@@ -0,0 +1,50 @@
+package app.mango.music.views
+
+import android.annotation.SuppressLint
+import android.content.Context
+import android.util.AttributeSet
+import android.view.MotionEvent
+import android.widget.SeekBar
+import androidx.appcompat.widget.AppCompatSeekBar
+
+class MusicSeekBar @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+): AppCompatSeekBar(context, attrs, defStyleAttr){
+
+    private var isTouch = false
+    private var progressChanged:((Int)->Unit)? = null
+    private val seekbarListener = object:OnSeekBarChangeListener{
+        override fun onProgressChanged(seekbar: SeekBar, p1: Int, p2: Boolean) {
+
+        }
+
+        override fun onStartTrackingTouch(seekbar: SeekBar) {
+
+        }
+
+        override fun onStopTrackingTouch(seekbar: SeekBar) {
+            progressChanged?.invoke(seekbar.progress)
+        }
+    }
+
+    init {
+        setOnSeekBarChangeListener(seekbarListener)
+    }
+
+    fun setProgressListener(unit:((Int)->Unit)){
+        progressChanged = unit
+    }
+
+    @SuppressLint("ClickableViewAccessibility")
+    override fun onTouchEvent(event: MotionEvent): Boolean {
+        isTouch = (event.action!=MotionEvent.ACTION_UP && event.action!=MotionEvent.ACTION_CANCEL)
+        return super.onTouchEvent(event)
+    }
+
+    override fun setProgress(progress: Int) {
+        if(isTouch) return
+        super.setProgress(progress)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/mark/WatermarkDrawable.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/mark/WatermarkDrawable.kt b/app/src/main/java/app/mango/music/mark/WatermarkDrawable.kt
new file mode 100644
--- /dev/null	(date 1654928967043)
+++ b/app/src/main/java/app/mango/music/mark/WatermarkDrawable.kt	(date 1654928967043)
@@ -0,0 +1,55 @@
+package app.mango.music.mark
+
+import android.content.Context
+import android.graphics.Canvas
+import android.graphics.ColorFilter
+import android.graphics.Paint
+import android.graphics.PixelFormat
+import android.graphics.drawable.Drawable
+import androidx.annotation.IntRange
+import kotlin.math.sqrt
+
+internal class WatermarkDrawable(val context: Context) : Drawable() {
+
+    private val paint: Paint = Paint()
+    var text = ""
+    var textColor = 0
+    var textSize = 0f
+    var rotation = 0f
+
+    override fun draw(canvas: Canvas) {
+        val width = bounds.right
+        val height = bounds.bottom
+        val diagonal = sqrt((width * width + height * height).toDouble()).toInt()
+        paint.color = textColor
+        paint.textSize =
+            spToPx(textSize).toFloat()
+        paint.isAntiAlias = true
+        val textWidth = paint.measureText(text)
+        canvas.drawColor(0x00000000)
+        canvas.rotate(rotation)
+        var index = 0
+        var fromX: Float
+        var positionY = diagonal / 10
+        while (positionY <= diagonal) {
+            fromX = -width + index++ % 2 * textWidth
+            var positionX = fromX
+            while (positionX < width) {
+                canvas.drawText(text, positionX, positionY.toFloat(), paint)
+                positionX += textWidth * 2
+            }
+            positionY += diagonal / 10
+        }
+        canvas.save()
+        canvas.restore()
+    }
+
+    override fun setAlpha(@IntRange(from = 0, to = 255) alpha: Int) {}
+    override fun setColorFilter(colorFilter: ColorFilter?) {}
+    override fun getOpacity(): Int = PixelFormat.TRANSLUCENT
+
+    private fun spToPx(spValue: Float): Int {
+        val fontScale = context.resources.displayMetrics.scaledDensity
+        return (spValue * fontScale + 0.5f).toInt()
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/content_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/content_main.xml b/app/src/main/res/layout/content_main.xml
new file mode 100644
--- /dev/null	(date 1653576175275)
+++ b/app/src/main/res/layout/content_main.xml	(date 1653576175275)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    app:layout_behavior="@string/appbar_scrolling_view_behavior">
+
+    <fragment
+        android:id="@+id/nav_host_fragment_content_main"
+        android:name="androidx.navigation.fragment.NavHostFragment"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:defaultNavHost="true"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:navGraph="@navigation/nav_graph" />
+
+    <fragment
+        android:id="@+id/bottom_nav_drawer"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:name="app.mango.music.ui.nav.BottomNavDrawerFragment"/>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/anim/message_out.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/anim/message_out.xml b/app/src/main/res/anim/message_out.xml
new file mode 100644
--- /dev/null	(date 1653983318979)
+++ b/app/src/main/res/anim/message_out.xml	(date 1653983318979)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="300">
+    <translate
+        android:fromYDelta="0"
+        android:fromXDelta="0"
+        android:toYDelta="100%"
+        android:toXDelta="0"/>
+</set>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/mark/Watermark.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/mark/Watermark.kt b/app/src/main/java/app/mango/music/mark/Watermark.kt
new file mode 100644
--- /dev/null	(date 1654928967175)
+++ b/app/src/main/java/app/mango/music/mark/Watermark.kt	(date 1654928967175)
@@ -0,0 +1,79 @@
+package app.mango.music.mark
+
+import android.app.Activity
+import android.graphics.ColorMatrix
+import android.graphics.ColorMatrixColorFilter
+import android.graphics.Paint
+import android.view.View
+import android.view.ViewGroup
+import android.view.Window
+import android.widget.FrameLayout
+import android.R
+
+internal class Watermark private constructor() {
+
+    private var text = ""
+    private var textColor = -0x51515152
+    private var textSize = 18f
+    private var rotation = -25f
+
+    fun setText(text: String): Watermark {
+        this.text = text
+        return sInstance
+    }
+
+    fun setTextColor(color: Int): Watermark {
+        textColor = color
+        return sInstance
+    }
+
+    fun setTextSize(size: Float): Watermark {
+        textSize = size
+        return sInstance
+    }
+
+    fun setRotation(degrees: Float): Watermark {
+        rotation = degrees
+        return sInstance
+    }
+
+    @JvmOverloads
+    fun show(activity: Activity, text: String = this.text): Watermark {
+        val drawable = WatermarkDrawable(activity)
+        drawable.text = text
+        drawable.textColor = textColor
+        drawable.textSize = textSize
+        drawable.rotation = rotation
+        val rootView = activity.findViewById<ViewGroup>(R.id.content)
+        val layout = FrameLayout(activity)
+        layout.layoutParams = FrameLayout.LayoutParams(
+            ViewGroup.LayoutParams.MATCH_PARENT,
+            ViewGroup.LayoutParams.MATCH_PARENT
+        )
+        layout.background = drawable
+        rootView.addView(layout)
+        return instance
+    }
+
+    fun saturation(window: Window?, isShow:Boolean){
+        window?.decorView?.setLayerType(View.LAYER_TYPE_HARDWARE, Paint().apply {
+            colorFilter = ColorMatrixColorFilter(ColorMatrix().apply {
+                setSaturation(if(isShow) 0f else 1f)
+            })
+        })
+    }
+
+    companion object {
+        private lateinit var sInstance: Watermark
+        val instance: Watermark
+            get() {
+                if (!this::sInstance.isInitialized) {
+                    synchronized(Watermark::class.java) {
+                        sInstance = Watermark()
+                    }
+                }
+                return sInstance
+            }
+    }
+
+}
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1653569781019)
+++ b/.idea/.gitignore	(date 1653569781019)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: app/src/main/res/layout/navigation_header.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/navigation_header.xml b/app/src/main/res/layout/navigation_header.xml
new file mode 100644
--- /dev/null	(date 1653580494068)
+++ b/app/src/main/res/layout/navigation_header.xml	(date 1653580494068)
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="?android:windowBackground"
+    android:orientation="vertical">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <!--<com.airbnb.lottie.LottieAnimationView
+            android:id="@+id/animationView"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            app:layout_constraintBottom_toBottomOf="@id/navigation_top"
+            app:layout_constraintTop_toTopOf="@id/navigation_top"
+            app:lottie_autoPlay="true"
+            app:lottie_loop="true"
+            app:lottie_colorFilter="?colorPrimary"
+            app:lottie_rawRes="@raw/geometric_back"
+            tools:ignore="MissingConstraints" />-->
+
+        <LinearLayout
+            android:id="@+id/navigation_top"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="?android:attr/selectableItemBackground"
+            android:clickable="true"
+            android:gravity="bottom"
+            android:orientation="vertical"
+            android:paddingLeft="16dp"
+            android:paddingTop="32dp"
+            android:paddingRight="16dp"
+            android:paddingBottom="8dp"
+            tools:ignore="MissingConstraints">
+
+            <com.google.android.material.imageview.ShapeableImageView
+                android:layout_width="64dp"
+                android:layout_height="64dp"
+                android:layout_marginLeft="4dp"
+                android:layout_marginTop="16dp"
+                android:layout_marginBottom="16dp"
+                android:padding="1dp"
+                android:src="@drawable/icon"
+                app:strokeColor="?colorPrimary"
+                app:strokeWidth="2dp" /><!--
+            app:shapeAppearanceOverlay="@style/CircleImageStyle"-->
+
+            <TextView
+                android:id="@+id/drawer_user_name"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:paddingTop="8dp"
+                android:text="@string/app_name"
+                android:textSize="16dp"
+                android:textStyle="bold" />
+
+            <TextClock
+                android:id="@+id/drawer_user_date"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingTop="8dp"
+                android:textSize="14sp" />
+        </LinearLayout>
+    </androidx.constraintlayout.widget.ConstraintLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/layout/navigation_divider.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/navigation_divider.xml b/app/src/main/res/layout/navigation_divider.xml
new file mode 100644
--- /dev/null	(date 1653580494055)
+++ b/app/src/main/res/layout/navigation_divider.xml	(date 1653580494055)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:paddingTop="@dimen/design_navigation_separator_vertical_padding"
+    android:paddingBottom="@dimen/design_navigation_separator_vertical_padding"
+    android:layout_height="wrap_content">
+
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="1dp"
+        android:background="?dividerVertical"
+        tools:ignore="MissingConstraints" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1653573445654)
+++ b/.idea/compiler.xml	(date 1653573445654)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="11" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_detail.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_detail.xml b/app/src/main/res/layout/fragment_detail.xml
new file mode 100644
--- /dev/null	(date 1655006892323)
+++ b/app/src/main/res/layout/fragment_detail.xml	(date 1655006892323)
@@ -0,0 +1,142 @@
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <data>
+
+        <variable
+            name="detail"
+            type="app.mango.music.audio.Detail" />
+
+        <variable
+            name="musicBox"
+            type="app.mango.music.audio.MusicBox" />
+
+    </data>
+
+
+    <com.google.android.material.card.MaterialCardView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:transitionName="@string/music_card_detail_transition_name"
+        app:marginTopSystemWindowInsets="@{true}"
+        app:strokeWidth="0dp">
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/menu_item_constraint_layout"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+
+            <TextView
+                android:id="@+id/title_text_view"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="@dimen/grid_2"
+                android:layout_marginTop="@dimen/grid_1"
+                android:layout_marginEnd="@dimen/grid_1"
+                android:textAppearance="?attr/textAppearanceHeadline4"
+                app:layout_constraintEnd_toStartOf="@+id/navigation_icon"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toTopOf="parent"
+                app:title_detail="@{detail.mediaItem}"
+                app:title_type="@{musicBox}"
+                tools:text="High school reunion" />
+
+            <ImageButton
+                android:id="@+id/navigation_icon"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginEnd="@dimen/grid_2"
+                android:background="?attr/actionBarItemBackground"
+                android:padding="@dimen/grid_2"
+                android:rotation="180"
+                android:src="@drawable/ic_arrow_up"
+                app:layout_constraintEnd_toEndOf="@+id/sender_profile_image_view"
+                app:layout_constraintStart_toStartOf="@+id/sender_profile_image_view"
+                app:layout_constraintTop_toTopOf="@+id/title_text_view"
+                tools:ignore="ContentDescription" />
+
+            <TextView
+                android:id="@+id/subtitle_text_view"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="@dimen/grid_2"
+                android:layout_marginTop="@dimen/grid_1"
+                android:layout_marginEnd="@dimen/grid_1"
+                android:textAppearance="?attr/textAppearanceCaption"
+                app:info_detail="@{detail}"
+                app:info_type="@{musicBox}"
+                app:layout_constraintEnd_toStartOf="@+id/sender_profile_image_view"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@+id/title_text_view"
+                tools:text="Ali Connors -- 12m" />
+
+            <TextView
+                android:id="@+id/recipient_text_view"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="@dimen/grid_2"
+                android:layout_marginTop="@dimen/grid_0_25"
+                android:layout_marginEnd="@dimen/grid_1"
+                android:textAppearance="?attr/textAppearanceCaption"
+                app:layout_constraintEnd_toStartOf="@+id/sender_profile_image_view"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/subtitle_text_view"
+                app:music_duration="@{detail}"
+                tools:text="duration" />
+
+            <ImageView
+                android:id="@+id/sender_profile_image_view"
+                android:layout_width="@dimen/music_profile_image_size"
+                android:layout_height="@dimen/music_profile_image_size"
+                android:layout_marginEnd="@dimen/grid_2"
+                android:scaleType="centerCrop"
+                app:layout_constraintBottom_toBottomOf="@+id/recipient_text_view"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintTop_toTopOf="@id/subtitle_text_view"
+                app:loadCover="@{detail.mediaItem}"
+                tools:ignore="ContentDescription" />
+
+            <TextView
+                android:id="@+id/body_text_view"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="@dimen/grid_2"
+                android:layout_marginTop="@dimen/grid_3"
+                android:text="@{@string/detail_music_count(detail.count)}"
+                android:textAppearance="?attr/textAppearanceBody1"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/sender_profile_image_view"
+                tools:text="@string/detail_music_count" />
+
+            <View
+                android:id="@+id/divider"
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:background="@android:color/white"
+                android:backgroundTint="@color/material_on_surface_stroke"
+                android:visibility="invisible"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/body_text_view" />
+
+            <androidx.recyclerview.widget.RecyclerView
+                android:id="@+id/attachment_recycler_view"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:background="?attr/scrimBackground"
+                android:clipToPadding="false"
+                android:overScrollMode="never"
+                android:paddingBottom="80dp"
+                android:scrollbars="none"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/divider" />
+
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+    </com.google.android.material.card.MaterialCardView>
+
+</layout>
\ No newline at end of file
Index: app/src/main/res/layout/navigation_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/navigation_item.xml b/app/src/main/res/layout/navigation_item.xml
new file mode 100644
--- /dev/null	(date 1653635579285)
+++ b/app/src/main/res/layout/navigation_item.xml	(date 1653635579285)
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+<app.mango.music.ui.nav.view.CheckableForegroundLinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:gravity="center_vertical"
+    android:background="?selectableItemBackground"
+    android:layout_height="56dp">
+
+    <ImageView
+        app:tint="?android:textColorSecondary"
+        android:duplicateParentState="true"
+        android:id="@+id/nav_icon"
+        android:layout_marginLeft="32dp"
+        android:layout_marginRight="32dp"
+        android:layout_width="24dp"
+        android:layout_height="24dp"/>
+
+    <TextView
+        android:duplicateParentState="true"
+        android:textAppearance="?attr/textAppearanceSubtitle1"
+        android:gravity="center_vertical"
+        android:id="@+id/nav_title"
+        android:layout_width="0dp"
+        android:layout_weight="1"
+        android:layout_height="match_parent"/>
+
+    <TextView
+        android:textAppearance="@style/TextAppearance.AppCompat.Body2"
+        android:duplicateParentState="true"
+        android:layout_marginRight="16dp"
+        android:layout_marginLeft="16dp"
+        android:gravity="center_vertical|right"
+        android:id="@+id/nav_tag"
+        android:layout_width="48dp"
+        android:layout_height="48dp"/>
+
+</app.mango.music.ui.nav.view.CheckableForegroundLinearLayout>
+</layout>
\ No newline at end of file
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1653569803847)
+++ b/.idea/.name	(date 1653569803847)
@@ -0,0 +1,1 @@
+Mango
\ No newline at end of file
Index: app/src/main/res/values-v28/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-v28/themes.xml b/app/src/main/res/values-v28/themes.xml
new file mode 100644
--- /dev/null	(date 1654939261650)
+++ b/app/src/main/res/values-v28/themes.xml	(date 1654939261650)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+
+    <style name="Platform.V28.Theme.Immersive" parent="Platform.V21.Theme.Immersive">
+        <item name="android:windowLayoutInDisplayCutoutMode">shortEdges</item>
+    </style>
+    <style name="Platform.Theme.Immersive" parent="Platform.V28.Theme.Immersive" />
+</resources>
Index: app/src/main/res/layout/fragment_search.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_search.xml b/app/src/main/res/layout/fragment_search.xml
new file mode 100644
--- /dev/null	(date 1654576100496)
+++ b/app/src/main/res/layout/fragment_search.xml	(date 1654576100496)
@@ -0,0 +1,84 @@
+<layout xmlns:tools="http://schemas.android.com/tools"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <data>
+
+        <variable
+            name="viewmodel"
+            type="app.mango.music.viewmodel.MusicViewModel" />
+    </data>
+
+    <androidx.coordinatorlayout.widget.CoordinatorLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:transitionGroup="true"
+        app:paddingTopSystemWindowInsets="@{true}">
+
+        <com.google.android.material.appbar.AppBarLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="?attr/colorSurface"
+            app:elevation="0dp">
+
+            <androidx.appcompat.widget.Toolbar
+                android:id="@+id/search_toolbar"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:clipChildren="false"
+                android:paddingLeft="@dimen/grid_1"
+                android:paddingRight="@dimen/grid_1"
+                app:contentInsetStartWithNavigation="0dp"
+                app:navigationIcon="@drawable/ic_arrow_back">
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="48dp"
+                    android:gravity="center_vertical"
+                    android:orientation="horizontal">
+
+                    <EditText
+                        android:autofillHints="username"
+                        android:layout_width="0dp"
+                        android:layout_height="match_parent"
+                        android:layout_weight="1"
+                        android:background="@null"
+                        android:hint="@string/search_suggestion_hint"
+                        android:imeOptions="flagNoExtractUi|actionSearch"
+                        android:inputType="textNoSuggestions"
+                        android:text="@={viewmodel.searchKey}" />
+
+                    <ImageButton
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:background="?attr/actionBarItemBackground"
+                        android:padding="@dimen/grid_2"
+                        app:srcCompat="@drawable/ic_search"
+                        tools:ignore="ContentDescription" />
+                </LinearLayout>
+            </androidx.appcompat.widget.Toolbar>
+
+        </com.google.android.material.appbar.AppBarLayout>
+
+
+        <View
+            android:id="@+id/divider"
+            android:layout_width="match_parent"
+            android:layout_height="1dp"
+            android:background="@android:color/white"
+            android:backgroundTint="@color/material_on_surface_stroke"
+            app:layout_behavior="com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior" />
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:overScrollMode="never"
+            android:id="@+id/recycler_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_marginTop="1dp"
+            android:clipToPadding="false"
+            android:paddingBottom="80dp"
+            android:scrollbars="none"
+            app:layout_behavior="com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior" />
+
+    </androidx.coordinatorlayout.widget.CoordinatorLayout>
+</layout>
Index: app/src/main/res/values/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/dimens.xml b/app/src/main/res/values/dimens.xml
new file mode 100644
--- /dev/null	(date 1654868770139)
+++ b/app/src/main/res/values/dimens.xml	(date 1654868770139)
@@ -0,0 +1,31 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <dimen name="fab_margin">16dp</dimen>
+
+    <dimen name="min_touch_target_size">48dp</dimen>
+
+    <!--BottomAppBar-->
+    <dimen name="bottom_app_bar_height">56dp</dimen>
+    <dimen name="bottom_app_bar_fab_cradle_corner_radius">32dp</dimen>
+    <dimen name="bottom_app_bar_fab_cradle_margin">8dp</dimen>
+    <dimen name="bottom_app_bar_logo_size">24dp</dimen>
+
+    <dimen name="navigation_drawer_profile_image_size_padded">32dp</dimen>
+    <dimen name="navigation_drawer_nav_bottom_margin">62dp</dimen>
+
+    <!--Music previews-->
+    <dimen name="music_profile_image_size">42dp</dimen>
+    <dimen name="music_card_popup_elevation">6dp</dimen>
+    <dimen name="music_card_popup_elevation_compat">3dp</dimen>
+
+    <dimen name="pause_bar_width" tools:ignore="MissingDefaultResource">5dp</dimen>
+    <dimen name="pause_bar_distance" tools:ignore="MissingDefaultResource">4dp</dimen>
+    <dimen name="pause_bar_height" tools:ignore="MissingDefaultResource">14dp</dimen>
+
+    <dimen name="lrc_text_size">16sp</dimen>
+    <dimen name="lrc_time_text_size">12sp</dimen>
+    <dimen name="lrc_divider_height">16dp</dimen>
+    <dimen name="lrc_timeline_height">1dp</dimen>
+    <dimen name="lrc_drawable_width">30dp</dimen>
+    <dimen name="lrc_time_width">40dp</dimen>
+
+</resources>
\ No newline at end of file
Index: app/src/main/res/values/motion.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/motion.xml b/app/src/main/res/values/motion.xml
new file mode 100644
--- /dev/null	(date 1653573059876)
+++ b/app/src/main/res/values/motion.xml	(date 1653573059876)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+
+    <!--Motion-->
+
+    <integer name="motion_duration_large">300</integer>
+    <integer name="motion_duration_medium">225</integer>
+    <integer name="motion_duration_small">175</integer>
+
+</resources>
\ No newline at end of file
Index: app/src/main/res/values-v23/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-v23/themes.xml b/app/src/main/res/values-v23/themes.xml
new file mode 100644
--- /dev/null	(date 1654938553854)
+++ b/app/src/main/res/values-v23/themes.xml	(date 1654938553854)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+
+    <style name="Platform.V23.Theme" parent="Platform.V21.Theme">
+        <item name="colorPrimaryDark">@color/system_window_scrim</item>
+        <item name="android:windowLightStatusBar">?isLightTheme</item>
+    </style>
+    <style name="Platform.Theme" parent="Platform.V23.Theme" />
+</resources>
Index: app/src/main/res/values/elevation.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/elevation.xml b/app/src/main/res/values/elevation.xml
new file mode 100644
--- /dev/null	(date 1653575173668)
+++ b/app/src/main/res/values/elevation.xml	(date 1653575173668)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <dimen name="plane_00">0dp</dimen>
+    <dimen name="plane_01">1dp</dimen>
+    <dimen name="plane_02">2dp</dimen>
+    <dimen name="plane_06">6dp</dimen>
+    <dimen name="plane_08">8dp</dimen>
+    <dimen name="plane_16">16dp</dimen>
+</resources>
\ No newline at end of file
Index: app/src/main/res/values/arrays.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/arrays.xml b/app/src/main/res/values/arrays.xml
new file mode 100644
--- /dev/null	(date 1653882051513)
+++ b/app/src/main/res/values/arrays.xml	(date 1653882051513)
@@ -0,0 +1,12 @@
+<resources>
+    <!-- Reply Preference -->
+    <string-array name="reply_entries">
+        <item>Reply</item>
+        <item>Reply to all</item>
+    </string-array>
+
+    <string-array name="reply_values">
+        <item>reply</item>
+        <item>reply_all</item>
+    </string-array>
+</resources>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1653572315650)
+++ b/.idea/gradle.xml	(date 1653572315650)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="testRunner" value="GRADLE" />
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleHome" value="$PROJECT_DIR$/../../gradle-6.1.1-all/gradle-6.1.1" />
+        <option name="gradleJvm" value="11" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/values/shape.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/shape.xml b/app/src/main/res/values/shape.xml
new file mode 100644
--- /dev/null	(date 1653580590802)
+++ b/app/src/main/res/values/shape.xml	(date 1653580590802)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <!--Shape-->
+    <style name="ShapeAppearance.Navigation" parent="">
+        <item name="cornerFamily">rounded</item>
+        <item name="cornerSize">24dp</item>
+        <item name="cornerSizeTopLeft">0dp</item>
+        <item name="cornerSizeBottomLeft">0dp</item>
+    </style>
+
+    <style name="ShapeAppearance.Owl.MediumComponent" parent="ShapeAppearance.MaterialComponents.MediumComponent">
+        <item name="cornerFamily">rounded</item>
+        <item name="cornerSize">0px</item>
+    </style>
+    <style name="ShapeAppearance.Owl.MinimizedSheet" parent="ShapeAppearance.Owl.MediumComponent">
+        <item name="cornerSizeTopLeft">@dimen/minimized_sheet_top_left_radius</item>
+    </style>
+    <dimen name="minimized_sheet_top_left_radius">48dp</dimen>
+
+    <dimen name="small_component_corner_radius">24dp</dimen>
+
+</resources>
\ No newline at end of file
Index: app/src/main/res/values/attrs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/attrs.xml b/app/src/main/res/values/attrs.xml
new file mode 100644
--- /dev/null	(date 1655868295654)
+++ b/app/src/main/res/values/attrs.xml	(date 1655868295654)
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <attr name="colorAppBarSurface" format="color" />
+    <attr name="colorSecondary" format="color" />
+    <attr name="scrimBackground" format="color" />
+    <attr name="motionInterpolatorPersistent" format="reference"/>
+
+    <declare-styleable name="EdgeTransparentView">
+        <attr name="edge_position">
+            <flag name="top" value="0x01"/>
+            <flag name="bottom" value="0x02"/>
+            <flag name="left" value="0x04"/>
+            <flag name="right" value="0x08"/>
+        </attr>
+
+        <attr name="edge_width" format="dimension"/>
+    </declare-styleable>
+
+    <declare-styleable name="ForegroundImageView">
+        <attr name="android:foreground"/>
+    </declare-styleable>
+
+    <declare-styleable name="LrcViewKt">
+        <attr name="lrcTextSize" format="dimension" />
+        <attr name="lrcDividerHeight" format="dimension" />
+        <attr name="lrcNormalTextColor" format="reference|color" />
+        <attr name="lrcCurrentTextColor" format="reference|color" />
+        <attr name="lrcTimelineTextColor" format="reference|color" />
+        <attr name="lrcAnimationDuration" format="integer" />
+        <attr name="lrcLabel" format="string" />
+        <attr name="lrcPadding" format="dimension" />
+        <attr name="lrcTimelineColor" format="reference|color" />
+        <attr name="lrcTimelineHeight" format="dimension" />
+        <attr name="lrcPlayDrawable" format="reference" />
+        <attr name="lrcTimeTextColor" format="reference|color" />
+        <attr name="lrcTimeTextSize" format="dimension" />
+        <attr name="lrcTextGravity">
+            <enum name="left" value="1"/>
+            <enum name="center" value="2"/>
+            <enum name="right" value="3"/>
+        </attr>
+    </declare-styleable>
+</resources>
\ No newline at end of file
Index: app/src/main/res/values/ids.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/ids.xml b/app/src/main/res/values/ids.xml
new file mode 100644
--- /dev/null	(date 1653536898960)
+++ b/app/src/main/res/values/ids.xml	(date 1653536898960)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item name="tag_system_window_inset_top" type="id"/>
+    <item name="tag_view_top_snapshot" type="id"/>
+</resources>
\ No newline at end of file
Index: app/src/main/res/values/layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/layout.xml b/app/src/main/res/values/layout.xml
new file mode 100644
--- /dev/null	(date 1653535672969)
+++ b/app/src/main/res/values/layout.xml	(date 1653535672969)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+
+    <!--Layout-->
+    <!--Reply uses an 8dp grid system. Smaller components can align to a 2dp 'sub' grid.-->
+
+    <!--2dp sub grid-->
+    <dimen name="grid_0_25">2dp</dimen>
+    <dimen name="grid_0_5">4dp</dimen>
+
+    <!--8dp grid-->
+    <dimen name="grid_1">8dp</dimen>
+    <dimen name="grid_2">16dp</dimen>
+    <dimen name="grid_3">24dp</dimen>
+    <dimen name="grid_4">32dp</dimen>
+</resources>
\ No newline at end of file
Index: app/src/main/res/values/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/themes.xml b/app/src/main/res/values/themes.xml
new file mode 100644
--- /dev/null	(date 1654939341377)
+++ b/app/src/main/res/values/themes.xml	(date 1654939341377)
@@ -0,0 +1,59 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+
+    <!--<style name="Base.Theme.Mango" parent="Theme.Material3.DayNight.NoActionBar">-->
+
+    <style name="Platform.V21.Theme" parent="Theme.MaterialComponents.DayNight.NoActionBar">
+        <item name="colorPrimaryDark">@color/system_window_scrim_compat</item>
+    </style>
+    <style name="Platform.Theme" parent="Platform.V21.Theme" />
+    <style name="Base.Theme" parent="Platform.Theme">
+        <item name="android:colorBackground">?colorSurface</item>
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+
+        <item name="colorPrimaryVariant">?colorPrimary</item>
+        <item name="colorSecondary">?colorPrimary</item>
+        <item name="colorOnSecondary">?colorOnPrimary</item>
+        <item name="colorSecondaryVariant">?colorSecondary</item>
+        <item name="colorSurface">@color/color_surface</item>
+        <item name="minTouchTargetSize">0dp</item>
+        <item name="textInputStyle">@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox</item>
+
+        <item name="colorAppBarSurface">?colorSurface</item>
+        <item name="scrimBackground">#99eef0f2</item>
+    </style>
+
+    <style name="Theme" parent="Base.Theme" >
+        <item name="android:navigationBarColor">@android:color/transparent</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+    </style>
+
+    <style name="Theme.Purple">
+        <item name="colorPrimary">#C9A8D4</item>
+    </style>
+
+    <style name="Platform.V21.Theme.Immersive" parent="Theme.MaterialComponents">
+        <item name="android:navigationBarColor">?colorPrimaryDark</item>
+        <item name="colorPrimaryDark">@color/dark_50_percent</item>
+    </style>
+    <style name="Platform.Theme.Immersive" parent="Platform.V21.Theme.Immersive" />
+    <style name="Base.Theme.Immersive" parent="Platform.Theme.Immersive">
+
+        <item name="android:colorBackground">?colorSurface</item>
+        <item name="windowActionBar">false</item>
+        <item name="android:windowBackground">@android:color/black</item>
+        <item name="windowNoTitle">true</item>
+
+        <item name="colorPrimary">@color/color_primary_dark</item>
+        <item name="colorPrimaryVariant">?colorPrimary</item>
+        <item name="colorSecondary">?colorPrimary</item>
+        <item name="colorOnSecondary">?colorOnPrimary</item>
+        <item name="colorSecondaryVariant">?colorSecondary</item>
+        <item name="colorSurface">@color/color_surface_dark</item>
+        <item name="minTouchTargetSize">0dp</item>
+        <item name="textInputStyle">@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox</item>
+
+        <item name="colorAppBarSurface">@color/dark_50_percent</item>
+    </style>
+    <style name="Theme.Immersive" parent="Base.Theme.Immersive" />
+</resources>
\ No newline at end of file
Index: app/src/main/res/animator/fab_hide.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/animator/fab_hide.xml b/app/src/main/res/animator/fab_hide.xml
new file mode 100644
--- /dev/null	(date 1653573059882)
+++ b/app/src/main/res/animator/fab_hide.xml	(date 1653573059882)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <objectAnimator
+        android:propertyName="scale"
+        android:valueFrom="1"
+        android:valueTo="0"
+        android:duration="@integer/motion_duration_small"
+        android:repeatMode="restart"
+        android:interpolator="@android:interpolator/fast_out_slow_in"/>
+    <objectAnimator
+        android:propertyName="iconScale"
+        android:valueFrom="1"
+        android:valueTo="0"
+        android:duration="@integer/motion_duration_small"
+        android:repeatMode="restart"
+        android:interpolator="@android:interpolator/fast_out_slow_in"/>
+    <objectAnimator
+        android:propertyName="opacity"
+        android:valueFrom="1"
+        android:valueTo="0"
+        android:duration="@integer/motion_duration_small"
+        android:repeatMode="restart"
+        android:interpolator="@android:interpolator/fast_out_slow_in"/>
+</set>
\ No newline at end of file
Index: app/src/main/res/animator/fab_show.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/animator/fab_show.xml b/app/src/main/res/animator/fab_show.xml
new file mode 100644
--- /dev/null	(date 1653573059888)
+++ b/app/src/main/res/animator/fab_show.xml	(date 1653573059888)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<set xmlns:android="http://schemas.android.com/apk/res/android"
+    android:ordering="together">
+    <objectAnimator
+        android:propertyName="scale"
+        android:valueFrom="0"
+        android:valueTo="1"
+        android:duration="@integer/motion_duration_small"
+        android:repeatMode="restart"
+        android:interpolator="@android:interpolator/fast_out_slow_in"/>
+    <objectAnimator
+        android:propertyName="iconScale"
+        android:valueFrom="0"
+        android:valueTo="1"
+        android:duration="@integer/motion_duration_small"
+        android:repeatMode="restart"
+        android:interpolator="@android:interpolator/fast_out_slow_in"/>
+    <objectAnimator
+        android:propertyName="opacity"
+        android:valueFrom="0"
+        android:valueTo="1"
+        android:duration="@integer/motion_duration_small"
+        android:repeatMode="restart"
+        android:interpolator="@android:interpolator/fast_out_slow_in"/>
+</set>
\ No newline at end of file
Index: app/src/main/res/values-v27/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-v27/themes.xml b/app/src/main/res/values-v27/themes.xml
new file mode 100644
--- /dev/null	(date 1654938663648)
+++ b/app/src/main/res/values-v27/themes.xml	(date 1654938663648)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+    <style name="Platform.V27.Theme" parent="Platform.V23.Theme">
+        <item name="android:navigationBarColor">?colorPrimaryDark</item>
+        <item name="android:windowLightNavigationBar">?isLightTheme</item>
+    </style>
+    <style name="Platform.Theme" parent="Platform.V27.Theme" />
+</resources>
Index: app/src/main/java/app/mango/music/ui/nav/BottomNavigationDrawerCallback.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/BottomNavigationDrawerCallback.kt b/app/src/main/java/app/mango/music/ui/nav/BottomNavigationDrawerCallback.kt
new file mode 100644
--- /dev/null	(date 1653576775441)
+++ b/app/src/main/java/app/mango/music/ui/nav/BottomNavigationDrawerCallback.kt	(date 1653576775441)
@@ -0,0 +1,75 @@
+package app.mango.music.ui.nav
+
+import android.annotation.SuppressLint
+import android.view.View
+import androidx.coordinatorlayout.widget.CoordinatorLayout
+import app.mango.music.utils.normalize
+import com.google.android.material.R
+import com.google.android.material.bottomsheet.BottomSheetBehavior
+import kotlin.math.max
+
+class BottomNavigationDrawerCallback : BottomSheetBehavior.BottomSheetCallback() {
+
+    private val onSlideActions: MutableList<OnSlideAction> = mutableListOf()
+    private val onStateChangedActions: MutableList<OnStateChangedAction> = mutableListOf()
+
+    private var lastSlideOffset = -1.0F
+    private var halfExpandedSlideOffset = Float.MAX_VALUE
+
+    override fun onSlide(sheet: View, slideOffset: Float) {
+        if (halfExpandedSlideOffset == Float.MAX_VALUE)
+            calculateInitialHalfExpandedSlideOffset(sheet)
+
+        lastSlideOffset = slideOffset
+        val trueOffset = if (slideOffset <= halfExpandedSlideOffset) {
+            slideOffset.normalize(-1F, halfExpandedSlideOffset, -1F, 0F)
+        } else {
+            slideOffset.normalize(halfExpandedSlideOffset, 1F, 0F, 1F)
+        }
+
+        onSlideActions.forEach { it.onSlide(sheet, trueOffset) }
+    }
+
+    override fun onStateChanged(sheet: View, newState: Int) {
+        if (newState == BottomSheetBehavior.STATE_HALF_EXPANDED) {
+            halfExpandedSlideOffset = lastSlideOffset
+            onSlide(sheet, lastSlideOffset)
+        }
+
+        onStateChangedActions.forEach { it.onStateChanged(sheet, newState) }
+    }
+
+    @SuppressLint("PrivateResource")
+    private fun calculateInitialHalfExpandedSlideOffset(sheet: View) {
+        val parent = sheet.parent as CoordinatorLayout
+        val behavior = BottomSheetBehavior.from(sheet)
+
+        val halfExpandedOffset = parent.height * (1 - behavior.halfExpandedRatio)
+        val peekHeightMin = parent.resources.getDimensionPixelSize(
+            R.dimen.design_bottom_sheet_peek_height_min
+        )
+        val peek = max(peekHeightMin, parent.height - parent.width * 9 / 16)
+        val collapsedOffset = max(
+            parent.height - peek,
+            max(0, parent.height - sheet.height)
+        )
+        halfExpandedSlideOffset =
+            (collapsedOffset - halfExpandedOffset) / (parent.height - collapsedOffset)
+    }
+
+    fun addOnSlideAction(action: OnSlideAction): Boolean {
+        return onSlideActions.add(action)
+    }
+
+    fun removeOnSlideAction(action: OnSlideAction): Boolean {
+        return onSlideActions.remove(action)
+    }
+
+    fun addOnStateChangedAction(action: OnStateChangedAction): Boolean {
+        return onStateChangedActions.add(action)
+    }
+
+    fun removeOnStateChangedAction(action: OnStateChangedAction): Boolean {
+        return onStateChangedActions.remove(action)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/nav/OnStateChangedAction.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/OnStateChangedAction.kt b/app/src/main/java/app/mango/music/ui/nav/OnStateChangedAction.kt
new file mode 100644
--- /dev/null	(date 1653883252777)
+++ b/app/src/main/java/app/mango/music/ui/nav/OnStateChangedAction.kt	(date 1653883252777)
@@ -0,0 +1,67 @@
+package app.mango.music.ui.nav
+
+import android.view.View
+import androidx.navigation.NavController
+import androidx.recyclerview.widget.RecyclerView
+import com.google.android.material.bottomsheet.BottomSheetBehavior
+import com.google.android.material.floatingactionbutton.FloatingActionButton
+
+interface OnStateChangedAction {
+    fun onStateChanged(sheet: View, newState: Int)
+}
+
+class ChangeSettingsMenuStateAction(
+    private val onShouldShowSettingsMenu: (showSettings: Boolean) -> Unit
+) : OnStateChangedAction {
+
+    private var hasCalledShowSettingsMenu: Boolean = false
+
+    override fun onStateChanged(sheet: View, newState: Int) {
+        if (newState == BottomSheetBehavior.STATE_HIDDEN) {
+            hasCalledShowSettingsMenu = false
+            onShouldShowSettingsMenu(false)
+        } else {
+            if (!hasCalledShowSettingsMenu) {
+                hasCalledShowSettingsMenu = true
+                onShouldShowSettingsMenu(true)
+            }
+        }
+    }
+}
+
+class ShowHideFabStateAction(
+    private val fab: FloatingActionButton,
+    private val nav: NavController,
+    private val hideIds:IntArray
+) : OnStateChangedAction {
+
+    override fun onStateChanged(sheet: View, newState: Int) {
+        if (newState == BottomSheetBehavior.STATE_HIDDEN && nav.currentDestination!!.id !in hideIds) {
+            fab.show()
+        } else {
+            fab.hide()
+        }
+    }
+}
+
+class VisibilityStateAction(
+    private val view: View,
+    private val reverse: Boolean = false
+) : OnStateChangedAction {
+    override fun onStateChanged(sheet: View, newState: Int) {
+        val stateHiddenVisibility = if (!reverse) View.GONE else View.VISIBLE
+        val stateDefaultVisibility = if (!reverse) View.VISIBLE else View.GONE
+        when (newState) {
+            BottomSheetBehavior.STATE_HIDDEN -> view.visibility = stateHiddenVisibility
+            else -> view.visibility = stateDefaultVisibility
+        }
+    }
+}
+
+class ScrollToTopStateAction(
+    private val recyclerView: RecyclerView
+) : OnStateChangedAction {
+    override fun onStateChanged(sheet: View, newState: Int) {
+        if (newState == BottomSheetBehavior.STATE_HIDDEN) recyclerView.scrollToPosition(0)
+    }
+}
Index: app/src/main/java/app/mango/music/ui/nav/OnSlideAction.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/OnSlideAction.kt b/app/src/main/java/app/mango/music/ui/nav/OnSlideAction.kt
new file mode 100644
--- /dev/null	(date 1653666276354)
+++ b/app/src/main/java/app/mango/music/ui/nav/OnSlideAction.kt	(date 1653666276354)
@@ -0,0 +1,83 @@
+package app.mango.music.ui.nav
+
+import android.view.View
+import android.widget.ImageView
+import androidx.annotation.FloatRange
+import androidx.core.view.marginTop
+import androidx.core.view.updatePadding
+import app.mango.music.R
+import app.mango.music.utils.normalize
+import com.google.android.material.shape.MaterialShapeDrawable
+
+interface OnSlideAction {
+    fun onSlide(
+        sheet: View,
+        @FloatRange(
+            from = -1.0,
+            fromInclusive = true,
+            to = 1.0,
+            toInclusive = true
+        ) slideOffset: Float
+    )
+}
+
+class HalfClockwiseRotateSlideAction(
+    private val view: View
+) : OnSlideAction {
+
+    override fun onSlide(sheet: View, slideOffset: Float) {
+        view.rotation = slideOffset.normalize(
+            -1F,
+            0F,
+            0F,
+            180F
+        )
+    }
+}
+
+class ForegroundSheetTransformSlideAction(
+    private val foregroundView: View,
+    private val foregroundShapeDrawable: MaterialShapeDrawable,
+    private val profileImageView: ImageView
+) : OnSlideAction {
+
+    private val foregroundMarginTop = foregroundView.marginTop
+    private var systemTopInset: Int = 0
+    private val foregroundZ = foregroundView.z
+    private val profileImageOriginalZ = profileImageView.z
+
+    private fun getPaddingTop(): Int {
+        if (systemTopInset == 0) {
+            systemTopInset = foregroundView.getTag(R.id.tag_system_window_inset_top) as? Int? ?: 0
+        }
+        return systemTopInset
+    }
+
+    override fun onSlide(sheet: View, slideOffset: Float) {
+        val progress = slideOffset.normalize(0F, 0.25F, 1F, 0F)
+        profileImageView.scaleX = progress
+        profileImageView.scaleY = progress
+        foregroundShapeDrawable.interpolation = progress
+
+        foregroundView.translationY = -(1 - progress) * foregroundMarginTop
+        val topPaddingProgress = slideOffset.normalize(0F, 0.9F, 0F, 1F)
+        foregroundView.updatePadding(top = (getPaddingTop() * topPaddingProgress).toInt())
+
+        if (slideOffset > 0 && foregroundZ <= profileImageView.z) {
+            //profileImageView.z = profileImageOriginalZ
+        } else if (slideOffset <= 0 && foregroundZ >= profileImageView.z) {
+            //profileImageView.z = foregroundZ + 1
+        }
+    }
+}
+
+class AlphaSlideAction(
+    private val view: View,
+    private val reverse: Boolean = false
+) : OnSlideAction {
+
+    override fun onSlide(sheet: View, slideOffset: Float) {
+        val alpha = slideOffset.normalize(-1F, 0F, 0F, 1F)
+        view.alpha = if (!reverse) alpha else 1F - alpha
+    }
+}
Index: app/src/main/java/app/mango/music/ui/nav/SemiCircleEdgeCutoutTreatment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/SemiCircleEdgeCutoutTreatment.kt b/app/src/main/java/app/mango/music/ui/nav/SemiCircleEdgeCutoutTreatment.kt
new file mode 100644
--- /dev/null	(date 1653582431355)
+++ b/app/src/main/java/app/mango/music/ui/nav/SemiCircleEdgeCutoutTreatment.kt	(date 1653582431355)
@@ -0,0 +1,141 @@
+package app.mango.music.ui.nav
+
+import com.google.android.material.shape.EdgeTreatment
+import com.google.android.material.shape.ShapePath
+import kotlin.math.atan
+import kotlin.math.sqrt
+
+private const val ARC_QUARTER = 90
+private const val ARC_HALF = 180
+private const val ANGLE_UP = 270
+private const val ANGLE_LEFT = 180
+
+/**
+ * An edge treatment which draws a semicircle cutout at any point along the edge.
+ *
+ * @param cutoutMargin Additional width to be added to the [cutoutDiameter], resulting in a
+ *      larger total cutout size.
+ * @param cutoutRoundedCornerRadius The radius of the each of the corners where the semicircle
+ *      meets the straight edge.
+ * @param cutoutVerticalOffset The amount the cutout should be lifted up in relation to the circle's
+ *      middle.
+ * @param cutoutDiameter The diameter of the semicircle to be cutout.
+ * @param cutoutHorizontalOffset The horizontal offset, from the middle of the edge, where the
+ *      cutout should be drawn.
+ */
+class SemiCircleEdgeCutoutTreatment(
+        private var cutoutMargin: Float = 0F,
+        private var cutoutRoundedCornerRadius: Float = 0F,
+        private var cutoutVerticalOffset: Float = 0F,
+        private var cutoutDiameter: Float = 0F,
+        private var cutoutHorizontalOffset: Float = 0F
+) : EdgeTreatment() {
+
+    private var cradleDiameter = 0F
+    private var cradleRadius = 0F
+    private var roundedCornerOffset = 0F
+    private var middle = 0F
+    private var verticalOffset = 0F
+    private var verticalOffsetRatio = 0F
+    private var distanceBetweenCenters = 0F
+    private var distanceBetweenCentersSquared = 0F
+    private var distanceY = 0F
+    private var distanceX = 0F
+    private var leftRoundedCornerCircleX = 0F
+    private var rightRoundedCornerCircleX = 0F
+    private var cornerRadiusArcLength = 0F
+    private var cutoutArcOffset = 0F
+
+    init {
+        require(cutoutVerticalOffset >= 0) {
+            "cutoutVerticalOffset must be positive but was $cutoutVerticalOffset"
+        }
+    }
+
+    override fun getEdgePath(
+            length: Float,
+            center: Float,
+            interpolation: Float,
+            shapePath: ShapePath
+    ) {
+        if (cutoutDiameter == 0f) {
+            // There is no cutout to draw.
+            shapePath.lineTo(length, 0f)
+            return
+        }
+
+        cradleDiameter = cutoutMargin * 2 + cutoutDiameter
+        cradleRadius = cradleDiameter / 2f
+        roundedCornerOffset = interpolation * cutoutRoundedCornerRadius
+        middle = length / 2f + cutoutHorizontalOffset
+
+        verticalOffset = interpolation * cutoutVerticalOffset +
+                (1 - interpolation) * cradleRadius
+        verticalOffsetRatio = verticalOffset / cradleRadius
+
+        if (verticalOffsetRatio >= 1.0f) {
+            // Vertical offset is so high that there's no curve to draw in the edge. The circle is
+            // actually above the edge, so just draw a straight line.
+            shapePath.lineTo(length, 0f)
+            return
+        }
+
+        // Calculate the path of the cutout by calculating the location of two adjacent circles. One
+        // circle is for the rounded corner. If the rounded corner circle radius is 0 the corner
+        // will not be rounded. The other circle is the cutout.
+
+        // Calculate the X distance between the center of the two adjacent circles using pythagorean
+        // theorem.
+        distanceBetweenCenters = cradleRadius + roundedCornerOffset
+        distanceBetweenCentersSquared = distanceBetweenCenters * distanceBetweenCenters
+        distanceY = verticalOffset + roundedCornerOffset
+        distanceX = sqrt(
+                (distanceBetweenCentersSquared - distanceY * distanceY).toDouble()
+        ).toFloat()
+
+        // Calculate the x position of the rounded corner circles.
+        leftRoundedCornerCircleX = middle - distanceX
+        rightRoundedCornerCircleX = middle + distanceX
+
+        // Calculate the arc between the center of the two circles.
+        cornerRadiusArcLength = Math.toDegrees(
+                atan((distanceX / distanceY).toDouble())
+        ).toFloat()
+        cutoutArcOffset = ARC_QUARTER - cornerRadiusArcLength
+
+        // Draw the starting line up to the left rounded corner.
+        shapePath.lineTo(leftRoundedCornerCircleX - roundedCornerOffset, 0f)
+
+        // Draw the arc for the left rounded corner circle. The bounding box is the area around the
+        // circle's center which is at (leftRoundedCornerCircleX, roundedCornerOffset).
+        shapePath.addArc(
+                leftRoundedCornerCircleX - roundedCornerOffset,
+                0f,
+                leftRoundedCornerCircleX + roundedCornerOffset,
+                roundedCornerOffset * 2,
+                ANGLE_UP.toFloat(),
+                cornerRadiusArcLength)
+
+        // Draw the cutout circle.
+        shapePath.addArc(
+                middle - cradleRadius,
+                -cradleRadius - verticalOffset,
+                middle + cradleRadius,
+                cradleRadius - verticalOffset,
+                ANGLE_LEFT - cutoutArcOffset,
+                cutoutArcOffset * 2 - ARC_HALF)
+
+        // Draw an arc for the right rounded corner circle. The bounding box is the area around the
+        // circle's center which is at (rightRoundedCornerCircleX, roundedCornerOffset).
+        shapePath.addArc(
+                rightRoundedCornerCircleX - roundedCornerOffset,
+                0f,
+                rightRoundedCornerCircleX + roundedCornerOffset,
+                roundedCornerOffset * 2,
+                ANGLE_UP - cornerRadiusArcLength,
+                cornerRadiusArcLength)
+
+        // Draw the ending line after the right rounded corner.
+        shapePath.lineTo(length, 0f)
+    }
+}
Index: app/src/main/java/app/mango/music/ui/nav/BottomNavDrawerFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/BottomNavDrawerFragment.kt b/app/src/main/java/app/mango/music/ui/nav/BottomNavDrawerFragment.kt
new file mode 100644
--- /dev/null	(date 1654496088586)
+++ b/app/src/main/java/app/mango/music/ui/nav/BottomNavDrawerFragment.kt	(date 1654496088586)
@@ -0,0 +1,121 @@
+package app.mango.music.ui.nav
+
+import android.annotation.SuppressLint
+import android.os.Bundle
+import android.view.MotionEvent
+import android.view.View
+import androidx.activity.OnBackPressedCallback
+import androidx.appcompat.widget.LinearLayoutCompat
+import app.mango.music.databinding.FragmentBottomNavDrawerBinding
+import app.mango.music.ui.BaseFragment
+import app.mango.music.ui.nav.view.NavigationAdapter
+import app.mango.music.ui.nav.view.NavigationView
+import com.google.android.material.bottomsheet.BottomSheetBehavior
+
+class BottomNavDrawerFragment : BaseFragment<FragmentBottomNavDrawerBinding>() {
+
+    override fun setBinding(): FragmentBottomNavDrawerBinding =
+        FragmentBottomNavDrawerBinding.inflate(layoutInflater)
+
+    private val behavior: BottomSheetBehavior<LinearLayoutCompat> by lazy(LazyThreadSafetyMode.NONE) {
+        BottomSheetBehavior.from(binding.backgroundContainer)
+    }
+    private val bottomSheetCallback = BottomNavigationDrawerCallback()
+
+    private var navEvent:((Int,Int,Int)->Unit)? = null
+    private val navigationListeners = object : NavigationView.OnItemClickListener{
+        override fun onItemClick(item: NavigationAdapter.Items) {
+            navEvent?.invoke(item.id, item.title,item.icon)
+            close()
+        }
+    }
+
+    private val closeDrawerOnBackPressed = object : OnBackPressedCallback(false) {
+        override fun handleOnBackPressed() {
+            close()
+        }
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        requireActivity().onBackPressedDispatcher.addCallback(this, closeDrawerOnBackPressed)
+    }
+
+    @SuppressLint("ClickableViewAccessibility")
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        binding.run {
+            toolbar.setNavigationOnClickListener { close() }
+            nav.setOnItemClickListener(navigationListeners)
+            root.setOnTouchListener { _, motionEvent ->
+                when(motionEvent.action){
+                    MotionEvent.ACTION_DOWN -> {
+                        if(behavior.state!=BottomSheetBehavior.STATE_HIDDEN) {
+                            close()
+                            true
+                        }else false
+                    }
+                    else -> false
+                }
+            }
+            bottomSheetCallback.apply {
+                /*addOnSlideAction(ForegroundSheetTransformSlideAction(
+                binding.foregroundContainer,
+                backgroundShapeDrawable,
+                binding.profileImageView
+            ))*/
+                // Scrim view transforms
+                /*addOnSlideAction(AlphaSlideAction(scrimView))
+            addOnStateChangedAction(VisibilityStateAction(scrimView))
+            // Foreground transforms
+
+            // Recycler transforms
+            addOnStateChangedAction(ScrollToTopStateAction(navRecyclerView))
+            // Close the sandwiching account picker if open
+            addOnStateChangedAction(object : OnStateChangedAction {
+                override fun onStateChanged(sheet: View, newState: Int) {
+                    sandwichAnim?.cancel()
+                    sandwichProgress = 0F
+                }
+            })*/
+                // If the drawer is open, pressing the system back button should close the drawer.
+                addOnStateChangedAction(object : OnStateChangedAction {
+                    override fun onStateChanged(sheet: View, newState: Int) {
+                        closeDrawerOnBackPressed.isEnabled =
+                            newState != BottomSheetBehavior.STATE_HIDDEN
+                    }
+                })
+            }
+        }
+
+        behavior.addBottomSheetCallback(bottomSheetCallback)
+        behavior.state = BottomSheetBehavior.STATE_HIDDEN
+    }
+
+    fun close() {
+        behavior.state = BottomSheetBehavior.STATE_HIDDEN
+    }
+
+    private fun open() {
+        behavior.state = BottomSheetBehavior.STATE_HALF_EXPANDED
+    }
+
+    fun toggle(){
+        if(behavior.state!=BottomSheetBehavior.STATE_HIDDEN) close()
+        else open()
+    }
+
+    fun addOnSlideAction(action: OnSlideAction) {
+        bottomSheetCallback.addOnSlideAction(action)
+    }
+
+    fun addOnStateChangedAction(action: OnStateChangedAction) {
+        bottomSheetCallback.addOnStateChangedAction(action)
+    }
+
+    fun addNavigationListener(unit:((Int,Int,Int)->Unit)) {
+        navEvent = unit
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/nav/view/NavigationItemColor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/view/NavigationItemColor.kt b/app/src/main/java/app/mango/music/ui/nav/view/NavigationItemColor.kt
new file mode 100644
--- /dev/null	(date 1654946999287)
+++ b/app/src/main/java/app/mango/music/ui/nav/view/NavigationItemColor.kt	(date 1654946999287)
@@ -0,0 +1,22 @@
+package app.mango.music.ui.nav.view
+
+import android.content.Context
+import android.content.res.ColorStateList
+import app.mango.music.utils.themeColor
+
+object NavigationItemColor {
+    private val CHECKED_STATE_SET = intArrayOf(android.R.attr.state_checked)
+    private val DISABLED_STATE_SET = intArrayOf(-android.R.attr.state_enabled)
+    private val EMPTY_STATE_SET = intArrayOf()
+
+    fun create(color: ColorStateList, context: Context): ColorStateList {
+        val checkedColor = context.themeColor(android.R.attr.colorPrimary)
+        val defaultColor = color.defaultColor
+        val disabledColor = color.getColorForState(DISABLED_STATE_SET, defaultColor)
+        return ColorStateList(
+            arrayOf(DISABLED_STATE_SET, CHECKED_STATE_SET, EMPTY_STATE_SET),
+            intArrayOf(disabledColor, checkedColor, defaultColor)
+        )
+    }
+
+}
Index: app/src/main/java/app/mango/music/ui/nav/view/NavigationConfig.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/view/NavigationConfig.kt b/app/src/main/java/app/mango/music/ui/nav/view/NavigationConfig.kt
new file mode 100644
--- /dev/null	(date 1653635579256)
+++ b/app/src/main/java/app/mango/music/ui/nav/view/NavigationConfig.kt	(date 1653635579256)
@@ -0,0 +1,11 @@
+package app.mango.music.ui.nav.view
+
+object NavigationConfig {
+    const val ItemDateChangeBroadcast = "NAVIGATION_DATA_CHANGED"
+    const val ItemDateChangeListSize = "LIST_SIZE"
+    const val ItemDateChangeId = "NAVIGATION_ID"
+    const val ItemDateChangeId_SONG = 1
+    const val ItemDateChangeId_ALBUM = 2
+    const val ItemDateChangeId_SRTIST = 3
+    const val ItemDateChangeId_PLAY_LIST = 4
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/nav/view/ForegroundCompatView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/view/ForegroundCompatView.kt b/app/src/main/java/app/mango/music/ui/nav/view/ForegroundCompatView.kt
new file mode 100644
--- /dev/null	(date 1653635579346)
+++ b/app/src/main/java/app/mango/music/ui/nav/view/ForegroundCompatView.kt	(date 1653635579346)
@@ -0,0 +1,32 @@
+package app.mango.music.ui.nav.view
+
+import android.content.res.ColorStateList
+import android.graphics.PorterDuff
+import android.graphics.drawable.Drawable
+import androidx.annotation.RestrictTo
+
+interface ForegroundCompatView {
+    @RestrictTo(RestrictTo.Scope.LIBRARY)
+    fun getSupportForeground(): Drawable?
+
+    @RestrictTo(RestrictTo.Scope.LIBRARY)
+    fun setSupportForeground(foreground: Drawable?)
+
+    @RestrictTo(RestrictTo.Scope.LIBRARY)
+    fun getSupportForegroundGravity(): Int
+
+    @RestrictTo(RestrictTo.Scope.LIBRARY)
+    fun setSupportForegroundGravity(gravity: Int)
+
+    @RestrictTo(RestrictTo.Scope.LIBRARY)
+    fun setSupportForegroundTintList(tint: ColorStateList?)
+
+    @RestrictTo(RestrictTo.Scope.LIBRARY)
+    fun getSupportForegroundTintList(): ColorStateList?
+
+    @RestrictTo(RestrictTo.Scope.LIBRARY)
+    fun setSupportForegroundTintMode(tintMode: PorterDuff.Mode?)
+
+    @RestrictTo(RestrictTo.Scope.LIBRARY)
+    fun getSupportForegroundTintMode(): PorterDuff.Mode?
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/nav/view/CheckableForegroundLinearLayout.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/view/CheckableForegroundLinearLayout.kt b/app/src/main/java/app/mango/music/ui/nav/view/CheckableForegroundLinearLayout.kt
new file mode 100644
--- /dev/null	(date 1653635579351)
+++ b/app/src/main/java/app/mango/music/ui/nav/view/CheckableForegroundLinearLayout.kt	(date 1653635579351)
@@ -0,0 +1,50 @@
+package app.mango.music.ui.nav.view
+
+import android.annotation.SuppressLint
+import android.content.Context
+import android.util.AttributeSet
+import android.view.View
+import android.widget.Checkable
+import androidx.annotation.AttrRes
+import com.google.android.material.internal.ForegroundLinearLayout
+
+@SuppressLint("RestrictedApi")
+class CheckableForegroundLinearLayout : ForegroundLinearLayout, Checkable {
+    private var _isChecked = false
+        set(value) {
+            if (field == value) {
+                return
+            }
+            field = value
+            refreshDrawableState()
+        }
+
+    constructor(context: Context) : super(context)
+
+    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs)
+
+    constructor(context: Context, attrs: AttributeSet?, @AttrRes defStyleAttr: Int) : super(
+        context, attrs, defStyleAttr
+    )
+
+    override fun isChecked(): Boolean = _isChecked
+
+    override fun setChecked(checked: Boolean) {
+        _isChecked = checked
+    }
+
+    override fun toggle() {
+        _isChecked = !_isChecked
+    }
+
+    override fun onCreateDrawableState(extraSpace: Int): IntArray =
+        super.onCreateDrawableState(extraSpace + 1).apply {
+            if (_isChecked) {
+                View.mergeDrawableStates(this, CHECKED_STATE_SET)
+            }
+        }
+
+    companion object {
+        private val CHECKED_STATE_SET = intArrayOf(android.R.attr.state_checked)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/nav/view/NavigationView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/view/NavigationView.kt b/app/src/main/java/app/mango/music/ui/nav/view/NavigationView.kt
new file mode 100644
--- /dev/null	(date 1653635579275)
+++ b/app/src/main/java/app/mango/music/ui/nav/view/NavigationView.kt	(date 1653635579275)
@@ -0,0 +1,39 @@
+package app.mango.music.ui.nav.view
+
+import android.content.Context
+import android.util.AttributeSet
+import androidx.annotation.AttrRes
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import app.mango.music.R
+
+class NavigationView:RecyclerView {
+
+    constructor(context: Context) : super(context){ createMenu()}
+    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs){ createMenu()}
+    constructor(context: Context, attrs: AttributeSet?, @AttrRes defStyleAttr: Int) : super(
+        context, attrs, defStyleAttr){ createMenu()}
+
+    private var onItemClickListener: OnItemClickListener? = null
+
+    private fun createMenu(){
+        this.layoutManager = LinearLayoutManager(context)
+        this.adapter =  NavigationAdapter(R.menu.menu_main,context){
+            onItemClickListener?.onItemClick(it)
+        }
+    }
+
+    fun notifyItemChanged(index:Int,value:String){
+        adapter?.let{
+            (it as NavigationAdapter).notifyItemChanged(index,value)
+        }
+    }
+
+    fun setOnItemClickListener(listener: OnItemClickListener){
+        this.onItemClickListener = listener
+    }
+
+    interface OnItemClickListener{
+        fun onItemClick(item: NavigationAdapter.Items)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/nav/view/NavigationAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/nav/view/NavigationAdapter.kt b/app/src/main/java/app/mango/music/ui/nav/view/NavigationAdapter.kt
new file mode 100644
--- /dev/null	(date 1655870046704)
+++ b/app/src/main/java/app/mango/music/ui/nav/view/NavigationAdapter.kt	(date 1655870046704)
@@ -0,0 +1,166 @@
+package app.mango.music.ui.nav.view
+
+import android.annotation.SuppressLint
+import android.content.Context
+import android.content.res.ColorStateList
+import android.content.res.XmlResourceParser
+import android.graphics.Color
+import android.graphics.drawable.Drawable
+import android.graphics.drawable.InsetDrawable
+import android.graphics.drawable.RippleDrawable
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import app.mango.music.R
+import app.mango.music.databinding.NavigationDividerBinding
+import app.mango.music.databinding.NavigationItemBinding
+import app.mango.music.drawable.AutoMirrorDrawable
+import app.mango.music.utils.dpToDimensionPixelSize
+import app.mango.music.utils.getColorStateListByAttr
+import app.mango.music.utils.getColorStateListCompat
+import app.mango.music.utils.layoutInflater
+import com.google.android.material.shape.MaterialShapeDrawable
+import com.google.android.material.shape.ShapeAppearanceModel
+
+class NavigationAdapter(menuId: Int, val context: Context, private val bind: ((item: Items) -> Unit)) :
+    RecyclerView.Adapter<RecyclerView.ViewHolder>() {
+
+    private var menus: XmlResourceParser = context.resources.getLayout(menuId)
+    private val items = ArrayList<Items>()
+
+    init {
+        var type = menus.eventType
+        while (type != XmlResourceParser.END_DOCUMENT) {
+            if (type != XmlResourceParser.START_TAG) {
+                type = menus.next()
+                continue
+            }
+            if (menus.name == "item") {
+                items.add(
+                    Items(
+                    menus.getAttributeResourceValue(0, -1),
+                    menus.getAttributeResourceValue(1, -1),
+                    if(menus.attributeCount == 3) false
+                    else menus.getAttributeBooleanValue(2,false),
+                    menus.getAttributeResourceValue(if(menus.attributeCount==3) 2 else 3, -1),
+                    ViewType.ITEM
+                )
+                )
+            }
+            else if(menus.name=="group"){
+                items.add(
+                    Items(
+                        R.drawable.icon, R.id.toolbar,false,R.string.app_name,
+                        ViewType.DIVIDER
+                    )
+                )
+            }
+            type = menus.next()
+        }
+    }
+
+    enum class ViewType {
+        ITEM,
+        DIVIDER
+    }
+
+    data class Items(val icon: Int, val id: Int, val checked:Boolean, val title: Int, val viewType: ViewType, var tag: String = "")
+
+    inner class ItemHolder(val binding: NavigationItemBinding) : RecyclerView.ViewHolder(binding.root)
+    inner class DividerHolder(val binding: NavigationDividerBinding) : RecyclerView.ViewHolder(binding.root)
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder =
+        when(ViewType.values()[viewType]){
+            ViewType.ITEM -> ItemHolder(NavigationItemBinding.inflate(parent.context.layoutInflater,parent,false)).apply {
+                binding.root.background = createItemBackground(context)
+                binding.root.foregroundCompat = createItemForeground(context)
+                binding.navIcon.imageTintList = binding.navIcon.imageTintList?.let {
+                    NavigationItemColor.create(
+                        it, binding.navIcon.context
+                    )
+                }
+                binding.navTitle.setTextColor(
+                    NavigationItemColor.create(
+                        binding.navTitle.textColors, binding.navTitle.context
+                    )
+                )
+                binding.navTag.setTextColor(
+                    NavigationItemColor.create(
+                        binding.navTag.textColors, binding.navTitle.context
+                    )
+                )
+            }
+            ViewType.DIVIDER -> DividerHolder(NavigationDividerBinding.inflate(parent.context.layoutInflater,parent,false))
+        }
+
+    @SuppressLint("PrivateResource")
+    private fun createItemBackground(context: Context): Drawable =
+        createItemShapeDrawable(
+            context.getColorStateListCompat(com.google.android.material.R.color.mtrl_navigation_item_background_color), context
+        )
+
+    private fun createItemForeground(context: Context): Drawable {
+        val controlHighlightColor = context.getColorStateListByAttr(android.R.attr.colorControlHighlight)
+        val mask = createItemShapeDrawable(ColorStateList.valueOf(Color.WHITE), context)
+        return RippleDrawable(controlHighlightColor, null, mask)
+    }
+
+    private fun createItemShapeDrawable(fillColor: ColorStateList, context: Context): Drawable {
+        val materialShapeDrawable = MaterialShapeDrawable(
+            ShapeAppearanceModel.builder(
+                context, R.style.ShapeAppearance_Navigation, 0
+            ).build()
+        ).apply { this.fillColor = fillColor }
+        val rightInset = context.dpToDimensionPixelSize(8)
+        return AutoMirrorDrawable(InsetDrawable(materialShapeDrawable, 0, 0, rightInset, 0))
+    }
+
+
+    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) =
+        throw UnsupportedOperationException()
+
+    override fun onBindViewHolder(
+        holder: RecyclerView.ViewHolder,
+        position: Int,
+        payloads: MutableList<Any>
+    ) {
+        val item = items[position]
+        when (ViewType.values()[getItemViewType(position)]) {
+            ViewType.ITEM -> {
+                val binding = (holder as ItemHolder).binding
+                binding.navTag.text = item.tag
+                binding.navIcon.setImageResource(item.icon)
+                binding.navTitle.setText(item.title)
+                binding.root.setOnClickListener {
+                    bind.invoke(item)
+                    if(item.checked) {
+                        notifyItemChanged(lastPosition)
+                        lastPosition = position
+                        (binding.root as CheckableForegroundLinearLayout).isChecked = true
+                    }
+                }
+                (binding.root as CheckableForegroundLinearLayout).isChecked = lastPosition == position
+            }
+            else -> {}
+        }
+    }
+
+    companion object{
+        var lastPosition = 1
+    }
+
+    override fun getItemCount(): Int = items.size
+    override fun getItemViewType(position: Int): Int = items[position].viewType.ordinal
+
+    fun notifyItemChanged(index: Int, value: String) {
+        if (index < 0 || index > items.size - 1) return
+        items[index].tag = value
+        notifyItemChanged(index)
+    }
+
+    private var View.foregroundCompat: Drawable?
+        get() = getForeground(this)
+        set(value) {
+            setForeground(this, value)
+        }
+}
\ No newline at end of file
Index: app/src/main/res/drawable/ic_album.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_album.xml b/app/src/main/res/drawable/ic_album.xml
new file mode 100644
--- /dev/null	(date 1653622879680)
+++ b/app/src/main/res/drawable/ic_album.xml	(date 1653622879680)
@@ -0,0 +1,15 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,4c-4.41,0 -8,3.59 -8,8s3.59,8 8,8 8,-3.59 8,-8 -3.59,-8 -8,-8zM12,16.5c-2.49,0 -4.5,-2.01 -4.5,-4.5S9.51,7.5 12,7.5s4.5,2.01 4.5,4.5 -2.01,4.5 -4.5,4.5z"
+        android:strokeAlpha="0.3"
+        android:fillAlpha="0.3"/>
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM12,20c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8 8,3.59 8,8 -3.59,8 -8,8zM12,7.5c-2.49,0 -4.5,2.01 -4.5,4.5s2.01,4.5 4.5,4.5 4.5,-2.01 4.5,-4.5 -2.01,-4.5 -4.5,-4.5zM12,13c-0.55,0 -1,-0.45 -1,-1s0.45,-1 1,-1 1,0.45 1,1 -0.45,1 -1,1z"/>
+</vector>
Index: app/src/main/res/drawable/ic_play.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_play.xml b/app/src/main/res/drawable/ic_play.xml
new file mode 100644
--- /dev/null	(date 1650024202000)
+++ b/app/src/main/res/drawable/ic_play.xml	(date 1650024202000)
@@ -0,0 +1,15 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M10,8.64v6.72L15.27,12z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M8,19l11,-7L8,5v14zM10,8.64L15.27,12 10,15.36L10,8.64z"/>
+</vector>
Index: app/src/main/res/drawable/ic_keyboard.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_keyboard.xml b/app/src/main/res/drawable/ic_keyboard.xml
new file mode 100644
--- /dev/null	(date 1650023184000)
+++ b/app/src/main/res/drawable/ic_keyboard.xml	(date 1650023184000)
@@ -0,0 +1,15 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M4,17h16L20,7L4,7v10zM17,8h2v2h-2L17,8zM17,11h2v2h-2v-2zM14,8h2v2h-2L14,8zM14,11h2v2h-2v-2zM11,8h2v2h-2L11,8zM11,11h2v2h-2v-2zM8,8h2v2L8,10L8,8zM8,11h2v2L8,13v-2zM8,14h8v2L8,16v-2zM5,8h2v2L5,10L5,8zM5,11h2v2L5,13v-2z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M20,5L4,5c-1.1,0 -1.99,0.9 -1.99,2L2,17c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2L22,7c0,-1.1 -0.9,-2 -2,-2zM20,17L4,17L4,7h16v10zM11,8h2v2h-2zM11,11h2v2h-2zM8,8h2v2L8,10zM8,11h2v2L8,13zM5,11h2v2L5,13zM5,8h2v2L5,10zM8,14h8v2L8,16zM14,11h2v2h-2zM14,8h2v2h-2zM17,11h2v2h-2zM17,8h2v2h-2z"/>
+</vector>
Index: app/src/main/res/drawable/ic_close.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_close.xml b/app/src/main/res/drawable/ic_close.xml
new file mode 100644
--- /dev/null	(date 1653623605857)
+++ b/app/src/main/res/drawable/ic_close.xml	(date 1653623605857)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M19,6.41L17.59,5 12,10.59 6.41,5 5,6.41 10.59,12 5,17.59 6.41,19 12,13.41 17.59,19 19,17.59 13.41,12 19,6.41z"/>
+</vector>
Index: app/src/main/res/drawable/ic_launcher_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_launcher_background.xml b/app/src/main/res/drawable/ic_launcher_background.xml
new file mode 100644
--- /dev/null	(date 1653569773598)
+++ b/app/src/main/res/drawable/ic_launcher_background.xml	(date 1653569773598)
@@ -0,0 +1,170 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path
+        android:fillColor="#3DDC84"
+        android:pathData="M0,0h108v108h-108z" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M9,0L9,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,0L19,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,0L29,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,0L39,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,0L49,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,0L59,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,0L69,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,0L79,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M89,0L89,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M99,0L99,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,9L108,9"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,19L108,19"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,29L108,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,39L108,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,49L108,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,59L108,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,69L108,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,79L108,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,89L108,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,99L108,99"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,29L89,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,39L89,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,49L89,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,59L89,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,69L89,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,79L89,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,19L29,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,19L39,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,19L49,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,19L59,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,19L69,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,19L79,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+</vector>
Index: app/src/main/res/drawable/ic_arrow_up.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_arrow_up.xml b/app/src/main/res/drawable/ic_arrow_up.xml
new file mode 100644
--- /dev/null	(date 1653622722443)
+++ b/app/src/main/res/drawable/ic_arrow_up.xml	(date 1653622722443)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,8l-6,6 1.41,1.41L12,10.83l4.59,4.58L18,14l-6,-6z"/>
+</vector>
Index: app/src/main/res/drawable/ic_pause.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_pause.xml b/app/src/main/res/drawable/ic_pause.xml
new file mode 100644
--- /dev/null	(date 1654575464182)
+++ b/app/src/main/res/drawable/ic_pause.xml	(date 1654575464182)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M15,19Q14.175,19 13.588,18.413Q13,17.825 13,17V7Q13,6.175 13.588,5.588Q14.175,5 15,5H17Q17.825,5 18.413,5.588Q19,6.175 19,7V17Q19,17.825 18.413,18.413Q17.825,19 17,19ZM7,19Q6.175,19 5.588,18.413Q5,17.825 5,17V7Q5,6.175 5.588,5.588Q6.175,5 7,5H9Q9.825,5 10.413,5.588Q11,6.175 11,7V17Q11,17.825 10.413,18.413Q9.825,19 9,19ZM15,17H17V7H15ZM7,17H9V7H7ZM7,7V17ZM15,7V17Z"/>
+</vector>
Index: app/src/main/java/app/mango/music/views/lrcview/LrcViewKt.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/lrcview/LrcViewKt.kt b/app/src/main/java/app/mango/music/views/lrcview/LrcViewKt.kt
new file mode 100644
--- /dev/null	(date 1655011847614)
+++ b/app/src/main/java/app/mango/music/views/lrcview/LrcViewKt.kt	(date 1655011847614)
@@ -0,0 +1,477 @@
+package app.mango.music.views.lrcview
+
+import android.animation.ValueAnimator
+import android.annotation.SuppressLint
+import android.content.Context
+import android.content.res.TypedArray
+import android.graphics.Canvas
+import android.graphics.Color
+import android.graphics.Paint
+import android.graphics.drawable.Drawable
+import android.text.Layout
+import android.text.StaticLayout
+import android.text.TextPaint
+import android.text.TextUtils
+import android.text.format.DateUtils
+import android.util.AttributeSet
+import android.util.Log
+import android.util.TypedValue
+import android.view.GestureDetector
+import android.view.GestureDetector.SimpleOnGestureListener
+import android.view.MotionEvent
+import android.view.View
+import android.view.animation.LinearInterpolator
+import android.widget.Scroller
+import androidx.annotation.AttrRes
+import androidx.annotation.ColorRes
+import androidx.annotation.DimenRes
+import androidx.annotation.StyleableRes
+import androidx.media3.common.MediaItem
+import app.mango.music.App
+import app.mango.music.R
+import app.mango.music.views.lrcview.LrcEntryKt.Companion.formatTime
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import java.util.*
+import kotlin.coroutines.CoroutineContext
+import kotlin.math.abs
+import kotlin.math.max
+import kotlin.math.min
+
+/**
+ * 根据 https://gitee.com/xinzhongxingit_admin/lrcview_lyrics_highlight_lines 修改
+ * 增加协程支持，优化代码
+ */
+class LrcViewKt @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+) : View(context, attrs, defStyleAttr), CoroutineScope {
+
+    override val coroutineContext: CoroutineContext = Dispatchers.IO
+
+    companion object {
+        private const val ADJUST_DURATION: Long = 100
+        private const val TIMELINE_KEEP_TIME = 4 * DateUtils.SECOND_IN_MILLIS
+        private const val LRC_ANIMATION_DURATION = 1000
+    }
+
+    private val lrcEntryList = ArrayList<LrcEntryKt>()
+    private val lrcPaint = TextPaint().apply {
+        isAntiAlias = true
+        textAlign = Paint.Align.LEFT
+    }
+    private val timePaint = TextPaint().apply {
+        isAntiAlias = true
+        textAlign = Paint.Align.CENTER
+        strokeCap = Paint.Cap.ROUND
+    }
+    private val timeFontMetrics: Paint.FontMetrics = timePaint.fontMetrics
+
+    private lateinit var playDrawable: Drawable
+    private var mDividerHeight = 0f
+    private var mAnimationDuration: Long = 0
+    private var mNormalTextColor = 0
+    private var mCurrentTextColor = 0
+    private var mTimelineTextColor = 0
+    private var mTimelineColor = 0
+    private var mTimeTextColor = 0
+    private var drawableWidth = 0
+    private var timeTextWidth = 0
+    private var mDefaultLabel: String? = null
+    private var mLrcPadding = 0f
+    private var onPlayClickListener: ((Long) -> Boolean)? = null
+    private var mAnimator: ValueAnimator? = null
+    private val mScroller = Scroller(context)
+    private var mOffset = 0f
+    private var mCurrentLine = 0
+    private var flag: Any? = null
+    private var isShowTimeline = false
+    private var isTouching = false
+    private var isFling = false
+    private var textGravity = 0
+
+    private val mSimpleOnGestureListener: SimpleOnGestureListener =
+        object : SimpleOnGestureListener() {
+            override fun onDown(e: MotionEvent): Boolean {
+                if (hasLrc() && onPlayClickListener != null) {
+                    mScroller.forceFinished(true)
+                    removeCallbacks(hideTimelineRunnable)
+                    isTouching = true
+                    isShowTimeline = true
+                    invalidate()
+                    return true
+                }
+                return super.onDown(e)
+            }
+
+            override fun onScroll(
+                e1: MotionEvent, e2: MotionEvent,
+                distanceX: Float, distanceY: Float
+            ): Boolean {
+                if (hasLrc()) {
+                    mOffset += -distanceY
+                    mOffset = min(mOffset, getOffset(0))
+                    mOffset = max(mOffset, getOffset(lrcEntryList.size - 1))
+                    invalidate()
+                    return true
+                }
+                return super.onScroll(e1, e2, distanceX, distanceY)
+            }
+
+            override fun onFling(
+                e1: MotionEvent, e2: MotionEvent,
+                velocityX: Float, velocityY: Float
+            ): Boolean {
+                if (hasLrc()) {
+                    mScroller.fling(
+                        0, mOffset.toInt(),
+                        0, velocityY.toInt(), 0,
+                        0, getOffset(lrcEntryList.size - 1).toInt(),
+                        getOffset(0).toInt()
+                    )
+                    isFling = true
+                    return true
+                }
+                return super.onFling(e1, e2, velocityX, velocityY)
+            }
+
+            override fun onSingleTapConfirmed(e: MotionEvent): Boolean {
+                if (hasLrc() && isShowTimeline && playDrawable.bounds.contains(
+                        e.x.toInt(),
+                        e.y.toInt()
+                    )
+                ) {
+                    val centerLine: Int = getCenterLine()
+                    val centerLineTime = lrcEntryList[centerLine].time
+                    // onPlayClick 消费了才更新 UI
+                    onPlayClickListener?.let {
+                        if (it.invoke(centerLineTime)) {
+                            isShowTimeline = false
+                            removeCallbacks(hideTimelineRunnable)
+                            mCurrentLine = centerLine
+                            invalidate()
+                            return true
+                        }
+                    }
+                }
+                return super.onSingleTapConfirmed(e)
+            }
+        }
+
+    private val mGestureDetector = GestureDetector(context, mSimpleOnGestureListener).apply {
+        setIsLongpressEnabled(false)
+    }
+
+    init {
+        val ta = context.obtainStyledAttributes(attrs, R.styleable.LrcViewKt)
+        lrcPaint.textSize = ta.getDimensions(R.styleable.LrcViewKt_lrcTextSize, R.dimen.lrc_text_size)
+        mDividerHeight = ta.getDimensions(R.styleable.LrcViewKt_lrcDividerHeight, R.dimen.lrc_divider_height)
+        mNormalTextColor = ta.getColors(R.styleable.LrcViewKt_lrcNormalTextColor, R.color.lrc_normal_text_color)
+        mCurrentTextColor = ta.getColors(R.styleable.LrcViewKt_lrcCurrentTextColor, R.color.lrc_current_text_color)
+        mTimelineTextColor = ta.getColors(R.styleable.LrcViewKt_lrcTimelineTextColor, R.color.lrc_timeline_text_color)
+        mTimelineColor = ta.getColors(R.styleable.LrcViewKt_lrcTimelineColor, R.color.lrc_timeline_color)
+        timePaint.strokeWidth = ta.getDimensions(R.styleable.LrcViewKt_lrcTimelineHeight, R.dimen.lrc_timeline_height)
+        mTimeTextColor = ta.getColors(R.styleable.LrcViewKt_lrcTimeTextColor, R.color.lrc_time_text_color)
+        timePaint.textSize = ta.getDimensions(R.styleable.LrcViewKt_lrcTimeTextSize, R.dimen.lrc_time_text_size)
+        mAnimationDuration = ta.getInt(R.styleable.LrcViewKt_lrcAnimationDuration, LRC_ANIMATION_DURATION).toLong()
+        mAnimationDuration = if (mAnimationDuration < 0) LRC_ANIMATION_DURATION.toLong() else mAnimationDuration
+        val label = ta.getString(R.styleable.LrcViewKt_lrcLabel)
+        mDefaultLabel = if (TextUtils.isEmpty(label)) context.getString(R.string.lrc_label) else label
+        mLrcPadding = ta.getDimension(R.styleable.LrcViewKt_lrcPadding, 0f)
+        val play = ta.getDrawable(R.styleable.LrcViewKt_lrcPlayDrawable)
+        playDrawable = play ?: resources.getDrawable(R.drawable.ic_play, resources.newTheme()).apply {
+                setTint(colorControlNormal())
+            }
+        textGravity = ta.getInteger(R.styleable.LrcViewKt_lrcTextGravity, LrcEntryKt.GRAVITY_CENTER)
+        ta.recycle()
+        drawableWidth = getDimension(R.dimen.lrc_drawable_width)
+        timeTextWidth = getDimension(R.dimen.lrc_time_width)
+
+    }
+
+    private fun colorControlNormal(): Int =
+        getColorForAttrId(androidx.appcompat.R.attr.colorControlNormal)
+
+    private fun getColorForAttrId(@AttrRes resId: Int): Int {
+        val typedValue = TypedValue()
+        val a = context.obtainStyledAttributes(typedValue.data, intArrayOf(resId))
+        val color = a.getColor(0, Color.BLUE)
+        a.recycle()
+        return color
+    }
+
+    private fun TypedArray.getColors(@StyleableRes attrId: Int, @ColorRes defColorId: Int) =
+        this.getColor(attrId, resources.getColor(defColorId, resources.newTheme()))
+
+    private fun TypedArray.getDimensions(@StyleableRes attrId: Int, @DimenRes defDimId: Int) =
+        this.getDimension(attrId, resources.getDimension(defDimId))
+
+    private fun getDimension(@DimenRes dimId: Int) = resources.getDimension(dimId).toInt()
+
+    fun setOnPlayClickListener(unit: ((Long) -> Boolean)) {
+        onPlayClickListener = unit
+    }
+
+    fun loadLrc(mediaItem: MediaItem){
+        launch(Dispatchers.IO) {
+            (context.applicationContext as App).apply {
+                lyricsFetcher.fetch(mediaItem).run {
+                    loadLrc(this.first)
+                }
+            }
+        }
+    }
+
+    private fun loadLrc(lrcText: String) {
+        launch(Dispatchers.Main) {
+            reset()
+            flag = lrcText
+            onLrcLoaded(LrcEntryKt.parseLrc(lrcText))
+            flag = null
+        }
+    }
+
+    /**
+     * 歌词是否有效
+     */
+    fun hasLrc(): Boolean = lrcEntryList.isNotEmpty()
+
+    /**
+     * 刷新歌词
+     * @param time 当前播放时间
+     */
+    fun updateTime(time: Long) {
+        launch(Dispatchers.Main) {
+            if (hasLrc()) {
+                findShowLine(time).notEqual(mCurrentLine) {
+                    mCurrentLine = it
+                    if (!isShowTimeline) scrollTo(it)
+                    else invalidate()
+                }
+            }
+        }
+    }
+
+    private inline fun Int.notEqual(value: Int, unit: ((Int) -> Unit)) {
+        if (this != value) unit.invoke(this)
+    }
+
+    /**
+     * 画一行歌词
+     * @param y 歌词中心 Y 坐标
+     */
+    private fun StaticLayout.drawText(canvas: Canvas, y: Float) {
+        canvas.save()
+        canvas.translate(mLrcPadding, y - this.height / 2)
+        this.draw(canvas)
+        canvas.restore()
+    }
+
+    override fun onLayout(changed: Boolean, left: Int, top: Int, right: Int, bottom: Int) {
+        super.onLayout(changed, left, top, right, bottom)
+        if (changed) {
+            initEntryList()
+            val l = (timeTextWidth - drawableWidth) / 2
+            val t = height / 2 - drawableWidth / 2
+            playDrawable.setBounds(l, t, l + drawableWidth, t + drawableWidth)
+        }
+    }
+
+    override fun onDraw(canvas: Canvas) {
+        super.onDraw(canvas)
+        val centerY = height / 2
+
+        if (!hasLrc()) {
+            lrcPaint.color = mCurrentTextColor
+            val label = mDefaultLabel.toString()
+            StaticLayout.Builder.obtain(
+                label, 0, label.length,
+                lrcPaint, getLrcWidth().toInt()
+            ).setAlignment(Layout.Alignment.ALIGN_CENTER)
+                .setLineSpacing(1f, 0f)
+                .build()
+                .drawText(canvas, centerY.toFloat())
+            return
+        }
+        val centerLine = getCenterLine()
+        if (isShowTimeline) {
+            playDrawable.draw(canvas)
+            timePaint.color = mTimelineColor
+            canvas.drawLine(
+                timeTextWidth.toFloat(), centerY.toFloat(),
+                (width - timeTextWidth).toFloat(),
+                centerY.toFloat(), timePaint
+            )
+            timePaint.color = mTimeTextColor
+            val timeText = formatTime(lrcEntryList[centerLine].time)
+            val timeX = (width - timeTextWidth / 2).toFloat()
+            val timeY = centerY - (timeFontMetrics.descent + timeFontMetrics.ascent) / 2
+            canvas.drawText(timeText, timeX, timeY, timePaint)
+        }
+        canvas.translate(0f, mOffset)
+        var y = 0f
+        for (i in lrcEntryList.indices) {
+            if (i > 0) {
+                y += (lrcEntryList[i - 1].height() + lrcEntryList[i].height()) / 2 + mDividerHeight
+            }
+            when {
+                i == mCurrentLine -> lrcPaint.color = mCurrentTextColor
+                (isShowTimeline && i == centerLine) -> lrcPaint.color = mTimelineTextColor
+                else -> lrcPaint.color = mNormalTextColor
+            }
+            lrcEntryList[i].isInitialized {
+                it.drawText(canvas, y)
+            }
+        }
+    }
+
+    @SuppressLint("ClickableViewAccessibility")
+    override fun onTouchEvent(event: MotionEvent): Boolean {
+        if (event.action == MotionEvent.ACTION_UP || event.action == MotionEvent.ACTION_CANCEL) {
+            isTouching = false
+            if (hasLrc() && !isFling) {
+                adjustCenter()
+                postDelayed(hideTimelineRunnable, TIMELINE_KEEP_TIME)
+            }
+        }
+        return mGestureDetector.onTouchEvent(event)
+    }
+
+    private val hideTimelineRunnable = Runnable {
+        if (hasLrc() && isShowTimeline) {
+            isShowTimeline = false
+            scrollTo(mCurrentLine)
+        }
+    }
+
+    override fun computeScroll() {
+        if (mScroller.computeScrollOffset()) {
+            mOffset = mScroller.currY.toFloat()
+            invalidate()
+        }
+        if (isFling && mScroller.isFinished) {
+            isFling = false
+            if (hasLrc() && !isTouching) {
+                adjustCenter()
+                postDelayed(hideTimelineRunnable, TIMELINE_KEEP_TIME)
+            }
+        }
+    }
+
+    override fun onDetachedFromWindow() {
+        removeCallbacks(hideTimelineRunnable)
+        super.onDetachedFromWindow()
+    }
+
+    private val TAG = "LrcViewKt"
+    private fun onLrcLoaded(entryList: List<LrcEntryKt>) {
+        if (entryList.isNotEmpty()) {
+            lrcEntryList.addAll(entryList)
+        }
+        initEntryList()
+        invalidate()
+    }
+
+    private fun initEntryList() {
+        if (!hasLrc() || width == 0) {
+            return
+        }
+        lrcEntryList.sort()
+        for (lrcEntry in lrcEntryList) {
+            lrcEntry.init(lrcPaint, getLrcWidth().toInt(), textGravity)
+        }
+        mOffset = (height / 2).toFloat()
+    }
+
+    private fun reset() {
+        endAnimation()
+        mScroller.forceFinished(true)
+        isShowTimeline = false
+        isTouching = false
+        isFling = false
+        removeCallbacks(hideTimelineRunnable)
+        lrcEntryList.clear()
+        mOffset = 0f
+        mCurrentLine = 0
+        invalidate()
+    }
+
+    /**
+     * 滚动到某一行
+     */
+    private fun scrollTo(line: Int) = scrollTo(line, mAnimationDuration)
+
+    /**
+     * 将中心行微调至正中心
+     */
+    private fun adjustCenter() = scrollTo(getCenterLine(), ADJUST_DURATION)
+
+    private fun scrollTo(line: Int, dur: Long) {
+        val offset: Float = getOffset(line)
+        endAnimation()
+        mAnimator = ValueAnimator.ofFloat(mOffset, offset)
+        mAnimator?.run {
+            duration = dur
+            interpolator = LinearInterpolator()
+            addUpdateListener { animation ->
+                mOffset = animation.animatedValue as Float
+                invalidate()
+            }
+            start()
+        }
+    }
+
+    private fun endAnimation() {
+        mAnimator?.run {
+            if (isRunning) end()
+        }
+    }
+
+    /**
+     * 二分法查找当前时间应该显示的行数（最后一个 <= time 的行数）
+     */
+    private fun findShowLine(time: Long): Int {
+        var left = 0
+        var right = lrcEntryList.size
+        while (left <= right) {
+            val middle = (left + right) / 2
+            val middleTime = lrcEntryList[middle].time
+            if (time < middleTime) {
+                right = middle - 1
+            } else {
+                if (middle + 1 >= lrcEntryList.size || time < lrcEntryList[middle + 1].time) {
+                    return middle
+                }
+                left = middle + 1
+            }
+        }
+        return 0
+    }
+
+    private fun getCenterLine(): Int {
+        var centerLine = 0
+        var minDistance = Float.MAX_VALUE
+        for (i in lrcEntryList.indices) {
+            if (abs(mOffset - getOffset(i)) < minDistance) {
+                minDistance = abs(mOffset - getOffset(i))
+                centerLine = i
+            }
+        }
+        return centerLine
+    }
+
+    private fun getOffset(line: Int): Float {
+        if (lrcEntryList[line].offset == Float.MIN_VALUE) {
+            var offset = (height / 2).toFloat()
+            for (i in 1..line) {
+                offset -= (lrcEntryList[i - 1].height() + lrcEntryList[i].height()) / 2 + mDividerHeight
+            }
+            lrcEntryList[line].offset = offset
+        }
+        return lrcEntryList[line].offset
+    }
+
+    private fun getLrcWidth(): Float = width - mLrcPadding * 2
+}
\ No newline at end of file
Index: app/src/main/res/drawable/ic_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_settings.xml b/app/src/main/res/drawable/ic_settings.xml
new file mode 100644
--- /dev/null	(date 1653622663296)
+++ b/app/src/main/res/drawable/ic_settings.xml	(date 1653622663296)
@@ -0,0 +1,15 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M19.28,8.6l-0.7,-1.21 -1.27,0.51 -1.06,0.43 -0.91,-0.7c-0.39,-0.3 -0.8,-0.54 -1.23,-0.71l-1.06,-0.43 -0.16,-1.13L12.7,4h-1.4l-0.19,1.35 -0.16,1.13 -1.06,0.44c-0.41,0.17 -0.82,0.41 -1.25,0.73l-0.9,0.68 -1.05,-0.42 -1.27,-0.52 -0.7,1.21 1.08,0.84 0.89,0.7 -0.14,1.13c-0.03,0.3 -0.05,0.53 -0.05,0.73s0.02,0.43 0.05,0.73l0.14,1.13 -0.89,0.7 -1.08,0.84 0.7,1.21 1.27,-0.51 1.06,-0.43 0.91,0.7c0.39,0.3 0.8,0.54 1.23,0.71l1.06,0.43 0.16,1.13 0.19,1.36h1.39l0.19,-1.35 0.16,-1.13 1.06,-0.43c0.41,-0.17 0.82,-0.41 1.25,-0.73l0.9,-0.68 1.04,0.42 1.27,0.51 0.7,-1.21 -1.08,-0.84 -0.89,-0.7 0.14,-1.13c0.04,-0.31 0.05,-0.52 0.05,-0.73 0,-0.21 -0.02,-0.43 -0.05,-0.73l-0.14,-1.13 0.89,-0.7 1.1,-0.84zM12,16c-2.21,0 -4,-1.79 -4,-4s1.79,-4 4,-4 4,1.79 4,4 -1.79,4 -4,4z"
+        android:strokeAlpha="0.3"
+        android:fillAlpha="0.3"/>
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M19.43,12.98c0.04,-0.32 0.07,-0.64 0.07,-0.98 0,-0.34 -0.03,-0.66 -0.07,-0.98l2.11,-1.65c0.19,-0.15 0.24,-0.42 0.12,-0.64l-2,-3.46c-0.09,-0.16 -0.26,-0.25 -0.44,-0.25 -0.06,0 -0.12,0.01 -0.17,0.03l-2.49,1c-0.52,-0.4 -1.08,-0.73 -1.69,-0.98l-0.38,-2.65C14.46,2.18 14.25,2 14,2h-4c-0.25,0 -0.46,0.18 -0.49,0.42l-0.38,2.65c-0.61,0.25 -1.17,0.59 -1.69,0.98l-2.49,-1c-0.06,-0.02 -0.12,-0.03 -0.18,-0.03 -0.17,0 -0.34,0.09 -0.43,0.25l-2,3.46c-0.13,0.22 -0.07,0.49 0.12,0.64l2.11,1.65c-0.04,0.32 -0.07,0.65 -0.07,0.98s0.03,0.66 0.07,0.98l-2.11,1.65c-0.19,0.15 -0.24,0.42 -0.12,0.64l2,3.46c0.09,0.16 0.26,0.25 0.44,0.25 0.06,0 0.12,-0.01 0.17,-0.03l2.49,-1c0.52,0.4 1.08,0.73 1.69,0.98l0.38,2.65c0.03,0.24 0.24,0.42 0.49,0.42h4c0.25,0 0.46,-0.18 0.49,-0.42l0.38,-2.65c0.61,-0.25 1.17,-0.59 1.69,-0.98l2.49,1c0.06,0.02 0.12,0.03 0.18,0.03 0.17,0 0.34,-0.09 0.43,-0.25l2,-3.46c0.12,-0.22 0.07,-0.49 -0.12,-0.64l-2.11,-1.65zM17.45,11.27c0.04,0.31 0.05,0.52 0.05,0.73 0,0.21 -0.02,0.43 -0.05,0.73l-0.14,1.13 0.89,0.7 1.08,0.84 -0.7,1.21 -1.27,-0.51 -1.04,-0.42 -0.9,0.68c-0.43,0.32 -0.84,0.56 -1.25,0.73l-1.06,0.43 -0.16,1.13 -0.2,1.35h-1.4l-0.19,-1.35 -0.16,-1.13 -1.06,-0.43c-0.43,-0.18 -0.83,-0.41 -1.23,-0.71l-0.91,-0.7 -1.06,0.43 -1.27,0.51 -0.7,-1.21 1.08,-0.84 0.89,-0.7 -0.14,-1.13c-0.03,-0.31 -0.05,-0.54 -0.05,-0.74s0.02,-0.43 0.05,-0.73l0.14,-1.13 -0.89,-0.7 -1.08,-0.84 0.7,-1.21 1.27,0.51 1.04,0.42 0.9,-0.68c0.43,-0.32 0.84,-0.56 1.25,-0.73l1.06,-0.43 0.16,-1.13 0.2,-1.35h1.39l0.19,1.35 0.16,1.13 1.06,0.43c0.43,0.18 0.83,0.41 1.23,0.71l0.91,0.7 1.06,-0.43 1.27,-0.51 0.7,1.21 -1.07,0.85 -0.89,0.7 0.14,1.13zM12,8c-2.21,0 -4,1.79 -4,4s1.79,4 4,4 4,-1.79 4,-4 -1.79,-4 -4,-4zM12,14c-1.1,0 -2,-0.9 -2,-2s0.9,-2 2,-2 2,0.9 2,2 -0.9,2 -2,2z"/>
+</vector>
Index: app/src/main/res/drawable/ic_arrow_back.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_arrow_back.xml b/app/src/main/res/drawable/ic_arrow_back.xml
new file mode 100644
--- /dev/null	(date 1653571521140)
+++ b/app/src/main/res/drawable/ic_arrow_back.xml	(date 1653571521140)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z"/>
+</vector>
Index: app/src/main/res/drawable/ic_skip_previous.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_skip_previous.xml b/app/src/main/res/drawable/ic_skip_previous.xml
new file mode 100644
--- /dev/null	(date 1640867470198)
+++ b/app/src/main/res/drawable/ic_skip_previous.xml	(date 1640867470198)
@@ -0,0 +1,12 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:pathData="M6,6H8V18H6M9.5,12L18,18V6M16,14.14L12.97,12L16,9.86V14.14Z"
+      android:strokeLineJoin="round"
+      android:strokeWidth="0.2"
+      android:fillColor="#000000"/>
+</vector>
Index: app/src/main/res/drawable/ic_sync.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_sync.xml b/app/src/main/res/drawable/ic_sync.xml
new file mode 100644
--- /dev/null	(date 1650024612000)
+++ b/app/src/main/res/drawable/ic_sync.xml	(date 1650024612000)
@@ -0,0 +1,21 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M20,5H4v11h16V5zM15.47,15.03l-2.09,-2.09c-1.35,0.87 -3.17,0.71 -4.36,-0.47c-1.37,-1.37 -1.37,-3.58 0,-4.95s3.58,-1.37 4.95,0c1.18,1.18 1.34,3 0.47,4.36l2.09,2.09L15.47,15.03z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M4,18h16c1.1,0 1.99,-0.9 1.99,-2L22,5c0,-1.1 -0.9,-2 -2,-2H4C2.9,3 2,3.9 2,5v11C2,17.1 2.9,18 4,18zM4,5h16v11H4V5z"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M1,19h22v2h-22z"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M13.97,7.53c-1.37,-1.37 -3.58,-1.37 -4.95,0s-1.37,3.58 0,4.95c1.18,1.18 3,1.34 4.36,0.47l2.09,2.09l1.06,-1.06l-2.09,-2.09C15.31,10.53 15.16,8.71 13.97,7.53zM12.91,11.41c-0.78,0.78 -2.05,0.78 -2.83,0c-0.78,-0.78 -0.78,-2.05 0,-2.83s2.05,-0.78 2.83,0C13.69,9.37 13.69,10.63 12.91,11.41z"/>
+</vector>
Index: app/src/main/res/drawable/ic_style.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_style.xml b/app/src/main/res/drawable/ic_style.xml
new file mode 100644
--- /dev/null	(date 1650023260000)
+++ b/app/src/main/res/drawable/ic_style.xml	(date 1650023260000)
@@ -0,0 +1,21 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M15.22,4.75L7.87,7.79l4.96,11.96 7.35,-3.05 -4.96,-11.95zM11,10c-0.55,0 -1,-0.45 -1,-1s0.45,-1 1,-1 1,0.45 1,1 -0.45,1 -1,1z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M3.87,11.18l-2.43,5.86c-0.41,1.02 0.08,2.19 1.09,2.61l1.34,0.56v-9.03zM22.03,15.95L17.07,3.98c-0.31,-0.75 -1.04,-1.21 -1.81,-1.23 -0.26,0 -0.53,0.04 -0.79,0.15L7.1,5.95c-0.75,0.31 -1.21,1.03 -1.23,1.8 -0.01,0.27 0.04,0.54 0.15,0.8l4.96,11.97c0.31,0.76 1.05,1.22 1.83,1.23 0.26,0 0.52,-0.05 0.77,-0.15l7.36,-3.05c1.02,-0.42 1.51,-1.59 1.09,-2.6zM12.83,19.75L7.87,7.79l7.35,-3.04h0.01l4.95,11.95 -7.35,3.05z"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M11,9m-1,0a1,1 0,1 1,2 0a1,1 0,1 1,-2 0"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M9.33,21.75l-3.45,-8.34v6.34c0,1.1 0.9,2 2,2h1.45z"/>
+</vector>
Index: app/src/main/res/drawable/ic_search.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_search.xml b/app/src/main/res/drawable/ic_search.xml
new file mode 100644
--- /dev/null	(date 1653622641354)
+++ b/app/src/main/res/drawable/ic_search.xml	(date 1653622641354)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M15.5,14h-0.79l-0.28,-0.27C15.41,12.59 16,11.11 16,9.5 16,5.91 13.09,3 9.5,3S3,5.91 3,9.5 5.91,16 9.5,16c1.61,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14z"/>
+</vector>
Index: app/src/main/res/drawable/ic_library_music.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_library_music.xml b/app/src/main/res/drawable/ic_library_music.xml
new file mode 100644
--- /dev/null	(date 1653623440616)
+++ b/app/src/main/res/drawable/ic_library_music.xml	(date 1653623440616)
@@ -0,0 +1,15 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M8,16h12L20,4L8,4v12zM12.5,10c0.57,0 1.08,0.19 1.5,0.51L14,5h4v2h-3v5.5c0,1.38 -1.12,2.5 -2.5,2.5S10,13.88 10,12.5s1.12,-2.5 2.5,-2.5z"
+        android:strokeAlpha="0.3"
+        android:fillAlpha="0.3"/>
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M20,2L8,2c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2L22,4c0,-1.1 -0.9,-2 -2,-2zM20,16L8,16L8,4h12v12zM12.5,15c1.38,0 2.5,-1.12 2.5,-2.5L15,7h3L18,5h-4v5.51c-0.42,-0.32 -0.93,-0.51 -1.5,-0.51 -1.38,0 -2.5,1.12 -2.5,2.5s1.12,2.5 2.5,2.5zM2,6v14c0,1.1 0.9,2 2,2h14v-2L4,20L4,6L2,6z"/>
+</vector>
Index: app/src/main/res/drawable/icon.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/icon.xml b/app/src/main/res/drawable/icon.xml
new file mode 100644
--- /dev/null	(date 1623830736819)
+++ b/app/src/main/res/drawable/icon.xml	(date 1623830736819)
@@ -0,0 +1,15 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="100dp"
+    android:height="100dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108"
+    android:tint="?colorPrimary">
+    <group android:scaleX="2.61"
+        android:scaleY="2.61"
+        android:translateX="22.68"
+        android:translateY="22.68">
+        <path
+            android:fillColor="@android:color/white"
+            android:pathData="M12,3v10.55c-0.59,-0.34 -1.27,-0.55 -2,-0.55 -2.21,0 -4,1.79 -4,4s1.79,4 4,4 4,-1.79 4,-4V7h4V3h-6z"/>
+    </group>
+</vector>
Index: app/src/main/res/drawable/ic_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_menu.xml b/app/src/main/res/drawable/ic_menu.xml
new file mode 100644
--- /dev/null	(date 1653623560490)
+++ b/app/src/main/res/drawable/ic_menu.xml	(date 1653623560490)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M3,18h18v-2L3,16v2zM3,13h18v-2L3,11v2zM3,6v2h18L21,6L3,6z"/>
+</vector>
Index: app/src/main/res/drawable/ic_grid_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_grid_view.xml b/app/src/main/res/drawable/ic_grid_view.xml
new file mode 100644
--- /dev/null	(date 1650024654000)
+++ b/app/src/main/res/drawable/ic_grid_view.xml	(date 1650024654000)
@@ -0,0 +1,39 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M5,5h4v4h-4z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M5,15h4v4h-4z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M15,15h4v4h-4z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M15,5h4v4h-4z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M3,21h8v-8H3V21zM5,15h4v4H5V15z"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M3,11h8V3H3V11zM5,5h4v4H5V5z"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M13,21h8v-8h-8V21zM15,15h4v4h-4V15z"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M13,3v8h8V3H13zM19,9h-4V5h4V9z"/>
+</vector>
Index: app/src/main/res/drawable/ic_account.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_account.xml b/app/src/main/res/drawable/ic_account.xml
new file mode 100644
--- /dev/null	(date 1653622897298)
+++ b/app/src/main/res/drawable/ic_account.xml	(date 1653622897298)
@@ -0,0 +1,18 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,4c-4.42,0 -8,3.58 -8,8c0,1.95 0.7,3.73 1.86,5.12C7.55,15.8 9.68,15 12,15s4.45,0.8 6.14,2.12C19.3,15.73 20,13.95 20,12C20,7.58 16.42,4 12,4zM12,13c-1.93,0 -3.5,-1.57 -3.5,-3.5C8.5,7.57 10.07,6 12,6s3.5,1.57 3.5,3.5C15.5,11.43 13.93,13 12,13z"
+        android:strokeAlpha="0.3"
+        android:fillAlpha="0.3"/>
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,2C6.48,2 2,6.48 2,12c0,5.52 4.48,10 10,10s10,-4.48 10,-10C22,6.48 17.52,2 12,2zM12,20c-1.74,0 -3.34,-0.56 -4.65,-1.5C8.66,17.56 10.26,17 12,17s3.34,0.56 4.65,1.5C15.34,19.44 13.74,20 12,20zM18.14,17.12C16.45,15.8 14.32,15 12,15s-4.45,0.8 -6.14,2.12C4.7,15.73 4,13.95 4,12c0,-4.42 3.58,-8 8,-8s8,3.58 8,8C20,13.95 19.3,15.73 18.14,17.12z"/>
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,5.93c-1.93,0 -3.5,1.57 -3.5,3.5c0,1.93 1.57,3.5 3.5,3.5s3.5,-1.57 3.5,-3.5C15.5,7.5 13.93,5.93 12,5.93zM12,10.93c-0.83,0 -1.5,-0.67 -1.5,-1.5s0.67,-1.5 1.5,-1.5s1.5,0.67 1.5,1.5S12.83,10.93 12,10.93z"/>
+</vector>
Index: app/src/main/res/drawable/ic_favorite.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_favorite.xml b/app/src/main/res/drawable/ic_favorite.xml
new file mode 100644
--- /dev/null	(date 1653979962917)
+++ b/app/src/main/res/drawable/ic_favorite.xml	(date 1653979962917)
@@ -0,0 +1,16 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tintMode="multiply"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M16.5,5c-1.54,0 -3.04,0.99 -3.56,2.36h-1.87C10.54,5.99 9.04,5 7.5,5 5.5,5 4,6.5 4,8.5c0,2.89 3.14,5.74 7.9,10.05l0.1,0.1 0.1,-0.1C16.86,14.24 20,11.39 20,8.5c0,-2 -1.5,-3.5 -3.5,-3.5z"
+        android:strokeAlpha="0.3"
+        android:fillAlpha="0.3"/>
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M16.5,3c-1.74,0 -3.41,0.81 -4.5,2.09C10.91,3.81 9.24,3 7.5,3 4.42,3 2,5.42 2,8.5c0,3.78 3.4,6.86 8.55,11.54L12,21.35l1.45,-1.32C18.6,15.36 22,12.28 22,8.5 22,5.42 19.58,3 16.5,3zM12.1,18.55l-0.1,0.1 -0.1,-0.1C7.14,14.24 4,11.39 4,8.5 4,6.5 5.5,5 7.5,5c1.54,0 3.04,0.99 3.57,2.36h1.87C13.46,5.99 14.96,5 16.5,5c2,0 3.5,1.5 3.5,3.5 0,2.89 -3.14,5.74 -7.9,10.05z"/>
+</vector>
Index: app/src/main/res/drawable/ic_delete.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_delete.xml b/app/src/main/res/drawable/ic_delete.xml
new file mode 100644
--- /dev/null	(date 1653754099248)
+++ b/app/src/main/res/drawable/ic_delete.xml	(date 1653754099248)
@@ -0,0 +1,15 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="#FFFFFFFF"
+      android:pathData="M8,9h8v10H8z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="#FFFFFFFF"
+      android:pathData="M15.5,4l-1,-1h-5l-1,1H5v2h14V4zM6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM8,9h8v10H8V9z"/>
+</vector>
Index: app/src/main/res/drawable/ic_sort.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_sort.xml b/app/src/main/res/drawable/ic_sort.xml
new file mode 100644
--- /dev/null	(date 1650024324000)
+++ b/app/src/main/res/drawable/ic_sort.xml	(date 1650024324000)
@@ -0,0 +1,11 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal"
+    android:autoMirrored="true">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M3,18h6v-2L3,16v2zM3,6v2h18L21,6L3,6zM3,13h12v-2L3,11v2z"/>
+</vector>
Index: app/src/main/java/app/mango/music/views/lrcview/LrcEntryKt.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/lrcview/LrcEntryKt.kt b/app/src/main/java/app/mango/music/views/lrcview/LrcEntryKt.kt
new file mode 100644
--- /dev/null	(date 1654913447688)
+++ b/app/src/main/java/app/mango/music/views/lrcview/LrcEntryKt.kt	(date 1654913447688)
@@ -0,0 +1,95 @@
+package app.mango.music.views.lrcview
+
+import android.text.Layout
+import android.text.StaticLayout
+import android.text.TextPaint
+import android.text.TextUtils
+import android.text.format.DateUtils
+import java.util.*
+import java.util.regex.Pattern
+
+data class LrcEntryKt(val time:Long,val text:String):Comparable<LrcEntryKt> {
+
+    private lateinit var staticLayout: StaticLayout
+    var offset = Float.MIN_VALUE
+
+    override fun compareTo(other: LrcEntryKt) = (time - other.time).toInt()
+
+    fun init(paint: TextPaint, width: Int, gravity: Int) {
+        val align = when (gravity) {
+            GRAVITY_LEFT -> Layout.Alignment.ALIGN_NORMAL
+            GRAVITY_CENTER -> Layout.Alignment.ALIGN_CENTER
+            GRAVITY_RIGHT -> Layout.Alignment.ALIGN_OPPOSITE
+            else -> Layout.Alignment.ALIGN_CENTER
+        }
+        staticLayout = StaticLayout.Builder.obtain(
+            text, 0, text.length,
+            paint, width
+        ).setAlignment(align)
+            .setLineSpacing(0f, 1f)
+            .build()
+    }
+
+    fun height() = if(this::staticLayout.isInitialized) staticLayout.height else 0
+
+    fun isInitialized(unit:((StaticLayout)->Unit)){
+        if(this::staticLayout.isInitialized)
+            unit.invoke(staticLayout)
+    }
+
+    companion object{
+
+        const val GRAVITY_LEFT = 1
+        const val GRAVITY_CENTER = 2
+        const val GRAVITY_RIGHT = 3
+
+        fun formatTime(milli:Long):String {
+            val m = (milli / DateUtils.MINUTE_IN_MILLIS).toInt()
+            val s = ((milli / DateUtils.SECOND_IN_MILLIS) % 60).toInt()
+            val mm = String.format(Locale.getDefault(), "%02d", m)
+            val ss = String.format(Locale.getDefault(), "%02d", s)
+            return "$mm:$ss"
+        }
+
+        fun parseLrc(lrcText: String): List<LrcEntryKt> {
+            if (TextUtils.isEmpty(lrcText)) {
+                return emptyList()
+            }
+            val entryList: MutableList<LrcEntryKt> = ArrayList()
+            lrcText.split("\n").forEach{
+                parseLine(it).run{
+                    if (isNotEmpty()) { entryList.addAll(this) }
+                }
+            }
+            entryList.sort()
+            return entryList
+        }
+
+        private fun parseLine(lines: String): List<LrcEntryKt> {
+            if (TextUtils.isEmpty(lines)) {
+                return emptyList()
+            }
+            val line = lines.trim()
+            val lineMatcher =
+                Pattern.compile("((\\[\\d\\d:\\d\\d\\.\\d{2,3}])+)(.+)").matcher(line)
+            if (!lineMatcher.matches()) {
+                return emptyList()
+            }
+            val times = lineMatcher.group(1)?:"00:00:00"
+            val text = lineMatcher.group(3)?:""
+            val entryList: MutableList<LrcEntryKt> = ArrayList()
+
+            val timeMatcher = Pattern.compile("\\[(\\d\\d):(\\d\\d)\\.(\\d){2,3}]").matcher(times)
+            while (timeMatcher.find()) {
+                val min = (timeMatcher.group(1)?:"0").toLong()
+                val sec = (timeMatcher.group(2)?:"0").toLong()
+                val mil = (timeMatcher.group(3)?:"0").toLong()
+                val time =
+                    min * DateUtils.MINUTE_IN_MILLIS + sec * DateUtils.SECOND_IN_MILLIS + if (mil >= 100L) mil else mil * 10
+                entryList.add(LrcEntryKt(time, text))
+            }
+            return entryList
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/res/drawable/ic_reply_all.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_reply_all.xml b/app/src/main/res/drawable/ic_reply_all.xml
new file mode 100644
--- /dev/null	(date 1653751621930)
+++ b/app/src/main/res/drawable/ic_reply_all.xml	(date 1653751621930)
@@ -0,0 +1,23 @@
+<!--
+  Copyright (c) 2019 Google Inc.
+
+  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+  in compliance with the License. You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software distributed under the License
+  is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+  or implied. See the License for the specific language governing permissions and limitations under
+  the License.
+  -->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24.0"
+    android:viewportHeight="24.0"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="#FFFFFFFF"
+        android:pathData="M7,8L7,5l-7,7 7,7v-3l-4,-4 4,-4zM13,9L13,5l-7,7 7,7v-4.1c5,0 8.5,1.6 11,5.1 -1,-5 -4,-10 -11,-11z"/>
+</vector>
Index: app/src/main/java/app/mango/music/views/IndicatorView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/IndicatorView.kt b/app/src/main/java/app/mango/music/views/IndicatorView.kt
new file mode 100644
--- /dev/null	(date 1654938270809)
+++ b/app/src/main/java/app/mango/music/views/IndicatorView.kt	(date 1654938270809)
@@ -0,0 +1,210 @@
+package app.mango.music.views
+
+import android.content.Context
+import android.graphics.Canvas
+import android.graphics.Color
+import android.graphics.Paint
+import android.graphics.Path
+import android.util.AttributeSet
+import android.util.TypedValue
+import android.view.View
+import androidx.viewpager.widget.ViewPager
+import androidx.viewpager.widget.ViewPager.OnPageChangeListener
+
+/**
+ * 根据
+ * https://github.com/rjpacket/IndicatorView/
+ * 修改
+ */
+class IndicatorView  @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+) : View(context, attrs, defStyleAttr){
+
+    private val pointPaint = Paint().apply {
+        isAntiAlias = true
+        color = colorControlNormal()
+    }
+    private var childCount = 0
+    private val selectPointPaint = Paint().apply {
+        isAntiAlias = true
+        color = colorPrimary()
+    }
+    private var selectPosition = 0
+    private var scrollPosition = 0
+    private var ratio = 0f
+    private val pointSpace = 16.dp().toInt()
+    private val radius = 4.dp().toInt()
+
+    private val pointViews = ArrayList<PointView>()
+    private lateinit var barView: BarView
+
+    private fun Int.dp(): Float =
+        TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, this.toFloat(), resources.displayMetrics)
+
+    private fun colorControlNormal(): Int =
+        getColorForAttrId(androidx.appcompat.R.attr.colorControlNormal)
+
+    private fun colorPrimary(): Int = getColorForAttrId(androidx.appcompat.R.attr.colorPrimary)
+
+    private fun getColorForAttrId(resId: Int): Int {
+        val typedValue = TypedValue()
+        val a = context.obtainStyledAttributes(typedValue.data, intArrayOf(resId))
+        val color = a.getColor(0, Color.BLUE)
+        a.recycle()
+        return color
+    }
+
+    fun setViewPager(viewPager: ViewPager) {
+        childCount = viewPager.adapter!!.count
+        initPoints()
+        viewPager.addOnPageChangeListener(object : OnPageChangeListener {
+            override fun onPageScrolled(
+                position: Int,
+                positionOffset: Float,
+                positionOffsetPixels: Int
+            ) {
+                scrollPosition = position
+                ratio = positionOffset
+                if (ratio >= 1 || ratio <= 0) { return }
+                compute()
+                invalidate()
+            }
+
+            override fun onPageSelected(position: Int) {
+                selectPosition = position
+                ratio = 0f
+                compute()
+                invalidate()
+            }
+
+            override fun onPageScrollStateChanged(state: Int) {}
+        })
+        ratio = 0f
+        compute()
+        invalidate()
+    }
+
+    private fun initPoints() {
+        for (i in 0 until childCount) {
+            pointViews.add(PointView())
+        }
+        barView = BarView()
+    }
+
+    private fun compute() {
+        //计算球位置
+        pointViews.forEachIndexed { index, pointView ->
+            pointView.radius = radius
+            pointView.x = radius * (2 * index + 1) + pointSpace * index
+            pointView.y = radius
+            pointView.isChecked = selectPosition == index
+        }
+        //计算bar位置
+        val (selectX, selectY) = pointViews[selectPosition]
+        barView.radius = radius
+        if (selectPosition <= scrollPosition) {
+            //往右是增加右边圆的圆心
+            if (ratio <= 0.5) {
+                barView.leftX = selectX
+                barView.leftY = selectY
+                barView.rightX = (selectX + (2 * radius + pointSpace) * ratio).toInt()
+                barView.rightY = selectY
+                barView.bezierTopX = (selectX + selectY) / 2
+                barView.bezierTopY = (radius * 1.0 / 4 + 3 * ratio * radius / 2).toInt()
+                barView.bezierBottomY = (radius * 1.0 * 7 / 4 - 3 * ratio * radius / 2).toInt()
+            } else {
+                barView.leftX = (selectX + (2 * radius + pointSpace) * ratio).toInt()
+                barView.leftY = selectY
+                val (x, y) = pointViews[selectPosition + 1]
+                barView.rightX = x
+                barView.rightY = y
+                barView.bezierTopX = (barView.leftX + barView.rightX) / 2
+                barView.bezierTopY = (radius * 1.0 * 7 / 4 - 3 * ratio * radius / 2).toInt()
+                barView.bezierBottomY = (radius * 1.0 / 4 + 3 * ratio * radius / 2).toInt()
+            }
+        } else {
+            //往左是减少左边圆的圆心
+            if (ratio >= 0.5) {
+                barView.rightX = selectX
+                barView.rightY = selectY
+                barView.leftX = (selectX - (2 * radius + pointSpace) * (1 - ratio)).toInt()
+                barView.leftY = selectY
+                barView.bezierTopX = (barView.leftX + barView.rightX) / 2
+                barView.bezierTopY = (radius * 1.0 * 7 / 4 - 3 * ratio * radius / 2).toInt()
+                barView.bezierBottomY = (radius * 1.0 / 4 + 3 * ratio * radius / 2).toInt()
+            } else {
+                barView.rightX = (selectX - (2 * radius + pointSpace) * (1 - ratio)).toInt()
+                barView.rightY = selectY
+                val (x, y) = pointViews[selectPosition - 1]
+                barView.leftX = x
+                barView.leftY = y
+                barView.bezierTopX = (barView.leftX + barView.rightX) / 2
+                barView.bezierTopY = (radius * 1.0 / 4 + 3 * ratio * radius / 2).toInt()
+                barView.bezierBottomY = (radius * 1.0 * 7 / 4 - 3 * ratio * radius / 2).toInt()
+            }
+        }
+    }
+
+    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {
+        //设置view宽高 不设置就是默认全屏view，没办法改变位置
+        if (pointViews.isNotEmpty()) {
+            val width = pointViews[pointViews.size - 1].x + radius
+            val height = radius * 2
+            setMeasuredDimension(width, height)
+        } else {
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec)
+        }
+    }
+
+    override fun onDraw(canvas: Canvas) {
+        super.onDraw(canvas)
+        pointViews.forEach {
+            canvas.drawCircle(
+                it.x.toFloat(),
+                it.y.toFloat(),
+                it.radius.toFloat(),
+                if (it.isChecked) selectPointPaint else pointPaint
+            )
+        }
+        canvas.drawCircle(
+            barView.leftX.toFloat(),
+            barView.leftY.toFloat(),
+            barView.radius.toFloat(),
+            selectPointPaint
+        )
+        canvas.drawCircle(
+            barView.rightX.toFloat(),
+            barView.rightY.toFloat(),
+            barView.radius.toFloat(),
+            selectPointPaint
+        )
+
+        val bezierPath = Path()
+        bezierPath.moveTo(barView.leftX.toFloat(), 0f)
+        bezierPath.quadTo(barView.bezierTopX.toFloat(),
+            barView.bezierTopY.toFloat(), barView.rightX.toFloat(), 0f)
+        bezierPath.lineTo(barView.rightX.toFloat(), (2 * radius).toFloat())
+        bezierPath.quadTo(
+            barView.bezierTopX.toFloat(),
+            barView.bezierBottomY.toFloat(),
+            barView.leftX.toFloat(),
+            (2 * radius).toFloat()
+        )
+        bezierPath.lineTo(barView.leftX.toFloat(), 0f)
+        canvas.drawPath(bezierPath, selectPointPaint)
+    }
+
+    data class PointView(
+        var x:Int = 0,var y:Int = 0,
+        var radius:Int = 0,var isChecked:Boolean = false
+    )
+
+    data class BarView(
+        var leftX:Int = 0,var leftY:Int = 0,
+        var rightX:Int = 0,var rightY:Int = 0,
+        var radius:Int = 0,var bezierTopX:Int = 0,
+        var bezierTopY:Int = 0,var bezierBottomY:Int = 0
+    )
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/utils/DimensionExtensions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/utils/DimensionExtensions.kt b/app/src/main/java/app/mango/music/utils/DimensionExtensions.kt
new file mode 100644
--- /dev/null	(date 1654740876550)
+++ b/app/src/main/java/app/mango/music/utils/DimensionExtensions.kt	(date 1654740876550)
@@ -0,0 +1,13 @@
+package app.mango.music.utils
+
+import android.content.Context
+
+object DimensionExtensions {
+
+    private var oneDp = 0f
+    fun init(context: Context){
+        oneDp = context.dpToDimension(1f)
+    }
+
+    fun Int.dpToPx() = this* oneDp
+}
\ No newline at end of file
Index: app/src/main/res/drawable/ic_edit.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_edit.xml b/app/src/main/res/drawable/ic_edit.xml
new file mode 100644
--- /dev/null	(date 1633308104000)
+++ b/app/src/main/res/drawable/ic_edit.xml	(date 1633308104000)
@@ -0,0 +1,23 @@
+<!--
+  Copyright (c) 2019 Google Inc.
+
+  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+  in compliance with the License. You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software distributed under the License
+  is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+  or implied. See the License for the specific language governing permissions and limitations under
+  the License.
+  -->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24.0"
+    android:viewportHeight="24.0"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="#FFFFFFFF"
+        android:pathData="M3,17.25V21h3.75L17.81,9.94l-3.75,-3.75L3,17.25zM20.71,7.04c0.39,-0.39 0.39,-1.02 0,-1.41l-2.34,-2.34c-0.39,-0.39 -1.02,-0.39 -1.41,0l-1.83,1.83 3.75,3.75 1.83,-1.83z"/>
+</vector>
Index: app/src/main/res/drawable/ic_skip_next.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_skip_next.xml b/app/src/main/res/drawable/ic_skip_next.xml
new file mode 100644
--- /dev/null	(date 1640867443191)
+++ b/app/src/main/res/drawable/ic_skip_next.xml	(date 1640867443191)
@@ -0,0 +1,12 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:pathData="M6,18L14.5,12L6,6M8,9.86L11.03,12L8,14.14M16,6H18V18H16"
+      android:strokeLineJoin="round"
+      android:strokeWidth="0.2"
+      android:fillColor="#000000"/>
+</vector>
Index: app/src/main/res/drawable/bottom_app_bar_title_foreground.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/bottom_app_bar_title_foreground.xml b/app/src/main/res/drawable/bottom_app_bar_title_foreground.xml
new file mode 100644
--- /dev/null	(date 1653570686067)
+++ b/app/src/main/res/drawable/bottom_app_bar_title_foreground.xml	(date 1653570686067)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<ripple
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="?attr/colorControlHighlight">
+    <item android:id="@android:id/mask"
+        android:gravity="center_vertical"
+        android:height="40dp">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/small_component_corner_radius"/>
+            <solid android:color="#fff"/>
+        </shape>
+    </item>
+</ripple>
+
Index: app/src/main/res/drawable/ic_music.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_music.xml b/app/src/main/res/drawable/ic_music.xml
new file mode 100644
--- /dev/null	(date 1653622766146)
+++ b/app/src/main/res/drawable/ic_music.xml	(date 1653622766146)
@@ -0,0 +1,15 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M10.01,17m-2,0a2,2 0,1 1,4 0a2,2 0,1 1,-4 0"
+        android:strokeAlpha="0.3"
+        android:fillAlpha="0.3"/>
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,3l0.01,10.55c-0.59,-0.34 -1.27,-0.55 -2,-0.55C7.79,13 6,14.79 6,17s1.79,4 4.01,4S14,19.21 14,17L14,7h4L18,3h-6zM10.01,19c-1.1,0 -2,-0.9 -2,-2s0.9,-2 2,-2 2,0.9 2,2 -0.9,2 -2,2z"/>
+</vector>
Index: app/src/main/java/app/mango/music/ui/style/StyleFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/style/StyleFragment.kt b/app/src/main/java/app/mango/music/ui/style/StyleFragment.kt
new file mode 100644
--- /dev/null	(date 1654947040092)
+++ b/app/src/main/java/app/mango/music/ui/style/StyleFragment.kt	(date 1654947040092)
@@ -0,0 +1,76 @@
+package app.mango.music.ui.style
+
+import android.annotation.SuppressLint
+import android.graphics.Paint
+import android.os.Bundle
+import android.view.View
+import app.mango.music.R
+import app.mango.music.databinding.FragmentStyleBinding
+import app.mango.music.ui.BaseFragment
+import app.mango.music.utils.DimensionExtensions.dpToPx
+import app.mango.music.utils.themeColor
+import com.google.android.material.shape.*
+import com.google.android.material.transition.MaterialFade
+
+class StyleFragment:BaseFragment<FragmentStyleBinding>() {
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        enterTransition = MaterialFade().apply {
+            duration = resources.getInteger(R.integer.motion_duration_medium).toLong()
+        }
+        returnTransition = MaterialFade().apply {
+            duration = resources.getInteger(R.integer.motion_duration_medium).toLong()
+        }
+    }
+
+    fun Int.dp() = dpToPx()
+
+    @SuppressLint("RestrictedApi")
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        binding.toolbar.setNavigationOnClickListener { navController.navigateUp() }
+
+        //气泡 带 阴影
+        val shapePathModel = ShapeAppearanceModel.builder()
+            .setAllCorners(RoundedCornerTreatment())
+            .setAllCornerSizes(16.dp())
+            .setRightEdge(object :TriangleEdgeTreatment(8.dp(),false){
+                override fun getEdgePath(
+                    length: Float,
+                    center: Float,
+                    interpolation: Float,
+                    shapePath: ShapePath
+                ) {
+                    super.getEdgePath(length, 12.dp(), interpolation, shapePath)
+                }
+            }).build()
+        val backgroundDrawable = MaterialShapeDrawable(shapePathModel).apply {
+            setTint(requireContext().themeColor(R.attr.colorSecondary))
+            paintStyle = Paint.Style.FILL
+
+            shadowCompatibilityMode = MaterialShapeDrawable.SHADOW_COMPAT_MODE_ALWAYS
+            initializeElevationOverlay(requireContext())
+            elevation = 4.dp()
+            setShadowColor(0x155e5e5e.toInt())
+            shadowVerticalOffset = 2.dp().toInt()
+
+        }
+        binding.test.background = backgroundDrawable
+
+        /*val shapePathModel = ShapeAppearanceModel.builder()
+            .setAllCorners(RoundedCornerTreatment())
+            .setAllCornerSizes(10.dp())
+            .setAllEdges(TriangleEdgeTreatment(8.dp(),true))
+            .build()
+        val backgroundDrawable = MaterialShapeDrawable(shapePathModel).apply {
+            setTint(requireContext().getColorByAttr(R.attr.colorSecondary))
+            paintStyle = Paint.Style.FILL_AND_STROKE
+        }
+        binding.test.background = backgroundDrawable*/
+
+    }
+
+    override fun setBinding(): FragmentStyleBinding = FragmentStyleBinding.inflate(layoutInflater)
+}
\ No newline at end of file
Index: app/src/main/res/values-land/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-land/dimens.xml b/app/src/main/res/values-land/dimens.xml
new file mode 100644
--- /dev/null	(date 1653569774300)
+++ b/app/src/main/res/values-land/dimens.xml	(date 1653569774300)
@@ -0,0 +1,3 @@
+<resources>
+    <dimen name="fab_margin">48dp</dimen>
+</resources>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_graphic_eq.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_graphic_eq.xml b/app/src/main/res/drawable/ic_graphic_eq.xml
new file mode 100644
--- /dev/null	(date 1650024076000)
+++ b/app/src/main/res/drawable/ic_graphic_eq.xml	(date 1650024076000)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M7,18h2L9,6L7,6v12zM11,22h2L13,2h-2v20zM3,14h2v-4L3,10v4zM15,18h2L17,6h-2v12zM19,10v4h2v-4h-2z"/>
+</vector>
Index: app/src/main/res/drawable-v24/ic_launcher_foreground.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable-v24/ic_launcher_foreground.xml b/app/src/main/res/drawable-v24/ic_launcher_foreground.xml
new file mode 100644
--- /dev/null	(date 1653569773610)
+++ b/app/src/main/res/drawable-v24/ic_launcher_foreground.xml	(date 1653569773610)
@@ -0,0 +1,30 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:aapt="http://schemas.android.com/aapt"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
+        <aapt:attr name="android:fillColor">
+            <gradient
+                android:endX="85.84757"
+                android:endY="92.4963"
+                android:startX="42.9492"
+                android:startY="49.59793"
+                android:type="linear">
+                <item
+                    android:color="#44000000"
+                    android:offset="0.0" />
+                <item
+                    android:color="#00000000"
+                    android:offset="1.0" />
+            </gradient>
+        </aapt:attr>
+    </path>
+    <path
+        android:fillColor="#FFFFFF"
+        android:fillType="nonZero"
+        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
+        android:strokeWidth="1"
+        android:strokeColor="#00000000" />
+</vector>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/settings/AudioEffectFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/settings/AudioEffectFragment.kt b/app/src/main/java/app/mango/music/ui/settings/AudioEffectFragment.kt
new file mode 100644
--- /dev/null	(date 1655351162988)
+++ b/app/src/main/java/app/mango/music/ui/settings/AudioEffectFragment.kt	(date 1655351162988)
@@ -0,0 +1,9 @@
+package app.mango.music.ui.settings
+
+import app.mango.music.databinding.BottomSheetEffectDialogLayoutBinding
+
+class AudioEffectFragment : BaseBottomSheetDialog<BottomSheetEffectDialogLayoutBinding>() {
+
+    override fun setLayout(): BottomSheetEffectDialogLayoutBinding = BottomSheetEffectDialogLayoutBinding.inflate(layoutInflater)
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/PlaylistSheetFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/PlaylistSheetFragment.kt b/app/src/main/java/app/mango/music/ui/PlaylistSheetFragment.kt
new file mode 100644
--- /dev/null	(date 1655028543710)
+++ b/app/src/main/java/app/mango/music/ui/PlaylistSheetFragment.kt	(date 1655028543710)
@@ -0,0 +1,97 @@
+package app.mango.music.ui
+
+import android.os.Bundle
+import android.view.View
+import androidx.activity.addCallback
+import androidx.constraintlayout.widget.ConstraintLayout
+import androidx.media3.common.MediaItem
+import androidx.recyclerview.widget.GridLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import app.mango.music.R
+import app.mango.music.audio.FavoriteMusic
+import app.mango.music.databinding.FragmentPlaylistBinding
+import app.mango.music.data.GlobalData
+import app.mango.music.manager.SpManager
+import com.google.android.material.bottomsheet.BottomSheetBehavior
+import com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED
+import com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_HIDDEN
+import kotlinx.coroutines.flow.collect
+import kotlinx.coroutines.launch
+
+class PlaylistSheetFragment : BaseFragment<FragmentPlaylistBinding>() {
+
+    override fun setBinding(): FragmentPlaylistBinding =
+        FragmentPlaylistBinding.inflate(layoutInflater)
+
+    private lateinit var behavior: BottomSheetBehavior<ConstraintLayout>
+    private var current: MediaItem? = null
+
+    override fun createViewBefore() {
+        binding.apply {
+            behavior = BottomSheetBehavior.from(lessonsSheet)
+            behavior.state = STATE_HIDDEN
+            val backCallback = requireActivity()
+                .onBackPressedDispatcher.addCallback(viewLifecycleOwner, false) {
+                    behavior.state = STATE_HIDDEN
+                }
+            behavior.addBottomSheetCallback(
+                onStateChanged = {_,newState->
+                    backCallback.isEnabled = newState == STATE_EXPANDED
+                    if (newState == STATE_EXPANDED) {
+                        current?.run {
+                            val index = musicAdapter.currentList
+                                .indexOfFirst { it.mediaItem().mediaId == mediaId }
+                            binding.playlist.scrollToPos(index)
+                        }
+                    }
+                }
+            )
+        }
+    }
+
+    fun open() {
+        if (this::behavior.isInitialized)
+            behavior.state = STATE_EXPANDED
+    }
+
+    private fun RecyclerView.scrollToPos(index: Int) {
+        when {
+            index < 0 -> {}
+            index < 20 -> smoothScrollToPosition(index)
+            else -> scrollToPosition(index)
+        }
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        binding.adapter = musicAdapter
+
+        repeatWithViewLifecycle {
+            launch {
+                musicViewModel.playlist.collect { list ->
+                    musicAdapter.submitList(list)
+                    binding.playlistTitle.text = getString(R.string.playlist_title,list.size)
+                }
+            }
+            launch {
+                GlobalData.currentMediaItem.value?.let {
+                    current = it
+                }
+            }
+        }
+        binding.run {
+            playlist.apply {
+                itemTouchHelper()
+                scrollVisibility(binding.playlistTitleDivider)
+                SpManager.listen(getString(R.string.key_set_list_filter_grid),
+                    SpManager.SpIntListener(getString(R.string.set_list_filter_grid_def).toInt()) {
+                        layoutManager = GridLayoutManager(context, it)
+                    })
+            }
+            collapsePlaylist.setOnClickListener {
+                behavior.state = STATE_HIDDEN
+            }
+        }
+    }
+}
Index: app/src/main/res/values-night/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-night/themes.xml b/app/src/main/res/values-night/themes.xml
new file mode 100644
--- /dev/null	(date 1654939381160)
+++ b/app/src/main/res/values-night/themes.xml	(date 1654939381160)
@@ -0,0 +1,57 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+
+    <!--<style name="Base.Theme.Mango" parent="Theme.Material3.DayNight.NoActionBar">-->
+
+    <style name="Platform.V21.Theme" parent="Theme.MaterialComponents.DayNight">
+        <item name="colorPrimaryDark">@color/system_window_scrim_compat</item>
+    </style>
+    <style name="Platform.Theme" parent="Platform.V21.Theme" />
+    <style name="Base.Theme" parent="Platform.Theme">
+        <item name="android:colorBackground">?colorSurface</item>
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+
+        <item name="colorPrimaryVariant">?colorPrimary</item>
+        <item name="colorSecondary">?colorPrimary</item>
+        <item name="colorOnSecondary">?colorOnPrimary</item>
+        <item name="colorSecondaryVariant">?colorSecondary</item>
+        <item name="colorSurface">@color/color_surface_dark</item>
+        <item name="minTouchTargetSize">0dp</item>
+        <item name="textInputStyle">@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox</item>
+
+        <item name="scrimBackground">?colorSurface</item>
+        <item name="colorAppBarSurface">?colorSurface</item>
+    </style>
+
+    <style name="Theme" parent="Base.Theme" >
+        <item name="android:navigationBarColor">@android:color/transparent</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+    </style>
+
+    <style name="Platform.V21.Theme.Immersive" parent="Theme.MaterialComponents">
+        <item name="android:navigationBarColor">?colorPrimaryDark</item>
+
+        <item name="colorPrimaryDark">@color/dark_50_percent</item>
+    </style>
+    <style name="Platform.Theme.Immersive" parent="Platform.V21.Theme.Immersive" />
+    <style name="Base.Theme.Immersive" parent="Platform.Theme.Immersive">
+
+        <item name="android:colorBackground">?colorSurface</item>
+        <item name="windowActionBar">false</item>
+        <item name="android:windowBackground">@android:color/black</item>
+        <item name="windowNoTitle">true</item>
+
+        <item name="colorPrimary">@color/color_primary_dark</item>
+        <item name="colorPrimaryVariant">?colorPrimary</item>
+        <item name="colorSecondary">?colorPrimary</item>
+        <item name="colorOnSecondary">?colorOnPrimary</item>
+        <item name="colorSecondaryVariant">?colorSecondary</item>
+        <item name="colorSurface">@color/color_surface_dark</item>
+        <item name="minTouchTargetSize">0dp</item>
+        <item name="textInputStyle">@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox</item>
+
+        <item name="colorAppBarSurface">@color/dark_50_percent</item>
+    </style>
+    <style name="Theme.Immersive" parent="Base.Theme.Immersive" />
+
+</resources>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_playlist.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_playlist.xml b/app/src/main/res/layout/fragment_playlist.xml
new file mode 100644
--- /dev/null	(date 1655028543700)
+++ b/app/src/main/res/layout/fragment_playlist.xml	(date 1655028543700)
@@ -0,0 +1,100 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <data>
+
+        <variable
+            name="adapter"
+            type="app.mango.music.adapters.MusicAdapter" />
+    </data>
+
+    <androidx.coordinatorlayout.widget.CoordinatorLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".ui.lessons.LessonsSheetFragment">
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/lessons_sheet"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            app:behavior_peekHeight="1dp"
+            app:behavior_hideable="true"
+            app:behavior_skipCollapsed="true"
+            app:layout_behavior="@string/bottom_sheet_behavior">
+
+            <androidx.cardview.widget.CardView
+                android:translationZ="@dimen/bottom_app_bar_logo_size"
+                app:cardCornerRadius="@dimen/fab_margin"
+                app:marginTopSystemWindowInsets="@{true}"
+                android:layout_marginBottom="-16dp"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent">
+
+                <androidx.constraintlayout.widget.ConstraintLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent">
+
+                    <TextView
+                        android:id="@+id/playlist_title"
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:ellipsize="end"
+                        android:gravity="center_vertical"
+                        android:lines="1"
+                        android:minHeight="?attr/actionBarSize"
+                        android:paddingHorizontal="@dimen/grid_2"
+                        android:textAppearance="?attr/textAppearanceSubtitle1"
+                        app:layout_constraintEnd_toStartOf="@id/collapse_playlist"
+                        app:layout_constraintHorizontal_weight="1"
+                        app:layout_constraintStart_toStartOf="parent"
+                        app:layout_constraintTop_toTopOf="parent" />
+
+                    <ImageView
+                        android:id="@+id/collapse_playlist"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:background="?attr/selectableItemBackgroundBorderless"
+                        android:padding="@dimen/grid_2"
+                        android:rotation="180"
+                        app:layout_constraintEnd_toEndOf="parent"
+                        app:layout_constraintStart_toEndOf="@id/playlist_title"
+                        app:layout_constraintTop_toTopOf="@id/playlist_title"
+                        app:srcCompat="@drawable/ic_arrow_up"
+                        app:tint="?attr/colorControlNormal" />
+
+                    <View
+                        android:id="@+id/playlist_title_divider"
+                        android:layout_width="0dp"
+                        android:layout_height="1dp"
+                        android:background="@android:color/white"
+                        android:backgroundTint="@color/material_on_surface_stroke"
+                        app:layout_constraintEnd_toEndOf="parent"
+                        app:layout_constraintStart_toStartOf="parent"
+                        app:layout_constraintTop_toBottomOf="@id/playlist_title" />
+
+                    <androidx.recyclerview.widget.RecyclerView
+                        android:id="@+id/playlist"
+                        android:layout_width="0dp"
+                        android:layout_height="0dp"
+                        android:adapter="@{adapter}"
+                        android:background="?scrimBackground"
+                        android:clipToPadding="false"
+                        app:hasFixedSize="@{true}"
+                        android:overScrollMode="never"
+                        app:layout_constraintBottom_toBottomOf="parent"
+                        app:layout_constraintEnd_toEndOf="parent"
+                        app:layout_constraintStart_toStartOf="parent"
+                        app:layout_constraintTop_toBottomOf="@id/playlist_title_divider"
+                        android:paddingBottom="@dimen/fab_margin" />
+
+                </androidx.constraintlayout.widget.ConstraintLayout>
+            </androidx.cardview.widget.CardView>
+
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+    </androidx.coordinatorlayout.widget.CoordinatorLayout>
+
+</layout>
Index: app/src/main/res/values-w600dp/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-w600dp/dimens.xml b/app/src/main/res/values-w600dp/dimens.xml
new file mode 100644
--- /dev/null	(date 1653569774336)
+++ b/app/src/main/res/values-w600dp/dimens.xml	(date 1653569774336)
@@ -0,0 +1,3 @@
+<resources>
+    <dimen name="fab_margin">48dp</dimen>
+</resources>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_radio.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_radio.xml b/app/src/main/res/drawable/ic_radio.xml
new file mode 100644
--- /dev/null	(date 1654004911594)
+++ b/app/src/main/res/drawable/ic_radio.xml	(date 1654004911594)
@@ -0,0 +1,18 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M20,13H4v7h16v-7zM8,18.98c-1.38,0 -2.5,-1.12 -2.5,-2.5s1.12,-2.5 2.5,-2.5 2.5,1.12 2.5,2.5 -1.12,2.5 -2.5,2.5z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M2,20c0,1.1 0.89,2 2,2h16c1.11,0 2,-0.9 2,-2L22,8c0,-1.11 -0.89,-2 -2,-2L3.24,6.15C2.51,6.43 2,7.17 2,8v12zM4,8h16v3h-2L18,9h-2v2L4,11L4,8zM4,13h16v7L4,20v-7z"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M8,16.48m-2.5,0a2.5,2.5 0,1 1,5 0a2.5,2.5 0,1 1,-5 0"/>
+</vector>
Index: app/src/main/res/values-w1240dp/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-w1240dp/dimens.xml b/app/src/main/res/values-w1240dp/dimens.xml
new file mode 100644
--- /dev/null	(date 1653569774371)
+++ b/app/src/main/res/values-w1240dp/dimens.xml	(date 1653569774371)
@@ -0,0 +1,3 @@
+<resources>
+    <dimen name="fab_margin">200dp</dimen>
+</resources>
\ No newline at end of file
Index: app/src/main/res/drawable/sheet_expand.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/sheet_expand.xml b/app/src/main/res/drawable/sheet_expand.xml
new file mode 100644
--- /dev/null	(date 1654005730027)
+++ b/app/src/main/res/drawable/sheet_expand.xml	(date 1654005730027)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="?attr/colorControlHighlight">
+  <item android:id="@android:id/mask">
+    <shape android:shape="rectangle">
+      <corners android:topLeftRadius="@dimen/minimized_sheet_top_left_radius"/>
+      <solid android:color="#fff"/>
+    </shape>
+  </item>
+</ripple>
Index: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml b/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
new file mode 100644
--- /dev/null	(date 1653569773634)
+++ b/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml	(date 1653569773634)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
Index: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml b/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
new file mode 100644
--- /dev/null	(date 1653569773488)
+++ b/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml	(date 1653569773488)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/settings/SettingsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/settings/SettingsFragment.kt b/app/src/main/java/app/mango/music/ui/settings/SettingsFragment.kt
new file mode 100644
--- /dev/null	(date 1654841516196)
+++ b/app/src/main/java/app/mango/music/ui/settings/SettingsFragment.kt	(date 1654841516196)
@@ -0,0 +1,22 @@
+package app.mango.music.ui.settings
+
+import android.os.Bundle
+import app.mango.music.R
+import app.mango.music.databinding.FragmentSettingsBinding
+import app.mango.music.ui.BaseFragment
+import com.google.android.material.transition.MaterialSharedAxis
+
+class SettingsFragment:BaseFragment<FragmentSettingsBinding>() {
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        enterTransition = MaterialSharedAxis(MaterialSharedAxis.Z, true).apply {
+            duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+        }
+        returnTransition = MaterialSharedAxis(MaterialSharedAxis.Z, false).apply {
+            duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+        }
+    }
+
+    override fun setBinding(): FragmentSettingsBinding = FragmentSettingsBinding.inflate(layoutInflater)
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/settings/Settings.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/settings/Settings.kt b/app/src/main/java/app/mango/music/ui/settings/Settings.kt
new file mode 100644
--- /dev/null	(date 1654841246994)
+++ b/app/src/main/java/app/mango/music/ui/settings/Settings.kt	(date 1654841246994)
@@ -0,0 +1,36 @@
+package app.mango.music.ui.settings
+
+import android.media.audiofx.Equalizer
+import android.os.Bundle
+import android.view.View
+import androidx.appcompat.app.AlertDialog
+import androidx.appcompat.app.AppCompatDelegate
+import androidx.media3.exoplayer.ExoPlayer
+import androidx.preference.*
+import app.mango.music.R
+import app.mango.music.manager.Config
+import app.mango.music.manager.SpManager
+
+class Settings : BasePreferenceFragment() {
+
+
+    override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
+        setPreferencesFromResource(R.xml.root_preferences, rootKey)
+        findPreference<ListPreference>(R.string.key_set_theme_dark_mode)?.setOnPreferenceChangeListener { _, newValue ->
+            refreshDarkModePreference(newValue.toString())
+            true
+        }
+    }
+
+    private fun refreshDarkModePreference(newValue: String) {
+        val defaultValue = resources.getString(R.string.set_theme_dark_mode_def)
+        val disabledValue = resources.getStringArray(R.array.set_theme_dark_mode_value)
+        if (newValue != defaultValue) {
+            if (newValue == disabledValue[1]) {
+                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)
+            } else {
+                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)
+            }
+        }else AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)
+    }
+}
\ No newline at end of file
Index: app/src/main/res/drawable/divider.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/divider.xml b/app/src/main/res/drawable/divider.xml
new file mode 100644
--- /dev/null	(date 1654005479031)
+++ b/app/src/main/res/drawable/divider.xml	(date 1654005479031)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2019 Google Inc.
+
+  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+  in compliance with the License. You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software distributed under the License
+  is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+  or implied. See the License for the specific language governing permissions and limitations under
+  the License.
+  -->
+<shape
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+  <solid android:color="@color/google_grey_900"/>
+</shape>
Index: app/src/main/java/app/mango/music/audio/MusicBox.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/audio/MusicBox.kt b/app/src/main/java/app/mango/music/audio/MusicBox.kt
new file mode 100644
--- /dev/null	(date 1655008913677)
+++ b/app/src/main/java/app/mango/music/audio/MusicBox.kt	(date 1655008913677)
@@ -0,0 +1,5 @@
+package app.mango.music.audio
+
+enum class MusicBox {
+    MUSIC_LIBRARY,ALBUM,ARTIST,FAVORITE
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/utils/ColorAnimator.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/utils/ColorAnimator.kt b/app/src/main/java/app/mango/music/utils/ColorAnimator.kt
new file mode 100644
--- /dev/null	(date 1653890566136)
+++ b/app/src/main/java/app/mango/music/utils/ColorAnimator.kt	(date 1653890566136)
@@ -0,0 +1,58 @@
+package app.mango.music.utils
+
+import android.animation.ValueAnimator
+import android.graphics.Color
+import android.os.Build
+import androidx.palette.graphics.Palette
+
+object ColorUtils {
+    fun isLightColor(color: Int): Boolean {
+        val darkness =
+            1 - (0.299 * Color.red(color) + 0.587 * Color.green(color) + 0.114 * Color.blue(
+                color
+            )) / 255
+        return darkness < 0.5
+    }
+
+    fun getAutomaticColor(palette: Palette?): Int {
+        if (palette == null) return Color.DKGRAY
+        //var oldColor = palette.getDarkMutedColor(Color.LTGRAY) text
+        var oldColor = palette.getLightVibrantColor(Color.LTGRAY)
+        //if (!isLightColor(oldColor))
+        //    oldColor = palette.getLightVibrantColor(Color.LTGRAY)
+        return oldColor
+    }
+}
+object ColorAnimator {
+    private val colorMap: LinkedHashMap<Int, Int> = LinkedHashMap()
+    private var transitionDuration = 600L
+
+    fun setBgColorFromPalette(
+        palette: Palette?,
+        setColor: (Int) -> Unit
+    ) {
+        val plColor = ColorUtils.getAutomaticColor(palette)
+        setBgColor(plColor, setColor)
+    }
+
+    fun setBgColor(
+        plColor: Int,
+        setColor: (Int) -> Unit
+    ) {
+        val id = setColor.hashCode()
+        val oldColor = colorMap[id] ?: Color.DKGRAY
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            ValueAnimator.ofArgb(oldColor, plColor).apply {
+                duration = transitionDuration
+                addUpdateListener {
+                    val color = it.animatedValue as Int
+                    setColor(color)
+                }
+            }.start()
+        } else {
+            setColor(plColor)
+        }
+        colorMap[id] = plColor
+    }
+}
Index: app/src/main/java/app/mango/music/utils/BindingAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/utils/BindingAdapter.kt b/app/src/main/java/app/mango/music/utils/BindingAdapter.kt
new file mode 100644
--- /dev/null	(date 1655871783410)
+++ b/app/src/main/java/app/mango/music/utils/BindingAdapter.kt	(date 1655871783410)
@@ -0,0 +1,135 @@
+package app.mango.music.utils
+
+import android.annotation.SuppressLint
+import android.widget.ImageView
+import android.widget.TextView
+import androidx.databinding.BindingAdapter
+import androidx.media3.common.MediaItem
+import app.mango.music.R
+import app.mango.music.audio.*
+import app.mango.music.fetcher.getCoverFromMediaItem
+import app.mango.music.views.CoverImageView
+import app.mango.music.views.lrcview.LrcViewKt
+import coil.loadAny
+import coil.transform.RoundedCornersTransformation
+import java.text.SimpleDateFormat
+import java.util.*
+import kotlin.collections.HashMap
+
+@BindingAdapter("info_type","info_detail")
+fun setMusicInfo(view: TextView,musicBox: MusicBox,detail: Detail?){
+    detail?:return
+    val mediaItem = detail.mediaItem
+    view.text = when(musicBox){
+        MusicBox.ARTIST ->"ARTIST ID:${mediaItem.mediaMetadata.getArtistId()}"
+        else -> "ALBUM ID:${mediaItem.mediaMetadata.getAlbumId()}"
+    }
+}
+
+private fun Long.duration() = getSafeDateFormat(if(this>1000*60*60) "H:mm:ss" else "mm:ss").format(Date(this))
+
+private val SDF_THREAD_LOCAL: ThreadLocal<Map<String, SimpleDateFormat>> =
+    object : ThreadLocal<Map<String, SimpleDateFormat>>() {
+        override fun initialValue(): Map<String, SimpleDateFormat> {
+            return HashMap()
+        }
+    }
+@SuppressLint("SimpleDateFormat")
+private fun getSafeDateFormat(pattern: String): SimpleDateFormat {
+    val sdfMap: HashMap<String, SimpleDateFormat> =
+        SDF_THREAD_LOCAL.get() as HashMap<String, SimpleDateFormat>
+    var simpleDateFormat = sdfMap[pattern]
+    if (simpleDateFormat == null) {
+        simpleDateFormat = SimpleDateFormat(pattern)
+        sdfMap[pattern] = simpleDateFormat
+    }
+    return simpleDateFormat
+}
+
+@BindingAdapter("music_info")
+fun setMusicInfo(textView: TextView,mediaItem: MediaItem?){
+    mediaItem?:return
+    textView.text = "${mediaItem.mediaMetadata.artist} - ${mediaItem.mediaMetadata.albumTitle}"
+}
+
+@BindingAdapter("music_duration")
+fun setMusicDuration(view: TextView,detail: Detail?){
+    detail?:return
+    view.text = detail.duration.duration()
+}
+
+@BindingAdapter("music_duration")
+fun setMusicDuration(view: TextView, value: PlayValue?){
+    value?:return
+    view.text = value.value.toLong().duration()
+}
+
+@BindingAdapter("title_type","title_detail")
+fun setMusicDetailTitle(view: TextView,musicBox: MusicBox,mediaItem: MediaItem?){
+    mediaItem?:return
+    view.text = when(musicBox){
+        MusicBox.ARTIST -> mediaItem.mediaMetadata.artist
+        else -> mediaItem.mediaMetadata.albumTitle
+    }
+}
+
+@SuppressLint("SetTextI18n")
+@BindingAdapter("music_type")
+fun setMusicType(textView: TextView, mediaItem: MediaItem?) {
+    mediaItem ?: return
+    val strings = mediaItem.localConfiguration!!.mimeType!!.split("/").toTypedArray()
+    textView.text = "${strings[strings.size - 1].uppercase()} - ${mediaItem.mediaMetadata.getDuration().duration()}"
+}
+
+@BindingAdapter(value = ["loadCover", "samplingValue"], requireAll = false)
+fun loadCover(imageView: CoverImageView, mediaItem: MediaItem?, samplingValue: Int = -1) {
+    mediaItem ?: run {
+        imageView.clearImage()
+        return
+    }
+    val samplingTo = if (samplingValue <= 0)
+        imageView.width else samplingValue
+
+    imageView.loadAny(mediaItem.getCoverFromMediaItem()) {
+        if (samplingTo > 0) size(samplingTo)
+        allowHardware(false)
+        target(onSuccess = {
+            imageView.loadImageFromDrawable(it)
+        }, onError = {
+            imageView.clearImage()
+        }).build()
+    }
+}
+
+@BindingAdapter("load_lyric")
+fun LrcViewKt.loadLyric(mediaItem: MediaItem?){
+    mediaItem?:return
+    loadLrc(mediaItem)
+}
+
+@BindingAdapter(value = ["loadCover", "samplingValue"], requireAll = false)
+fun loadCover(imageView: ImageView, mediaItem: MediaItem?, samplingValue: Int = -1) {
+    mediaItem ?: return
+    val samplingTo = if (samplingValue <= 0)
+        imageView.width else samplingValue
+
+    imageView.loadAny(mediaItem.getCoverFromMediaItem()) {
+        if (samplingTo > 0) size(samplingTo)
+        error(R.drawable.ic_music)
+        crossfade(150)
+    }
+}
+
+@BindingAdapter("loadMusicCover")
+fun loadMusicCover(imageView: ImageView,mediaItem: MediaItem?){
+    mediaItem?:return
+    val samplingTo = imageView.width
+
+    imageView.loadAny(mediaItem.getCoverFromMediaItem()) {
+        if (samplingTo > 0) size(samplingTo)
+        error(R.drawable.ic_music)
+        crossfade(150)
+        transformations(RoundedCornersTransformation(imageView.context.dpToDimension(42/2f)))
+    }
+}
+
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1655875423310)
+++ b/.idea/vcs.xml	(date 1655875423310)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/layout/bottom_sheet_effect_dialog_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/bottom_sheet_effect_dialog_layout.xml b/app/src/main/res/layout/bottom_sheet_effect_dialog_layout.xml
new file mode 100644
--- /dev/null	(date 1655350411864)
+++ b/app/src/main/res/layout/bottom_sheet_effect_dialog_layout.xml	(date 1655350411864)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.coordinatorlayout.widget.CoordinatorLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <androidx.cardview.widget.CardView
+            app:cardElevation="@dimen/fab_margin"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="@dimen/fab_margin"
+            app:cardCornerRadius="@dimen/fab_margin">
+
+            <fragment
+                android:name="app.mango.music.ui.settings.AudioEffectSettings"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:tag="app.mango.music.ui.settings.AudioEffectSettings" />
+
+        </androidx.cardview.widget.CardView>
+    </androidx.coordinatorlayout.widget.CoordinatorLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/utils/AnimationUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/utils/AnimationUtils.kt b/app/src/main/java/app/mango/music/utils/AnimationUtils.kt
new file mode 100644
--- /dev/null	(date 1654496866336)
+++ b/app/src/main/java/app/mango/music/utils/AnimationUtils.kt	(date 1654496866336)
@@ -0,0 +1,119 @@
+package app.mango.music.utils
+
+import androidx.annotation.ColorInt
+import androidx.annotation.FloatRange
+import com.google.android.material.animation.ArgbEvaluatorCompat
+import kotlin.math.roundToInt
+
+/**
+ * Linearly interpolate between two values
+ */
+fun interpolate(
+    startValue: Float,
+    endValue: Float,
+    @FloatRange(from = 0.0, fromInclusive = true, to = 1.0, toInclusive = true) fraction: Float
+): Float {
+    return startValue + fraction * (endValue - startValue)
+}
+
+/**
+ * Linearly interpolate between two values
+ */
+fun interpolate(
+    startValue: Int,
+    endValue: Int,
+    @FloatRange(from = 0.0, fromInclusive = true, to = 1.0, toInclusive = true) fraction: Float
+): Int {
+    return (startValue + fraction * (endValue - startValue)).roundToInt()
+}
+
+/**
+ * Linearly interpolate between two values when the fraction is in a given range.
+ */
+fun interpolate(
+    startValue: Float,
+    endValue: Float,
+    @FloatRange(
+        from = 0.0,
+        fromInclusive = true,
+        to = 1.0,
+        toInclusive = false
+    ) startFraction: Float,
+    @FloatRange(from = 0.0, fromInclusive = false, to = 1.0, toInclusive = true) endFraction: Float,
+    @FloatRange(from = 0.0, fromInclusive = true, to = 1.0, toInclusive = true) fraction: Float
+): Float {
+    if (fraction < startFraction) return startValue
+    if (fraction > endFraction) return endValue
+
+    return interpolate(startValue, endValue, (fraction - startFraction) / (endFraction - startFraction))
+}
+
+/**
+ * Linearly interpolate between two values when the fraction is in a given range.
+ */
+fun interpolate(
+    startValue: Int,
+    endValue: Int,
+    @FloatRange(
+        from = 0.0,
+        fromInclusive = true,
+        to = 1.0,
+        toInclusive = false
+    ) startFraction: Float,
+    @FloatRange(from = 0.0, fromInclusive = false, to = 1.0, toInclusive = true) endFraction: Float,
+    @FloatRange(from = 0.0, fromInclusive = true, to = 1.0, toInclusive = true) fraction: Float
+): Int {
+    if (fraction < startFraction) return startValue
+    if (fraction > endFraction) return endValue
+
+    return interpolate(startValue, endValue, (fraction - startFraction) / (endFraction - startFraction))
+}
+
+/**
+ * Linearly interpolate between two colors when the fraction is in a given range.
+ */
+@ColorInt
+fun interpolateArgb(
+    @ColorInt startColor: Int,
+    @ColorInt endColor: Int,
+    @FloatRange(
+        from = 0.0,
+        fromInclusive = true,
+        to = 1.0,
+        toInclusive = false
+    ) startFraction: Float,
+    @FloatRange(from = 0.0, fromInclusive = false, to = 1.0, toInclusive = true) endFraction: Float,
+    @FloatRange(from = 0.0, fromInclusive = true, to = 1.0, toInclusive = true) fraction: Float
+): Int {
+    if (fraction < startFraction) return startColor
+    if (fraction > endFraction) return endColor
+
+    return ArgbEvaluatorCompat.getInstance().evaluate(
+        (fraction - startFraction) / (endFraction - startFraction),
+        startColor,
+        endColor
+    )
+}
+
+/**
+ * Coerce the receiving Float between inputMin and inputMax and linearly interpolate to the
+ * outputMin to outputMax scale. This function is able to handle ranges which span negative and
+ * positive numbers.
+ *
+ * This differs from [interpolate] as the input values are not required to be between 0 and 1.
+ */
+fun Float.normalize(
+    inputMin: Float,
+    inputMax: Float,
+    outputMin: Float,
+    outputMax: Float
+): Float {
+    if (this < inputMin) {
+        return outputMin
+    } else if (this > inputMax) {
+        return outputMax
+    }
+
+    return outputMin * (1 - (this - inputMin) / (inputMax - inputMin)) +
+        outputMax * ((this - inputMin) / (inputMax - inputMin))
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/settings/BaseBottomSheetDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/settings/BaseBottomSheetDialog.kt b/app/src/main/java/app/mango/music/ui/settings/BaseBottomSheetDialog.kt
new file mode 100644
--- /dev/null	(date 1655351441266)
+++ b/app/src/main/java/app/mango/music/ui/settings/BaseBottomSheetDialog.kt	(date 1655351441266)
@@ -0,0 +1,46 @@
+package app.mango.music.ui.settings
+
+import android.content.res.Configuration
+import android.graphics.Color
+import android.graphics.drawable.ColorDrawable
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.FrameLayout
+import androidx.core.view.WindowInsetsControllerCompat
+import androidx.databinding.ViewDataBinding
+import com.google.android.material.bottomsheet.BottomSheetDialogFragment
+
+abstract class BaseBottomSheetDialog<T:ViewDataBinding>: BottomSheetDialogFragment() {
+
+    abstract fun setLayout():T
+    protected lateinit var binding:T
+
+    override fun onCreateView(
+        inflater: LayoutInflater,
+        container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View = setLayout().also {
+        binding = it
+    }.root
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        dialog?.run {
+            window?.setDimAmount(0f)
+            val bottomSheet = this::class.java.getDeclaredField("bottomSheet").apply {
+                isAccessible = true
+            }.get(this) as FrameLayout
+            setOnShowListener {
+                bottomSheet.background = ColorDrawable(Color.TRANSPARENT)
+                WindowInsetsControllerCompat(window!!,window!!.decorView).isAppearanceLightStatusBars = !isNight()
+            }
+        }
+    }
+
+    private fun isNight():Boolean{
+        val currentNightMode = requireContext().resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK
+        return currentNightMode == Configuration.UI_MODE_NIGHT_YES
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/utils/Extensions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/utils/Extensions.kt b/app/src/main/java/app/mango/music/utils/Extensions.kt
new file mode 100644
--- /dev/null	(date 1654496866349)
+++ b/app/src/main/java/app/mango/music/utils/Extensions.kt	(date 1654496866349)
@@ -0,0 +1,5 @@
+package app.mango.music.utils
+
+import kotlinx.coroutines.flow.SharingStarted
+
+val WhileViewSubscribed = SharingStarted.WhileSubscribed(5_000)
\ No newline at end of file
Index: app/src/main/java/app/mango/music/utils/ContextExtensions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/utils/ContextExtensions.kt b/app/src/main/java/app/mango/music/utils/ContextExtensions.kt
new file mode 100644
--- /dev/null	(date 1654947563774)
+++ b/app/src/main/java/app/mango/music/utils/ContextExtensions.kt	(date 1654947563774)
@@ -0,0 +1,123 @@
+package app.mango.music.utils
+
+import android.annotation.SuppressLint
+import android.app.Activity
+import android.content.Context
+import android.content.ContextWrapper
+import android.content.res.ColorStateList
+import android.graphics.Color
+import android.graphics.drawable.Drawable
+import android.util.AttributeSet
+import android.util.TypedValue
+import android.view.LayoutInflater
+import android.view.animation.AnimationUtils
+import android.view.animation.Interpolator
+import androidx.annotation.*
+import androidx.appcompat.content.res.AppCompatResources
+import androidx.appcompat.widget.TintTypedArray
+import androidx.core.content.res.use
+import kotlin.OptIn
+import kotlin.contracts.ExperimentalContracts
+import kotlin.contracts.InvocationKind
+import kotlin.contracts.contract
+
+val Context.activity: Activity?
+    get() {
+        var context = this
+        while (true) {
+            when (context) {
+                is Activity -> return context
+                is ContextWrapper -> context = context.baseContext
+                else -> return null
+            }
+        }
+    }
+
+@ColorInt
+@SuppressLint("Recycle")
+fun Context.themeColor(
+    @AttrRes themeAttrId: Int
+): Int {
+    return obtainStyledAttributes(
+        intArrayOf(themeAttrId)
+    ).use {
+        it.getColor(0, Color.MAGENTA)
+    }
+}
+
+@StyleRes
+fun Context.themeStyle(@AttrRes attr: Int): Int {
+    val tv = TypedValue()
+    theme.resolveAttribute(attr, tv, true)
+    return tv.data
+}
+
+@SuppressLint("Recycle")
+fun Context.themeInterpolator(@AttrRes attr: Int): Interpolator {
+    return AnimationUtils.loadInterpolator(
+        this,
+        obtainStyledAttributes(intArrayOf(attr)).use {
+            it.getResourceId(0, android.R.interpolator.fast_out_slow_in)
+        }
+    )
+}
+
+fun Context.getDrawableOrNull(@DrawableRes id: Int?): Drawable? {
+    return if (id == null || id == 0) null else AppCompatResources.getDrawable(this, id)
+}
+
+@ColorInt
+fun Context.getColorByAttr(@AttrRes attr: Int): Int =
+    getColorStateListByAttr(attr).defaultColor
+
+@SuppressLint("RestrictedApi")
+fun Context.getColorStateListByAttr(@AttrRes attr: Int): ColorStateList =
+    obtainStyledAttributesCompat(attrs = intArrayOf(attr)).use {
+        it.getColorStateList(0)
+    }
+
+@SuppressLint("RestrictedApi")
+fun Context.obtainStyledAttributesCompat(
+    set: AttributeSet? = null,
+    @StyleableRes attrs: IntArray,
+    @AttrRes defStyleAttr: Int = 0,
+    @StyleRes defStyleRes: Int = 0
+): TintTypedArray =
+    TintTypedArray.obtainStyledAttributes(this, set, attrs, defStyleAttr, defStyleRes)
+
+@OptIn(ExperimentalContracts::class)
+@SuppressLint("RestrictedApi")
+inline fun <R> TintTypedArray.use(block: (TintTypedArray) -> R): R {
+    contract {
+        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
+    }
+    return try {
+        block(this)
+    } finally {
+        recycle()
+    }
+}
+
+fun Context.getColorStateListCompat(@ColorRes id: Int): ColorStateList =
+    AppCompatResources.getColorStateList(this, id)!!
+
+@Dimension
+fun Context.dpToDimensionPixelSize(@Dimension(unit = Dimension.DP) dp: Int) =
+    dpToDimensionPixelSize(dp.toFloat())
+@Dimension
+fun Context.dpToDimensionPixelSize(@Dimension(unit = Dimension.DP) dp: Float): Int {
+    val value = dpToDimension(dp)
+    val size = (if (value >= 0) value + 0.5f else value - 0.5f).toInt()
+    return when {
+        size != 0 -> size
+        value == 0f -> 0
+        value > 0 -> 1
+        else -> -1
+    }
+}
+@Dimension
+fun Context.dpToDimension(@Dimension(unit = Dimension.DP) dp: Float): Float =
+    TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.displayMetrics)
+
+val Context.layoutInflater: LayoutInflater
+    get() = LayoutInflater.from(this)
\ No newline at end of file
Index: app/src/main/java/app/mango/music/utils/ColorUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/utils/ColorUtils.kt b/app/src/main/java/app/mango/music/utils/ColorUtils.kt
new file mode 100644
--- /dev/null	(date 1653837203121)
+++ b/app/src/main/java/app/mango/music/utils/ColorUtils.kt	(date 1653837203121)
@@ -0,0 +1,20 @@
+package app.mango.music.utils
+
+import android.graphics.Color
+import androidx.palette.graphics.Palette
+
+fun Palette?.getAutomaticColor(): Int {
+    if (this == null) return Color.DKGRAY
+    var oldColor = this.getDarkVibrantColor(Color.LTGRAY)
+    if (isLightColor(oldColor))
+        oldColor = this.getDarkMutedColor(Color.LTGRAY)
+    return oldColor
+}
+
+fun isLightColor(color: Int): Boolean {
+    val darkness =
+        1 - (0.299 * Color.red(color) + 0.587 * Color.green(color) + 0.114 * Color.blue(
+            color
+        )) / 255
+    return darkness < 0.5
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/views/CoverImageView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/CoverImageView.kt b/app/src/main/java/app/mango/music/views/CoverImageView.kt
new file mode 100644
--- /dev/null	(date 1654938154154)
+++ b/app/src/main/java/app/mango/music/views/CoverImageView.kt	(date 1654938154154)
@@ -0,0 +1,185 @@
+package app.mango.music.views
+
+import android.animation.ValueAnimator
+import android.content.Context
+import android.graphics.*
+import android.graphics.drawable.Drawable
+import android.graphics.drawable.GradientDrawable
+import android.net.Uri
+import android.util.AttributeSet
+import androidx.annotation.IntRange
+import androidx.appcompat.widget.AppCompatImageView
+import androidx.core.animation.addListener
+import coil.load
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+import kotlin.coroutines.CoroutineContext
+import kotlin.math.roundToInt
+
+/**
+ * 根据
+ * https://gitee.com/lalilu/lmusic/
+ * 修改
+ */
+class CoverImageView @JvmOverloads constructor(
+    context: Context, attrs: AttributeSet? = null
+) : AppCompatImageView(context, attrs), CoroutineScope {
+    override val coroutineContext: CoroutineContext = Dispatchers.IO
+
+    @IntRange(from = 0, to = 2000)
+    var samplingValue: Int = 200
+        set(value) {
+            field = value
+            launch(Dispatchers.IO) {
+                samplingBitmap = createSamplingBitmap(sourceBitmap, value)
+            }
+        }
+
+    private var bitmapPainter: Paint = Paint(Paint.ANTI_ALIAS_FLAG)
+    private var sourceBitmap: Bitmap? = null
+    private var samplingBitmap: Bitmap? = null
+
+    private var sourceRect = Rect()
+    private var destRect = RectF()
+
+    private var newBitmapPainter: Paint = Paint(Paint.ANTI_ALIAS_FLAG)
+    private var newSourceBitmap: Bitmap? = null
+    private var newSamplingBitmap: Bitmap? = null
+
+    private var newSourceRect = Rect()
+    private var newDestRect = RectF()
+
+    override fun onDraw(canvas: Canvas) {
+        destRect.set(0f, 0f, width.toFloat(), height.toFloat())
+        newDestRect.set(0f, 0f, width.toFloat(), height.toFloat())
+
+        sourceBitmap?.let {
+            sourceRect.set(0, 0, it.width, it.height)
+            canvas.drawBitmap(it, sourceRect, destRect, bitmapPainter)
+        }
+        newSourceBitmap?.let {
+            newSourceRect.set(0, 0, it.width, it.height)
+            canvas.drawBitmap(it, newSourceRect, newDestRect, newBitmapPainter)
+        }
+    }
+
+    private val animator = ValueAnimator.ofFloat(0f, 1f).apply {
+        duration = 300
+        addListener(onStart = {
+            newBitmapPainter.alpha = 0
+            invalidate()
+        }, onEnd = {
+            newBitmapPainter.alpha = 0
+            sourceBitmap = newSourceBitmap
+            samplingBitmap = newSamplingBitmap
+            newSourceBitmap = null
+            newSamplingBitmap = null
+            invalidate()
+        })
+        addUpdateListener {
+            val value = it.animatedValue as Float
+            newBitmapPainter.alpha = (value * 255).roundToInt()
+            invalidate()
+        }
+    }
+
+    private suspend fun crossFade() = withContext(Dispatchers.Main) {
+        if (animator.isStarted || animator.isRunning) animator.end()
+        animator.start()
+    }
+
+    /**
+     * 重采样图片，降低图片大小，用于Blur
+     *
+     * @param source 源图
+     * @param samplingValue 输出图片的最大边大小
+     * @return 经过重采样的Bitmap
+     */
+    private suspend inline fun createSamplingBitmap(source: Bitmap?, samplingValue: Int): Bitmap? =
+        withContext(Dispatchers.IO) {
+            source ?: return@withContext source
+
+            val width = source.width
+            val height = source.height
+            val matrix = Matrix()
+
+            val scaleWidth = samplingValue.toFloat() / width
+            val scaleHeight = samplingValue.toFloat() / height
+            matrix.postScale(scaleWidth, scaleHeight)
+
+            return@withContext Bitmap.createBitmap(
+                source, 0, 0, width, height, matrix, false
+            )
+        }
+
+    /**
+     * 外部创建Coil的ImageRequest，传入onSucceed的Drawable
+     */
+    fun loadImageFromDrawable(drawable: Drawable) = launch(Dispatchers.IO) {
+        newSourceBitmap = drawable.toBitmap().addShadow(
+            Color.argb(55, 0, 0, 0),
+            Color.TRANSPARENT,
+            0.25f,
+            GradientDrawable.Orientation.TOP_BOTTOM,
+            GradientDrawable.Orientation.BOTTOM_TOP
+        )
+        newSamplingBitmap = createSamplingBitmap(newSourceBitmap, samplingValue)
+        crossFade()
+    }
+
+    fun clearImage() = launch(Dispatchers.IO) {
+        this@CoverImageView.sourceBitmap = null
+        this@CoverImageView.samplingBitmap = null
+        this@CoverImageView.newSourceBitmap = null
+        this@CoverImageView.newSamplingBitmap = null
+        refresh()
+    }
+
+    private suspend inline fun refresh() =
+        withContext(Dispatchers.Main) {
+            invalidate()
+        }
+
+    private fun Drawable.toBitmap(): Bitmap {
+        val w = this.intrinsicWidth
+        val h = this.intrinsicHeight
+
+        val config = Bitmap.Config.ARGB_8888
+        val bitmap = Bitmap.createBitmap(w, h, config)
+        val canvas = Canvas(bitmap)
+        this.setBounds(0, 0, w, h)
+        this.draw(canvas)
+        return bitmap
+    }
+
+    private fun Bitmap.addShadow(
+        fromColor: Int, toColor: Int, percent: Float,
+        vararg orientation: GradientDrawable.Orientation
+    ): Bitmap {
+        orientation.forEach {
+            val mBackShadowColors = intArrayOf(fromColor, toColor)
+            val mBackShadowDrawableLR = GradientDrawable(it, mBackShadowColors)
+            val bound = Rect(0, 0, width, height)
+            val percentHeight = (height * percent).roundToInt()
+            val percentWidth = (width * percent).roundToInt()
+
+            when (it) {
+                GradientDrawable.Orientation.TOP_BOTTOM -> bound.set(0, 0, width, percentHeight)
+                GradientDrawable.Orientation.RIGHT_LEFT -> bound.set(0, 0, percentWidth, height)
+                GradientDrawable.Orientation.BOTTOM_TOP -> bound.set(0, height - percentHeight, width, height)
+                GradientDrawable.Orientation.LEFT_RIGHT -> bound.set(width - percentWidth, 0, width, height)
+                else -> {}
+            }
+            mBackShadowDrawableLR.bounds = bound
+            mBackShadowDrawableLR.gradientType = GradientDrawable.LINEAR_GRADIENT
+            mBackShadowDrawableLR.draw(Canvas(this))
+        }
+        return this
+    }
+
+    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {
+        super.onMeasure(widthMeasureSpec, widthMeasureSpec)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/views/AutoLinearLayout.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/AutoLinearLayout.kt b/app/src/main/java/app/mango/music/views/AutoLinearLayout.kt
new file mode 100644
--- /dev/null	(date 1653791942732)
+++ b/app/src/main/java/app/mango/music/views/AutoLinearLayout.kt	(date 1653791942732)
@@ -0,0 +1,18 @@
+package app.mango.music.views
+
+import android.content.Context
+import android.util.AttributeSet
+import androidx.annotation.AttrRes
+import androidx.appcompat.widget.LinearLayoutCompat
+
+class AutoLinearLayout:LinearLayoutCompat {
+
+    constructor(context: Context) : super(context)
+    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs)
+    constructor(context: Context, attrs: AttributeSet?, @AttrRes defStyleAttr: Int) : super(
+        context, attrs, defStyleAttr)
+
+    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {
+        super.onMeasure(widthMeasureSpec, widthMeasureSpec)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/fetcher/EmbeddedCoverFetcher.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/fetcher/EmbeddedCoverFetcher.kt b/app/src/main/java/app/mango/music/fetcher/EmbeddedCoverFetcher.kt
new file mode 100644
--- /dev/null	(date 1653742719756)
+++ b/app/src/main/java/app/mango/music/fetcher/EmbeddedCoverFetcher.kt	(date 1653742719756)
@@ -0,0 +1,40 @@
+package app.mango.music.fetcher
+
+import androidx.media3.common.MediaItem
+import coil.bitmap.BitmapPool
+import coil.decode.DataSource
+import coil.decode.Options
+import coil.fetch.FetchResult
+import coil.fetch.Fetcher
+import coil.fetch.SourceResult
+import coil.size.Size
+import javax.inject.Inject
+import javax.inject.Singleton
+
+fun MediaItem.getCoverFromMediaItem(): GetCoverFromMediaItem = GetCoverFromMediaItem(this)
+
+class GetCoverFromMediaItem(val mediaItem: MediaItem)
+
+@Singleton
+class EmbeddedCoverFetcher @Inject constructor(
+    private val coverSourceFactory: CoverSourceFactory
+) : Fetcher<GetCoverFromMediaItem> {
+    override suspend fun fetch(
+        pool: BitmapPool,
+        data: GetCoverFromMediaItem,
+        size: Size,
+        options: Options
+    ): FetchResult {
+        val bufferedSource = coverSourceFactory.loadCover(data.mediaItem)
+            ?: throw NullPointerException()
+        return SourceResult(
+            source = bufferedSource,
+            mimeType = null,
+            dataSource = DataSource.DISK
+        )
+    }
+
+    override fun key(data: GetCoverFromMediaItem): String? {
+        return "embedded_cover_${data.mediaItem.mediaId}"
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/fetcher/CoverSourceFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/fetcher/CoverSourceFactory.kt b/app/src/main/java/app/mango/music/fetcher/CoverSourceFactory.kt
new file mode 100644
--- /dev/null	(date 1654938440388)
+++ b/app/src/main/java/app/mango/music/fetcher/CoverSourceFactory.kt	(date 1654938440388)
@@ -0,0 +1,118 @@
+package app.mango.music.fetcher
+
+import android.content.Context
+import android.media.MediaMetadataRetriever
+import android.os.Build
+import androidx.media3.common.MediaItem
+import app.mango.music.audio.getSongData
+import dagger.hilt.android.qualifiers.ApplicationContext
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+import okio.BufferedSource
+import okio.buffer
+import okio.source
+import org.jaudiotagger.audio.AudioFileIO
+import java.io.ByteArrayInputStream
+import java.io.File
+import java.util.concurrent.TimeUnit
+import java.util.logging.Level
+import java.util.logging.Logger
+import javax.inject.Inject
+import javax.inject.Singleton
+
+/**
+ * 使用
+ * https://gitee.com/lalilu/lmusic/
+ */
+interface CoverSource {
+    suspend fun loadCoverBytes(mediaItem: MediaItem): ByteArray?
+    suspend fun loadCover(mediaItem: MediaItem): BufferedSource?
+}
+
+@Singleton
+class CoverSourceFactory @Inject constructor(
+    retrieverCoverSource: RetrieverCoverSource,
+    audioTagCoverSource: AudioTagCoverSource
+) : CoverSource {
+    private val sources: MutableList<CoverSource> = ArrayList()
+
+    init {
+        /**
+         * Android 7.1.1 以下使用MediaMetadataRetriever
+         * 获取到的embeddedPicture转BufferedSource存在莫名阻塞的bug
+         * 故 Android 7.1.1 以下优先使用AudioTag的获取方式
+         */
+        if (Build.VERSION.SDK_INT <= 25) {
+            sources.add(audioTagCoverSource)
+            sources.add(retrieverCoverSource)
+        } else {
+            sources.add(retrieverCoverSource)
+            sources.add(audioTagCoverSource)
+        }
+    }
+
+    override suspend fun loadCoverBytes(mediaItem: MediaItem): ByteArray? =
+        withContext(Dispatchers.IO) {
+            sources.forEach { source ->
+                val bytes = source.loadCoverBytes(mediaItem)
+                if (bytes != null) return@withContext bytes
+            }
+            return@withContext null
+        }
+
+    override suspend fun loadCover(mediaItem: MediaItem): BufferedSource? =
+        withContext(Dispatchers.IO) {
+            sources.forEach { source ->
+                val cover = source.loadCover(mediaItem)
+                if (cover != null) return@withContext cover
+            }
+            return@withContext null
+        }
+}
+
+class RetrieverCoverSource @Inject constructor(
+    @ApplicationContext private val mContext: Context
+) : CoverSource {
+    override suspend fun loadCoverBytes(mediaItem: MediaItem): ByteArray? {
+        val mediaUri = mediaItem.mediaMetadata.mediaUri ?: return null
+        var retriever: MediaMetadataRetriever? = null
+        return try {
+            retriever = MediaMetadataRetriever()
+            retriever.setDataSource(mContext, mediaUri)
+            retriever.embeddedPicture ?: throw NullPointerException()
+        } catch (e: NullPointerException) {
+            null
+        } finally {
+            retriever?.close()
+            retriever?.release()
+        }
+    }
+
+    override suspend fun loadCover(mediaItem: MediaItem): BufferedSource? {
+        val bytes = loadCoverBytes(mediaItem) ?: return null
+        val source = ByteArrayInputStream(bytes).source()
+        source.timeout().timeout(50, TimeUnit.MILLISECONDS)
+        return source.buffer()
+    }
+}
+
+class AudioTagCoverSource @Inject constructor() : CoverSource {
+    override suspend fun loadCoverBytes(mediaItem: MediaItem): ByteArray? {
+        val songData = mediaItem.mediaMetadata.getSongData() ?: return null
+        val file = File(songData)
+        if (!file.exists()) return null
+
+        kotlin.runCatching {
+            Logger.getLogger("org.jaudiotagger").level = Level.OFF
+            return AudioFileIO.read(file)?.tag?.firstArtwork?.binaryData
+        }
+        return null
+    }
+
+    override suspend fun loadCover(mediaItem: MediaItem): BufferedSource? {
+        val bytes = loadCoverBytes(mediaItem) ?: return null
+        val source = ByteArrayInputStream(bytes).source()
+        source.timeout().timeout(50, TimeUnit.MILLISECONDS)
+        return source.buffer()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/fetcher/EmbeddedLyricFetcher.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/fetcher/EmbeddedLyricFetcher.kt b/app/src/main/java/app/mango/music/fetcher/EmbeddedLyricFetcher.kt
new file mode 100644
--- /dev/null	(date 1654938440429)
+++ b/app/src/main/java/app/mango/music/fetcher/EmbeddedLyricFetcher.kt	(date 1654938440429)
@@ -0,0 +1,51 @@
+package app.mango.music.fetcher
+
+import android.annotation.SuppressLint
+import android.content.Context
+import android.text.TextUtils
+import androidx.media3.common.MediaItem
+import app.mango.music.R
+import coil.bitmap.BitmapPool
+import coil.decode.DataSource
+import coil.decode.Options
+import coil.fetch.DrawableResult
+import coil.fetch.FetchResult
+import coil.fetch.Fetcher
+import coil.size.Size
+import dagger.hilt.android.qualifiers.ApplicationContext
+import javax.inject.Inject
+import javax.inject.Singleton
+
+/**
+ * 根据
+ * https://gitee.com/lalilu/lmusic/
+ * 修改
+ */
+@Singleton
+@SuppressLint("UseCompatLoadingForDrawables")
+class EmbeddedLyricFetchers @Inject constructor(
+    @ApplicationContext private val mContext: Context,
+    private val lyricSourceFactory: LyricSourceFactory
+) : Fetcher<MediaItem> {
+    private val lrcIcon = mContext.resources.getDrawable(R.drawable.icon, mContext.theme)
+
+    override suspend fun fetch(
+        pool: BitmapPool,
+        data: MediaItem,
+        size: Size,
+        options: Options
+    ): FetchResult {
+        val pair = lyricSourceFactory.getLyric(data)
+        if (TextUtils.isEmpty(pair?.first)) throw NullPointerException()
+
+        return DrawableResult(
+            drawable = lrcIcon,
+            isSampled = false,
+            dataSource = DataSource.DISK
+        )
+    }
+
+    override fun key(data: MediaItem): String {
+        return "embedded_lyric_${data.mediaId}"
+    }
+}
Index: app/src/main/java/app/mango/music/fetcher/LyricSourceFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/fetcher/LyricSourceFactory.kt b/app/src/main/java/app/mango/music/fetcher/LyricSourceFactory.kt
new file mode 100644
--- /dev/null	(date 1654861760669)
+++ b/app/src/main/java/app/mango/music/fetcher/LyricSourceFactory.kt	(date 1654861760669)
@@ -0,0 +1,119 @@
+package app.mango.music.fetcher
+
+import android.text.TextUtils
+import androidx.media3.common.MediaItem
+import app.mango.music.audio.getSongData
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+import org.jaudiotagger.audio.AudioFileIO
+import org.jaudiotagger.tag.FieldKey
+import java.io.File
+import javax.inject.Inject
+import javax.inject.Singleton
+
+@Singleton
+class LyricSourceFactory @Inject constructor(
+    embeddedLyricSource: EmbeddedLyricSource,
+    localLyricSource: LocalLyricSource
+) {
+    interface LyricSource {
+        suspend fun loadLyric(mediaItem: MediaItem): Pair<String, String?>?
+    }
+
+    private val sources: MutableList<LyricSource> = ArrayList()
+
+    init {
+        sources.add(embeddedLyricSource)
+        sources.add(localLyricSource)
+    }
+
+    suspend fun getLyric(
+        mediaItem: MediaItem,
+        callback: (String?, String?) -> Unit = { _, _ -> }
+    ): Pair<String, String?>? = withContext(Dispatchers.IO) {
+        sources.forEach { source ->
+            val pair = source.loadLyric(mediaItem)
+            if (pair != null) {
+                callback(pair.first, pair.second)
+                return@withContext pair
+            }
+        }
+        callback(null, null)
+        return@withContext null
+    }
+}
+
+@Singleton
+class LyricsSourceFactory @Inject constructor(
+    private val embeddedLyricsSource: EmbeddedLyricsSource
+) {
+    interface LyricsSource {
+        suspend fun loadLyrics(mediaItem: MediaItem): Pair<String, String?>?
+    }
+
+    suspend fun getLyrics(
+        mediaItem: MediaItem,
+        callback: (String, String?) -> Unit = { _, _ -> }
+    ): Pair<String, String?> = withContext(Dispatchers.IO) {
+
+        val pair = embeddedLyricsSource.loadLyrics(mediaItem)
+        if (pair != null) {
+            callback(pair.first, pair.second)
+            return@withContext pair
+        }
+        callback("", null)
+        return@withContext Pair("", null)
+    }
+}
+
+class EmbeddedLyricSource @Inject constructor() : LyricSourceFactory.LyricSource {
+    override suspend fun loadLyric(mediaItem: MediaItem): Pair<String, String?>? =
+        withContext(Dispatchers.IO) {
+            val songData = mediaItem.mediaMetadata.getSongData() ?: return@withContext null
+            val file = File(songData)
+            if (!file.exists()) return@withContext null
+            kotlin.runCatching {
+                //Logger.getLogger("org.jaudiotagger").level = Level.OFF
+                val tag = AudioFileIO.read(file).tag
+                val lyric = tag.getFields(FieldKey.LYRICS)
+                    .run { if (isNotEmpty()) get(0).toString() else null }
+                    ?: return@withContext null
+                return@withContext if (TextUtils.isEmpty(lyric)) null
+                else Pair(lyric, null)
+            }
+            null
+        }
+}
+
+class EmbeddedLyricsSource @Inject constructor() : LyricsSourceFactory.LyricsSource {
+    override suspend fun loadLyrics(mediaItem: MediaItem): Pair<String, String?>? =
+        withContext(Dispatchers.IO) {
+            val songData = mediaItem.mediaMetadata.getSongData() ?: return@withContext null
+            val file = File(songData)
+            if (!file.exists()) return@withContext null
+            kotlin.runCatching {
+                val tag = AudioFileIO.read(file).tag
+                val lyric = tag.getFirst(FieldKey.LYRICS)
+                    .run { ifEmpty { null } }
+                    ?: return@withContext null
+                return@withContext if (TextUtils.isEmpty(lyric)) null
+                else Pair(lyric, null)
+            }
+            null
+        }
+}
+
+class LocalLyricSource @Inject constructor() : LyricSourceFactory.LyricSource {
+    override suspend fun loadLyric(mediaItem: MediaItem): Pair<String, String?>? =
+        withContext(Dispatchers.IO) {
+            val songData = mediaItem.mediaMetadata.getSongData() ?: return@withContext null
+            val path = songData.substring(0, songData.lastIndexOf('.')) + ".lrc"
+            val lrcFile = File(path)
+
+            if (!lrcFile.exists()) return@withContext null
+
+            val lyric = lrcFile.readText()
+            return@withContext if (TextUtils.isEmpty(lyric)) null
+            else Pair(lyric, null)
+        }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/manager/SpManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/manager/SpManager.kt b/app/src/main/java/app/mango/music/manager/SpManager.kt
new file mode 100644
--- /dev/null	(date 1655041052529)
+++ b/app/src/main/java/app/mango/music/manager/SpManager.kt	(date 1655041052529)
@@ -0,0 +1,69 @@
+package app.mango.music.manager
+
+import android.content.Context
+import android.content.SharedPreferences
+import androidx.preference.PreferenceManager
+import kotlin.collections.set
+
+object SpManager {
+    abstract class SpListener<T>(val callback: (T) -> Unit) {
+        fun onUpdate(newValue: T) = callback(newValue)
+    }
+
+    class SpBoolListener(
+        val defaultValue: Boolean = false,
+        callback: (Boolean) -> Unit
+    ) : SpListener<Boolean>(callback)
+
+    class SpFloatListener(
+        val defaultValue: Float = 0f,
+        callback: (Float) -> Unit
+    ) : SpListener<Float>(callback)
+
+    class SpIntListener(
+        val defaultValue: Int = 0,
+        callback: (Int) -> Unit
+    ) : SpListener<Int>(callback)
+
+    class SpStringListener(
+        val defaultValue: String = "",
+        callback: (String) -> Unit
+    ) : SpListener<String>(callback)
+
+    private lateinit var sp: SharedPreferences
+    private val listeners: LinkedHashMap<String, SpListener<out Any>> = linkedMapOf()
+
+    fun init(context: Context) {
+        sp = PreferenceManager.getDefaultSharedPreferences(context).also {
+            it.registerOnSharedPreferenceChangeListener { sp, key ->
+                update(sp, key)
+            }
+        }
+    }
+
+    fun putString(key:String,value:String){
+        sp.edit()?.putString(key,value)?.apply()
+    }
+    fun putInt(key:String,value:Int){
+        sp.edit()?.putInt(key,value)?.apply()
+    }
+
+    fun getString(key: String,def:String):String? = sp.getString(key,def)
+
+    private fun update(sp: SharedPreferences?, key: String) {
+        listeners[key]?.let {
+            when (it) {
+                is SpBoolListener -> it.onUpdate(sp?.getBoolean(key, it.defaultValue) ?: it.defaultValue)
+                is SpFloatListener -> it.onUpdate(sp?.getFloat(key, it.defaultValue) ?: it.defaultValue)
+                is SpIntListener -> it.onUpdate(sp?.getInt(key, it.defaultValue) ?: it.defaultValue)
+                is SpStringListener -> it.onUpdate(sp?.getString(key, it.defaultValue) ?: it.defaultValue)
+            }
+        }
+    }
+
+    fun <K : Any, T : SpListener<K>> listen(key: String, listener: T) {
+        listeners[key] = listener
+        update(sp, key)
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/service/EnhanceBrowser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/service/EnhanceBrowser.kt b/app/src/main/java/app/mango/music/service/EnhanceBrowser.kt
new file mode 100644
--- /dev/null	(date 1653906480843)
+++ b/app/src/main/java/app/mango/music/service/EnhanceBrowser.kt	(date 1653906480843)
@@ -0,0 +1,14 @@
+package app.mango.music.service
+
+import android.net.Uri
+
+interface EnhanceBrowser {
+    fun togglePlay(): Boolean
+    fun playByUri(uri: Uri): Boolean
+    fun playById(mediaId: String): Boolean
+    fun playById(mediaId: String, playWhenReady: Boolean): Boolean
+    fun addToNext(mediaId: String): Boolean
+    fun removeById(mediaId: String): Boolean
+    fun revokeRemove(): Boolean
+    fun moveByDelta(mediaId: String, delta: Int): Boolean
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/drawable/PlayPauseDrawable.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/drawable/PlayPauseDrawable.kt b/app/src/main/java/app/mango/music/drawable/PlayPauseDrawable.kt
new file mode 100644
--- /dev/null	(date 1654506012689)
+++ b/app/src/main/java/app/mango/music/drawable/PlayPauseDrawable.kt	(date 1654506012689)
@@ -0,0 +1,183 @@
+package app.mango.music.drawable
+
+import android.animation.Animator
+import android.animation.ObjectAnimator
+import android.content.Context
+import android.graphics.*
+import android.graphics.drawable.Drawable
+import android.util.Property
+import android.util.TypedValue
+import android.view.animation.DecelerateInterpolator
+import androidx.annotation.AttrRes
+import androidx.core.animation.doOnEnd
+import app.mango.music.R
+import kotlin.math.roundToInt
+
+class PlayPauseDrawable(val context: Context) : Drawable() {
+    private val leftPauseBar = Path()
+    private val rightPauseBar = Path()
+    private val paint = Paint().apply {
+        color = colorControlNormal()
+    }
+    private val pauseBarWidth: Float
+    private val pauseBarHeight: Float
+    private val pauseBarDistance: Float
+    private var width = 0f
+    private var height = 0f
+    private var progress = 0f
+    private var isPlay = false
+    private var isPlaySet = false
+    private var animator: Animator? = null
+
+    private fun colorControlNormal(): Int = getColorForAttrId(androidx.appcompat.R.attr.colorControlNormal)
+
+    private fun getColorForAttrId(@AttrRes resId:Int):Int{
+        val typedValue = TypedValue()
+        val a = context.obtainStyledAttributes(typedValue.data, intArrayOf(resId))
+        val color = a.getColor(0, Color.BLUE)
+        a.recycle()
+        return color
+    }
+
+    override fun onBoundsChange(bounds: Rect) {
+        super.onBoundsChange(bounds)
+        if (bounds.width() > 0 && bounds.height() > 0) {
+            width = bounds.width().toFloat()
+            height = bounds.height().toFloat()
+        }
+    }
+
+    override fun draw(canvas: Canvas) {
+        leftPauseBar.rewind()
+        rightPauseBar.rewind()
+        val barDist = leap(pauseBarDistance, 0f, progress)
+        val rawBarWidth = leap(pauseBarWidth, pauseBarHeight / 1.75f, progress)
+        val barWidth = if (progress == 1f) rawBarWidth.roundToInt().toFloat() else rawBarWidth
+        val firstBarTopLeft = leap(0f, barWidth, progress)
+        val secondBarTopRight = leap(2f * barWidth + barDist, barWidth + barDist, progress)
+        leftPauseBar.moveTo(0f, 0f)
+        leftPauseBar.lineTo(firstBarTopLeft, -pauseBarHeight)
+        leftPauseBar.lineTo(barWidth, -pauseBarHeight)
+        leftPauseBar.lineTo(barWidth, 0f)
+        leftPauseBar.close()
+        rightPauseBar.moveTo(barWidth + barDist, 0f)
+        rightPauseBar.lineTo(barWidth + barDist, -pauseBarHeight)
+        rightPauseBar.lineTo(secondBarTopRight, -pauseBarHeight)
+        rightPauseBar.lineTo(2 * barWidth + barDist, 0f)
+        rightPauseBar.close()
+        val saveCount = canvas.save()
+        canvas.translate(leap(0f, pauseBarHeight / 8f, progress), 0f)
+        val rotationProgress = if (isPlay) 1f - progress else progress
+        val startingRotation = if (isPlay) 90f else 0f
+        canvas.rotate(
+            leap(startingRotation, startingRotation + 90f, rotationProgress),
+            width / 2f,
+            height / 2f
+        )
+        canvas.translate(
+            (width / 2f - (2f * barWidth + barDist) / 2f).roundToInt().toFloat(),
+            (height / 2f + pauseBarHeight / 2f).roundToInt().toFloat()
+        )
+        canvas.drawPath(leftPauseBar, paint)
+        canvas.drawPath(rightPauseBar, paint)
+        canvas.restoreToCount(saveCount)
+    }
+
+    private val pausePlayAnimator: Animator
+        get() {
+            isPlaySet = !isPlaySet
+            return ObjectAnimator.ofFloat(
+                this,
+                PROGRESS,
+                if (isPlay) 1f else 0f,
+                if (isPlay) 0f else 1f
+            ).apply {
+                doOnEnd { isPlay = !isPlay }
+            }
+        }
+
+    private fun setProgress(progress: Float) {
+        this.progress = progress
+        invalidateSelf()
+    }
+
+    private fun getProgress(): Float = progress
+
+    override fun setAlpha(alpha: Int) {
+        paint.alpha = alpha
+        invalidateSelf()
+    }
+
+    override fun setColorFilter(cf: ColorFilter?) {
+        paint.colorFilter = cf
+        invalidateSelf()
+    }
+
+    override fun setTint(color:Int){
+        paint.color = color
+        invalidateSelf()
+    }
+
+    override fun getOpacity(): Int = PixelFormat.TRANSLUCENT
+
+    fun setPlay(animate: Boolean) {
+        if (animate) {
+            if (!isPlaySet) togglePlayPause()
+        } else {
+            isPlaySet = true
+            isPlay = true
+            setProgress(1f)
+        }
+    }
+
+    fun setPause(animate: Boolean) {
+        if (animate) {
+            if (isPlaySet) {
+                togglePlayPause()
+            }
+        } else {
+            isPlaySet = false
+            isPlay = false
+            setProgress(0f)
+        }
+    }
+
+    private fun togglePlayPause() {
+        animator?.cancel()
+        animator = pausePlayAnimator
+        animator?.let{
+            it.interpolator = DecelerateInterpolator()
+            it.duration = PLAY_PAUSE_ANIMATION_DURATION
+            it.start()
+        }
+    }
+
+    companion object {
+        private const val PLAY_PAUSE_ANIMATION_DURATION: Long = 250
+        private val PROGRESS: Property<PlayPauseDrawable, Float> =
+            object : Property<PlayPauseDrawable, Float>(
+                Float::class.java, "progress"
+            ) {
+                override fun get(d: PlayPauseDrawable): Float {
+                    return d.getProgress()
+                }
+
+                override fun set(d: PlayPauseDrawable, value: Float) {
+                    d.setProgress(value)
+                }
+            }
+
+        private fun leap(a: Float, b: Float, t: Float): Float {
+            return a + (b - a) * t
+        }
+    }
+
+    init {
+        val res = context.resources
+        paint.isAntiAlias = true
+        paint.style = Paint.Style.FILL
+        pauseBarWidth = res.getDimensionPixelSize(R.dimen.pause_bar_width).toFloat()
+        pauseBarHeight = res.getDimensionPixelSize(R.dimen.pause_bar_height).toFloat()
+        pauseBarDistance = res.getDimensionPixelSize(R.dimen.pause_bar_distance).toFloat()
+    }
+}
Index: app/src/main/java/app/mango/music/drawable/AutoMirrorDrawable.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/drawable/AutoMirrorDrawable.kt b/app/src/main/java/app/mango/music/drawable/AutoMirrorDrawable.kt
new file mode 100644
--- /dev/null	(date 1654496088569)
+++ b/app/src/main/java/app/mango/music/drawable/AutoMirrorDrawable.kt	(date 1654496088569)
@@ -0,0 +1,50 @@
+package app.mango.music.drawable
+
+import android.annotation.SuppressLint
+import android.graphics.Canvas
+import android.graphics.Rect
+import android.graphics.drawable.Drawable
+import android.view.View
+import androidx.appcompat.graphics.drawable.DrawableWrapper
+import androidx.core.graphics.drawable.DrawableCompat
+
+@SuppressLint("RestrictedApi")
+class AutoMirrorDrawable(drawable: Drawable) : DrawableWrapper(drawable) {
+    override fun draw(canvas: Canvas) {
+        if (needMirroring()) {
+            val centerX = bounds.exactCenterX()
+            canvas.scale(-1f, 1f, centerX, 0f)
+            super.draw(canvas)
+            canvas.scale(-1f, 1f, centerX, 0f)
+        } else {
+            super.draw(canvas)
+        }
+    }
+
+    override fun onLayoutDirectionChanged(layoutDirection: Int): Boolean {
+        super.onLayoutDirectionChanged(layoutDirection)
+
+        return true
+    }
+
+    override fun isAutoMirrored(): Boolean = true
+
+    private fun needMirroring(): Boolean = layoutDirectionCompat == View.LAYOUT_DIRECTION_RTL
+
+    override fun getPadding(padding: Rect): Boolean {
+        val hasPadding = super.getPadding(padding)
+        if (needMirroring()) {
+            val paddingStart = padding.left
+            val paddingEnd = padding.right
+            padding.left = paddingEnd
+            padding.right = paddingStart
+        }
+        return hasPadding
+    }
+
+    private var Drawable.layoutDirectionCompat: Int
+        get() = DrawableCompat.getLayoutDirection(this)
+        set(value) {
+            DrawableCompat.setLayoutDirection(this, value)
+        }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/viewmodel/SaveFavoriteUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/viewmodel/SaveFavoriteUseCase.kt b/app/src/main/java/app/mango/music/viewmodel/SaveFavoriteUseCase.kt
new file mode 100644
--- /dev/null	(date 1653821180655)
+++ b/app/src/main/java/app/mango/music/viewmodel/SaveFavoriteUseCase.kt	(date 1653821180655)
@@ -0,0 +1,11 @@
+package app.mango.music.viewmodel
+
+import app.mango.music.data.MusicDao
+import app.mango.music.data.MusicFavorite
+import javax.inject.Inject
+
+class SaveFavoriteUseCase @Inject constructor(
+    private val dao: MusicDao
+) {
+    suspend operator fun invoke(musicFavorite: MusicFavorite) = dao.save(musicFavorite)
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/viewmodel/QueryFavoriteUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/viewmodel/QueryFavoriteUseCase.kt b/app/src/main/java/app/mango/music/viewmodel/QueryFavoriteUseCase.kt
new file mode 100644
--- /dev/null	(date 1653820260348)
+++ b/app/src/main/java/app/mango/music/viewmodel/QueryFavoriteUseCase.kt	(date 1653820260348)
@@ -0,0 +1,10 @@
+package app.mango.music.viewmodel
+
+import app.mango.music.data.MusicDao
+import javax.inject.Inject
+
+class QueryFavoriteUseCase @Inject constructor(
+    private val dao: MusicDao
+) {
+    operator fun invoke() = dao.getFavorites()
+}
\ No newline at end of file
Index: app/src/test/java/app/mango/music/ExampleUnitTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/app/mango/music/ExampleUnitTest.kt b/app/src/test/java/app/mango/music/ExampleUnitTest.kt
new file mode 100644
--- /dev/null	(date 1653569773419)
+++ b/app/src/test/java/app/mango/music/ExampleUnitTest.kt	(date 1653569773419)
@@ -0,0 +1,17 @@
+package app.mango.music
+
+import org.junit.Test
+
+import org.junit.Assert.*
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * See [testing documentation](http://d.android.com/tools/testing).
+ */
+class ExampleUnitTest {
+    @Test
+    fun addition_isCorrect() {
+        assertEquals(4, 2 + 2)
+    }
+}
\ No newline at end of file
Index: app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/.gitignore b/app/.gitignore
new file mode 100644
--- /dev/null	(date 1653569772794)
+++ b/app/.gitignore	(date 1653569772794)
@@ -0,0 +1,1 @@
+/build
\ No newline at end of file
Index: app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/proguard-rules.pro b/app/proguard-rules.pro
new file mode 100644
--- /dev/null	(date 1653569772870)
+++ b/app/proguard-rules.pro	(date 1653569772870)
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
\ No newline at end of file
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
--- /dev/null	(date 1653569772256)
+++ b/gradlew.bat	(date 1653569772256)
@@ -0,0 +1,89 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
--- /dev/null	(date 1654946569800)
+++ b/gradle.properties	(date 1654946569800)
@@ -0,0 +1,23 @@
+# Project-wide Gradle settings.
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+# AndroidX package structure to make it clearer which packages are bundled with the
+# Android operating system, and which are packaged with your app"s APK
+# https://developer.android.com/topic/libraries/support-library/androidx-rn
+android.useAndroidX=true
+# Kotlin code style for this project: "official" or "obsolete":
+kotlin.code.style=official
+# Enables namespacing of each library's R class so that its R class includes only the
+# resources declared in the library itself and none from the library's dependencies,
+# thereby reducing the size of the R class for that library
+android.nonTransitiveRClass=true
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1653569772215)
+++ b/.gitignore	(date 1653569772215)
@@ -0,0 +1,15 @@
+*.iml
+.gradle
+/local.properties
+/.idea/caches
+/.idea/libraries
+/.idea/modules.xml
+/.idea/workspace.xml
+/.idea/navEditor.xml
+/.idea/assetWizardSettings.xml
+.DS_Store
+/build
+/captures
+.externalNativeBuild
+.cxx
+local.properties
Index: app/src/main/java/app/mango/music/ui/settings/ListSettingsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/settings/ListSettingsFragment.kt b/app/src/main/java/app/mango/music/ui/settings/ListSettingsFragment.kt
new file mode 100644
--- /dev/null	(date 1655351240848)
+++ b/app/src/main/java/app/mango/music/ui/settings/ListSettingsFragment.kt	(date 1655351240848)
@@ -0,0 +1,8 @@
+package app.mango.music.ui.settings
+
+import app.mango.music.databinding.MenuBottomSheetDialogLayoutBinding
+
+class ListSettingsFragment: BaseBottomSheetDialog<MenuBottomSheetDialogLayoutBinding>() {
+
+    override fun setLayout(): MenuBottomSheetDialogLayoutBinding = MenuBottomSheetDialogLayoutBinding.inflate(layoutInflater)
+}
\ No newline at end of file
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
new file mode 100644
--- /dev/null	(date 1653569772250)
+++ b/gradlew	(date 1653569772250)
@@ -0,0 +1,185 @@
+#!/usr/bin/env sh
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=`expr $i + 1`
+    done
+    case $i in
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=`save "$@"`
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+exec "$JAVACMD" "$@"
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
--- /dev/null	(date 1653569773233)
+++ b/settings.gradle	(date 1653569773233)
@@ -0,0 +1,16 @@
+pluginManagement {
+    repositories {
+        gradlePluginPortal()
+        google()
+        mavenCentral()
+    }
+}
+dependencyResolutionManagement {
+    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
+    repositories {
+        google()
+        mavenCentral()
+    }
+}
+rootProject.name = "Mango"
+include ':app'
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1653569775056)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1653569775056)
@@ -0,0 +1,6 @@
+#Thu May 26 20:56:15 CST 2022
+distributionBase=GRADLE_USER_HOME
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.3.3-bin.zip
+distributionPath=wrapper/dists
+zipStorePath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
Index: app/src/main/res/anim/enter_out.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/anim/enter_out.xml b/app/src/main/res/anim/enter_out.xml
new file mode 100644
--- /dev/null	(date 1651671582000)
+++ b/app/src/main/res/anim/enter_out.xml	(date 1651671582000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <translate android:fromXDelta="-100%p" android:toXDelta="0"
+        android:duration="300"/>
+</set>
\ No newline at end of file
Index: app/src/main/res/values-v29/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-v29/themes.xml b/app/src/main/res/values-v29/themes.xml
new file mode 100644
--- /dev/null	(date 1654696439416)
+++ b/app/src/main/res/values-v29/themes.xml	(date 1654696439416)
@@ -0,0 +1,9 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+
+    <style name="Theme" parent="Base.Theme">
+        <!-- Transparent system bars for edge-to-edge. -->
+        <item name="android:navigationBarColor">@android:color/transparent</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+        <item name="android:windowLightStatusBar">?attr/isLightTheme</item>
+    </style>
+</resources>
\ No newline at end of file
Index: app/src/main/res/anim/enter_in.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/anim/enter_in.xml b/app/src/main/res/anim/enter_in.xml
new file mode 100644
--- /dev/null	(date 1651671582000)
+++ b/app/src/main/res/anim/enter_in.xml	(date 1651671582000)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <translate android:fromXDelta="100%p" android:toXDelta="0"
+        android:duration="300"/>
+</set>
\ No newline at end of file
Index: app/src/main/res/anim/exit_out.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/anim/exit_out.xml b/app/src/main/res/anim/exit_out.xml
new file mode 100644
--- /dev/null	(date 1651671582000)
+++ b/app/src/main/res/anim/exit_out.xml	(date 1651671582000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <translate android:fromXDelta="0" android:toXDelta="100%p"
+        android:duration="300"/>
+</set>
\ No newline at end of file
Index: app/src/main/res/anim/exit_in.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/anim/exit_in.xml b/app/src/main/res/anim/exit_in.xml
new file mode 100644
--- /dev/null	(date 1651671582000)
+++ b/app/src/main/res/anim/exit_in.xml	(date 1651671582000)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <translate android:fromXDelta="0" android:toXDelta="-100%p"
+        android:duration="300"/>
+</set>
\ No newline at end of file
Index: app/src/main/res/xml/list_preference.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/list_preference.xml b/app/src/main/res/xml/list_preference.xml
new file mode 100644
--- /dev/null	(date 1654660132252)
+++ b/app/src/main/res/xml/list_preference.xml	(date 1654660132252)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <DropDownPreference
+        app:defaultValue="@string/set_list_filter_sort_def"
+        app:useSimpleSummaryProvider="true"
+        app:entries="@array/set_list_filter_sort_entries"
+        app:entryValues="@array/set_list_filter_sort_value"
+        android:title="@string/set_list_filter_sort"
+        app:key="@string/key_set_list_filter_sort"/>
+    <SeekBarPreference
+        app:summary="@string/set_list_filter_grid_summary"
+        app:showSeekBarValue="true"
+        app:defaultValue="@string/set_list_filter_grid_def"
+        app:min="@integer/set_list_filter_grid_min"
+        android:max="@integer/set_list_filter_grid_max"
+        app:key="@string/key_set_list_filter_grid"
+        app:title="@string/set_list_filter_grid"/>
+</PreferenceScreen>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/settings/ListSettings.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/settings/ListSettings.kt b/app/src/main/java/app/mango/music/ui/settings/ListSettings.kt
new file mode 100644
--- /dev/null	(date 1654608344674)
+++ b/app/src/main/java/app/mango/music/ui/settings/ListSettings.kt	(date 1654608344674)
@@ -0,0 +1,10 @@
+package app.mango.music.ui.settings
+
+import android.os.Bundle
+import app.mango.music.R
+
+class ListSettings:BasePreferenceFragment() {
+    override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
+        setPreferencesFromResource(R.xml.list_preference, rootKey)
+    }
+}
\ No newline at end of file
Index: app/src/main/res/drawable/ic_filter_list.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_filter_list.xml b/app/src/main/res/drawable/ic_filter_list.xml
new file mode 100644
--- /dev/null	(date 1650022900000)
+++ b/app/src/main/res/drawable/ic_filter_list.xml	(date 1650022900000)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M10,18h4v-2h-4v2zM3,6v2h18L21,6L3,6zM6,13h12v-2L6,11v2z"/>
+</vector>
Index: app/src/main/res/layout/menu_bottom_sheet_dialog_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/menu_bottom_sheet_dialog_layout.xml b/app/src/main/res/layout/menu_bottom_sheet_dialog_layout.xml
new file mode 100644
--- /dev/null	(date 1655120587405)
+++ b/app/src/main/res/layout/menu_bottom_sheet_dialog_layout.xml	(date 1655120587405)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.coordinatorlayout.widget.CoordinatorLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <androidx.cardview.widget.CardView
+            app:cardElevation="@dimen/fab_margin"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="@dimen/fab_margin"
+            app:cardCornerRadius="@dimen/fab_margin">
+
+            <fragment
+                android:name="app.mango.music.ui.settings.ListSettings"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:tag="app.mango.music.ui.settings.ListSettings" />
+
+        </androidx.cardview.widget.CardView>
+    </androidx.coordinatorlayout.widget.CoordinatorLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/fetcher/LyricFetcher.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/fetcher/LyricFetcher.kt b/app/src/main/java/app/mango/music/fetcher/LyricFetcher.kt
new file mode 100644
--- /dev/null	(date 1654328021422)
+++ b/app/src/main/java/app/mango/music/fetcher/LyricFetcher.kt	(date 1654328021422)
@@ -0,0 +1,16 @@
+package app.mango.music.fetcher
+
+import androidx.media3.common.MediaItem
+import javax.inject.Inject
+import javax.inject.Singleton
+
+@Singleton
+class LyricsFetcher  @Inject constructor(
+    private val lyricSourceFactory: LyricsSourceFactory
+) {
+
+    suspend fun fetch(
+        data: MediaItem
+    ): Pair<String, String?> = lyricSourceFactory.getLyrics(data)
+
+}
\ No newline at end of file
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
new file mode 100644
--- /dev/null	(date 1655871546120)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1655871546120)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="deploymentTargetDropDown">
+    <targetSelectedWithDropDown>
+      <Target>
+        <type value="QUICK_BOOT_TARGET" />
+        <deviceKey>
+          <Key>
+            <type value="VIRTUAL_DEVICE_PATH" />
+            <value value="C:\Users\Guoy\.android\avd\Pixel_2_API_28.avd" />
+          </Key>
+        </deviceKey>
+      </Target>
+    </targetSelectedWithDropDown>
+    <timeTargetWasSelectedWithDropDown value="2022-06-22T04:16:20.907178200Z" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/main/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/main/MainActivity.kt b/app/src/main/java/app/mango/music/ui/main/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1655870357190)
+++ b/app/src/main/java/app/mango/music/ui/main/MainActivity.kt	(date 1655870357190)
@@ -0,0 +1,296 @@
+package app.mango.music.ui.main
+
+import android.animation.Animator
+import android.animation.AnimatorListenerAdapter
+import android.os.Bundle
+import androidx.core.view.WindowCompat
+import androidx.navigation.findNavController
+import android.view.MenuItem
+import android.view.View
+import androidx.activity.viewModels
+import androidx.annotation.MenuRes
+import androidx.annotation.StringRes
+import androidx.appcompat.widget.Toolbar
+import androidx.fragment.app.Fragment
+import androidx.navigation.NavController
+import androidx.navigation.NavDestination
+import androidx.navigation.NavOptions
+import app.mango.music.R
+import app.mango.music.audio.MusicBox
+import app.mango.music.audio.ReadyWhenState
+import app.mango.music.databinding.ActivityMainBinding
+import app.mango.music.data.BaseMediaSource
+import app.mango.music.data.GlobalData
+import app.mango.music.service.SongBrowser
+import app.mango.music.ui.MusicLibraryFragmentDirections
+import app.mango.music.ui.PlayingFragmentDirections
+import app.mango.music.ui.nav.*
+import app.mango.music.ui.settings.ListSettingsFragment
+import app.mango.music.viewmodel.MusicViewModel
+import app.mango.music.views.PlayStateButton
+import com.google.android.material.transition.MaterialElevationScale
+import com.google.android.material.transition.MaterialFadeThrough
+import com.google.android.material.transition.MaterialSharedAxis
+
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.flow.collect
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@AndroidEntryPoint
+class MainActivity : BaseActivity<ActivityMainBinding>(), Toolbar.OnMenuItemClickListener,
+    NavController.OnDestinationChangedListener {
+
+    companion object {
+        private const val TAG = "MainActivity"
+    }
+
+    override fun setLayout(): ActivityMainBinding = ActivityMainBinding.inflate(layoutInflater)
+
+    @Inject
+    lateinit var mSongBrowser: SongBrowser
+
+    @Inject
+    lateinit var mediaSource: BaseMediaSource
+
+    private var globalMusicBox = MusicBox.MUSIC_LIBRARY
+
+    private val navController: NavController
+        get() = findNavController(R.id.nav_host_fragment_content_main)
+
+    private val currentNavigationFragment: Fragment?
+        get() = supportFragmentManager.findFragmentById(R.id.nav_host_fragment_content_main)
+            ?.childFragmentManager
+            ?.fragments
+            ?.first()
+
+    private val bottomNavDrawer: BottomNavDrawerFragment by lazy(LazyThreadSafetyMode.NONE) {
+        supportFragmentManager.findFragmentById(R.id.bottom_nav_drawer) as BottomNavDrawerFragment
+    }
+    private val musicViewModel: MusicViewModel by viewModels()
+
+    private val navOptions = NavOptions.Builder()
+        .setLaunchSingleTop(true)
+        .setEnterAnim(R.anim.enter_in)
+        .setPopEnterAnim(R.anim.enter_out)
+        .setExitAnim(R.anim.exit_in)
+        .setPopExitAnim(R.anim.exit_out)
+        .build()
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        WindowCompat.setDecorFitsSystemWindows(window, false)
+        super.onCreate(savedInstanceState)
+
+        binding.fab.bind()
+        binding.run {
+            bottomAppBarContentContainer.setOnClickListener {
+                bottomNavDrawer.toggle()
+            }
+            bottomAppBar.setOnMenuItemClickListener(this@MainActivity)
+        }
+        bottomNavDrawer.bind()
+        navController.addOnDestinationChangedListener(this)
+
+        lifecycle.addObserver(mSongBrowser)
+        mediaSource.whenReady { ready ->
+            musicViewModel.whenReady.value = ReadyWhenState(System.currentTimeMillis(), ready)
+        }
+
+        requestPermission {
+            mediaSource.loadSync()
+        }
+
+        repeatWithViewLifecycle {
+            launch {
+                GlobalData.currentIsPlaying.collect {
+                    binding.fab.setInfinite(it)
+                }
+            }
+        }
+    }
+
+    private fun PlayStateButton.bind(){
+        setShowMotionSpecResource(R.animator.fab_show)
+        setHideMotionSpecResource(R.animator.fab_hide)
+        setOnClickListener {
+            navigateToPlaying()
+        }
+    }
+
+    private fun BottomNavDrawerFragment.bind() {
+        addOnSlideAction(HalfClockwiseRotateSlideAction(binding.bottomAppBarChevron))
+        addOnSlideAction(AlphaSlideAction(binding.bottomAppBarTitle, true))
+        addOnStateChangedAction(
+            ShowHideFabStateAction(
+                binding.fab, navController, intArrayOf(
+                    R.id.search_fragment, R.id.settings_fragment, R.id.playing_fragment
+                )
+            )
+        )
+        addOnStateChangedAction(ChangeSettingsMenuStateAction { showSettings ->
+            binding.bottomAppBar.replaceMenu(
+                if (showSettings) {
+                    R.menu.bottom_app_bar_settings_menu
+                } else {
+                    getBottomAppBarMenuForDestination()
+                }
+            )
+        })
+
+        addNavigationListener { id, titleId, _ ->
+            binding.bottomAppBarTitle.setText(titleId)
+            when (id) {
+                R.id.to_style -> navigateToStyle()
+                else -> navigateToHome(
+                    titleId, when (id) {
+                        R.id.to_album -> MusicBox.ALBUM
+                        R.id.to_artist -> MusicBox.ARTIST
+                        R.id.to_favorite -> MusicBox.FAVORITE
+                        else -> MusicBox.MUSIC_LIBRARY
+                    }
+                )
+            }
+        }
+    }
+
+    private fun navigateToHome(@StringRes titleRes: Int, musicBox: MusicBox) {
+        binding.bottomAppBarTitle.text = getString(titleRes)
+        globalMusicBox = musicBox
+        currentNavigationFragment?.apply {
+            exitTransition = MaterialFadeThrough().apply {
+                duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+            }
+        }
+        val directions = MusicLibraryFragmentDirections.actionGlobalHomeFragment(musicBox)
+        navController.navigate(directions)
+    }
+
+    private fun setBottomAppBarForSearch() {
+        hideBottomAppBar()
+        binding.fab.hide()
+    }
+
+    private fun navigateToSearch() {
+        bottomNavDrawer.close()
+        currentNavigationFragment?.apply {
+            exitTransition = MaterialSharedAxis(MaterialSharedAxis.Z, true).apply {
+                duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+            }
+            reenterTransition = MaterialSharedAxis(MaterialSharedAxis.Z, false).apply {
+                duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+            }
+        }
+        navController.navigate(R.id.search_fragment)
+    }
+
+    private fun navigateToSettings() {
+        bottomNavDrawer.close()
+        currentNavigationFragment?.apply {
+            exitTransition = MaterialSharedAxis(MaterialSharedAxis.Z, true).apply {
+                duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+            }
+            reenterTransition = MaterialSharedAxis(MaterialSharedAxis.Z, false).apply {
+                duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+            }
+        }
+        navController.navigate(R.id.settings_fragment)
+    }
+
+    private fun navigateToStyle() {
+        bottomNavDrawer.close()
+        currentNavigationFragment?.apply {
+            exitTransition = MaterialElevationScale(false).apply {
+                duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+            }
+            reenterTransition = MaterialElevationScale(true).apply {
+                duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+            }
+        }
+        navController.navigate(R.id.style_fragment)
+    }
+
+    private fun navigateToPlaying() {
+        bottomNavDrawer.close()
+        currentNavigationFragment?.apply {
+            exitTransition = null
+            reenterTransition = null
+        }
+        navController.navigate(
+            PlayingFragmentDirections.mainToPlaying(),
+            navOptions
+        )
+    }
+
+    @MenuRes
+    private fun getBottomAppBarMenuForDestination(): Int {
+        val dest = navController.currentDestination!!
+        return when (dest.id) {
+            R.id.detail_fragment -> R.menu.bottom_app_bar_detail_menu
+            else -> R.menu.bottom_app_bar_home_menu
+        }
+    }
+
+    private fun setBottomAppBarForHome() {
+        binding.run {
+            fab.setImageState(intArrayOf(-android.R.attr.state_activated), true)
+            bottomAppBar.visibility = View.VISIBLE
+            bottomAppBarTitle.visibility = View.VISIBLE
+            bottomAppBar.performShow()
+            fab.show()
+        }
+    }
+
+    private fun setBottomAppBarForDetail() {
+        binding.run {
+            fab.setImageState(intArrayOf(android.R.attr.state_activated), true)
+            bottomAppBar.visibility = View.VISIBLE
+            bottomAppBarTitle.visibility = View.VISIBLE
+            bottomAppBar.performShow()
+            fab.show()
+        }
+    }
+
+    private fun hideBottomAppBar() {
+        binding.run {
+            bottomAppBar.performHide()
+            bottomAppBar.animate().setListener(object : AnimatorListenerAdapter() {
+                var isCanceled = false
+                override fun onAnimationEnd(animation: Animator?) {
+                    if (isCanceled) return
+
+                    bottomAppBar.visibility = View.GONE
+                    fab.visibility = View.INVISIBLE
+                }
+
+                override fun onAnimationCancel(animation: Animator?) {
+                    isCanceled = true
+                }
+            })
+        }
+    }
+
+    override fun onMenuItemClick(item: MenuItem): Boolean {
+        when (item.itemId) {
+            R.id.menu_search -> navigateToSearch()
+            R.id.menu_settings -> navigateToSettings()
+            R.id.menu_filters -> ListSettingsFragment()
+                .show(supportFragmentManager, null)
+        }
+        return true
+    }
+
+    override fun onDestinationChanged(
+        controller: NavController,
+        destination: NavDestination,
+        arguments: Bundle?
+    ) {
+        binding.bottomAppBar.replaceMenu(getBottomAppBarMenuForDestination())
+        when (destination.id) {
+            R.id.search_fragment, R.id.settings_fragment, R.id.playing_fragment -> setBottomAppBarForSearch()
+            R.id.detail_fragment -> setBottomAppBarForDetail()
+            else -> {
+                setBottomAppBarForHome()
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/row_music.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/row_music.xml b/app/src/main/res/layout/row_music.xml
new file mode 100644
--- /dev/null	(date 1653971737314)
+++ b/app/src/main/res/layout/row_music.xml	(date 1653971737314)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+    <data>
+        <variable
+            name="media"
+            type="androidx.media3.common.MediaItem" />
+    </data>
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:clipToPadding="false"
+        android:padding="8dp">
+
+        <ImageView
+            app:loadCover="@{media}"
+            android:id="@+id/imageAlbumArt"
+            android:layout_width="200dp"
+            android:layout_height="250dp"
+            android:scaleType="centerCrop"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent" />
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+
+</layout>
Index: app/src/main/res/drawable/ic_share.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_share.xml b/app/src/main/res/drawable/ic_share.xml
new file mode 100644
--- /dev/null	(date 1650024122000)
+++ b/app/src/main/res/drawable/ic_share.xml	(date 1650024122000)
@@ -0,0 +1,25 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M18,5m-1,0a1,1 0,1 1,2 0a1,1 0,1 1,-2 0"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M6,12m-1,0a1,1 0,1 1,2 0a1,1 0,1 1,-2 0"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M18,19.02m-1,0a1,1 0,1 1,2 0a1,1 0,1 1,-2 0"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M18,16.08c-0.76,0 -1.44,0.3 -1.96,0.77L8.91,12.7c0.05,-0.23 0.09,-0.46 0.09,-0.7s-0.04,-0.47 -0.09,-0.7l7.05,-4.11c0.54,0.5 1.25,0.81 2.04,0.81 1.66,0 3,-1.34 3,-3s-1.34,-3 -3,-3 -3,1.34 -3,3c0,0.24 0.04,0.47 0.09,0.7L8.04,9.81C7.5,9.31 6.79,9 6,9c-1.66,0 -3,1.34 -3,3s1.34,3 3,3c0.79,0 1.5,-0.31 2.04,-0.81l7.12,4.16c-0.05,0.21 -0.08,0.43 -0.08,0.65 0,1.61 1.31,2.92 2.92,2.92s2.92,-1.31 2.92,-2.92c0,-1.61 -1.31,-2.92 -2.92,-2.92zM18,4c0.55,0 1,0.45 1,1s-0.45,1 -1,1 -1,-0.45 -1,-1 0.45,-1 1,-1zM6,13c-0.55,0 -1,-0.45 -1,-1s0.45,-1 1,-1 1,0.45 1,1 -0.45,1 -1,1zM18,20.02c-0.55,0 -1,-0.45 -1,-1s0.45,-1 1,-1 1,0.45 1,1 -0.45,1 -1,1z"/>
+</vector>
Index: app/src/main/res/drawable/ic_shuffle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_shuffle.xml b/app/src/main/res/drawable/ic_shuffle.xml
new file mode 100644
--- /dev/null	(date 1650023916000)
+++ b/app/src/main/res/drawable/ic_shuffle.xml	(date 1650023916000)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M20,4h-5.5l2.04,2.04L4,18.59 5.41,20 17.96,7.46 20,9.5zM5.41,4L4,5.41l5.17,5.17 1.42,-1.41zM20,20v-5.5l-2.04,2.04 -3.13,-3.13 -1.41,1.41 3.13,3.13L14.5,20z"/>
+</vector>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1655351287093)
+++ b/.idea/misc.xml	(date 1655351287093)
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DesignSurface">
+    <option name="filePathToZoomLevelMap">
+      <map>
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/avd_edit_to_reply.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/avd_reply_to_edit.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/bottom_app_bar_title_foreground.xml" value="0.1185" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/divider.xml" value="0.121" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_account.xml" value="0.159" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_album.xml" value="0.159" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_arrow_back.xml" value="0.157" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_arrow_up.xml" value="0.157" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_close.xml" value="0.159" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_delete.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_favorite.xml" value="0.159" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_grid_view.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_library_music.xml" value="0.159" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_mango.xml" value="0.157" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_music.xml" value="0.159" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_pause.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_play.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_playlist_add.xml" value="0.1775" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_queue.xml" value="0.1775" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_radio.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_repeat.xml" value="0.1775" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_reply_all.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_search.xml" value="0.157" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_settings.xml" value="0.157" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_skip_next.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_skip_previous.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/ic_stop.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/play_button_background.xml" value="0.121" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/seekbar_track.xml" value="0.1805" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/drawable/sheet_expand.xml" value="0.121" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/activity_main.xml" value="0.15896739130434784" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/bottom_sheet_effect_dialog_layout.xml" value="0.20833333333333334" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/content_main.xml" value="0.15896739130434784" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_album.xml" value="0.16394927536231885" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_artist.xml" value="0.16394927536231885" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_bottom_nav_drawer.xml" value="0.10729166666666666" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_detail.xml" value="0.16394927536231885" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_display.xml" value="0.11197916666666667" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_drawer.xml" value="0.15896739130434784" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_home.xml" value="0.10729166666666666" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_music_library.xml" value="0.2151268115942029" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_playing.xml" value="0.2151268115942029" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_playlist.xml" value="0.2151268115942029" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_search.xml" value="0.15896739130434784" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_settings.xml" value="0.2151268115942029" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_style.xml" value="0.2151268115942029" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/fragment_sync.xml" value="0.10989583333333333" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/item_album.xml" value="0.2151268115942029" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/item_artist.xml" value="0.2151268115942029" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/item_lyric.xml" value="0.2151268115942029" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/menu_bottom_sheet_dialog_layout.xml" value="0.16621376811594202" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/music_item_layout.xml" value="0.2" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/navigation_divider.xml" value="0.15896739130434784" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/navigation_header.xml" value="0.15896739130434784" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/navigation_item.xml" value="0.15896739130434784" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/row_music.xml" value="0.10989583333333333" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/text_switcher.xml" value="0.10989583333333333" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/view_pager_cover.xml" value="0.20833333333333334" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/layout/view_pager_lyric.xml" value="0.2913625304136253" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/menu/bottom_app_bar_detail_menu.xml" value="0.24947916666666667" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/menu/bottom_app_bar_home_menu.xml" value="0.24583333333333332" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/menu/bottom_app_bar_settings_menu.xml" value="0.24583333333333332" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/menu/bottom_sheet_fi.xml" value="0.24947916666666667" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/menu/menu_main.xml" value="0.24583333333333332" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/xml/audio_effect_preferences.xml" value="0.17798913043478262" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/xml/list_preference.xml" value="0.16621376811594202" />
+        <entry key="..\:/Android Project/MangoLayerCake2/app/src/main/res/xml/root_preferences.xml" value="0.16621376811594202" />
+      </map>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_repeat.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_repeat.xml b/app/src/main/res/drawable/ic_repeat.xml
new file mode 100644
--- /dev/null	(date 1655020234274)
+++ b/app/src/main/res/drawable/ic_repeat.xml	(date 1655020234274)
@@ -0,0 +1,11 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:pathData="M13,15L13,9L12,9L10,10L10,11L11.5,11L11.5,15M17,17L7,17L7,14L3,18L7,22L7,19L19,19L19,13L17,13M7,7L17,7L17,10L21,6L17,2L17,5L5,5L5,11L7,11L7,7Z"
+      android:strokeLineJoin="round"
+      android:fillColor="@android:color/white"/>
+</vector>
Index: app/src/main/res/layout/fragment_display.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_display.xml b/app/src/main/res/layout/fragment_display.xml
new file mode 100644
--- /dev/null	(date 1654924085561)
+++ b/app/src/main/res/layout/fragment_display.xml	(date 1654924085561)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <data>
+        <variable
+            name="media"
+            type="androidx.media3.common.MediaItem" />
+    </data>
+
+    <androidx.appcompat.widget.LinearLayoutCompat
+        android:orientation="vertical"
+        android:gravity="center"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <androidx.viewpager.widget.ViewPager
+            android:id="@+id/view_pager"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"/>
+
+        <app.mango.music.views.IndicatorView
+            android:id="@+id/indicator"
+            android:layout_width="wrap_content"
+            android:layout_height="?actionBarSize"/>
+
+    </androidx.appcompat.widget.LinearLayoutCompat>
+</layout>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/DisplayFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/DisplayFragment.kt b/app/src/main/java/app/mango/music/ui/DisplayFragment.kt
new file mode 100644
--- /dev/null	(date 1654925439472)
+++ b/app/src/main/java/app/mango/music/ui/DisplayFragment.kt	(date 1654925439472)
@@ -0,0 +1,42 @@
+package app.mango.music.ui
+
+import android.os.Bundle
+import android.view.View
+import app.mango.music.adapters.ViewPagerAdapter
+import app.mango.music.data.GlobalData
+import app.mango.music.databinding.FragmentDisplayBinding
+import kotlinx.coroutines.flow.collect
+import kotlinx.coroutines.launch
+
+class DisplayFragment:BaseFragment<FragmentDisplayBinding>() {
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        val viewAdapter = ViewPagerAdapter(binding.root.context){
+            mediaBrowser.browser?.seekTo(it)
+            if(mediaBrowser.browser?.isPlaying != true)
+                mediaBrowser.togglePlay()
+        }
+        binding.viewPager.adapter = viewAdapter
+        binding.indicator.setViewPager(binding.viewPager)
+
+        repeatWithViewLifecycle {
+            launch {
+                GlobalData.currentMediaItem.collect {
+                    it?.let {
+                        viewAdapter.updateMediaItem(it)
+                    }
+                }
+            }
+            launch {
+                GlobalData.currentPosition.collect {
+                    viewAdapter.updatePosition(it)
+                }
+            }
+        }
+
+    }
+
+    override fun setBinding(): FragmentDisplayBinding = FragmentDisplayBinding.inflate(layoutInflater)
+}
\ No newline at end of file
Index: app/src/main/res/layout/view_pager_cover.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/view_pager_cover.xml b/app/src/main/res/layout/view_pager_cover.xml
new file mode 100644
--- /dev/null	(date 1655871783341)
+++ b/app/src/main/res/layout/view_pager_cover.xml	(date 1655871783341)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <data>
+        <variable
+            name="media"
+            type="androidx.media3.common.MediaItem" />
+    </data>
+
+    <androidx.appcompat.widget.LinearLayoutCompat
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center"
+        android:padding="@dimen/fab_margin">
+
+        <androidx.cardview.widget.CardView
+            app:cardCornerRadius="@dimen/fab_margin"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
+
+            <app.mango.music.views.CoverImageView
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                app:loadCover="@{media}" />
+        </androidx.cardview.widget.CardView>
+
+    </androidx.appcompat.widget.LinearLayoutCompat>
+
+</layout>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/adapters/ViewPagerAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/adapters/ViewPagerAdapter.kt b/app/src/main/java/app/mango/music/adapters/ViewPagerAdapter.kt
new file mode 100644
--- /dev/null	(date 1654927615836)
+++ b/app/src/main/java/app/mango/music/adapters/ViewPagerAdapter.kt	(date 1654927615836)
@@ -0,0 +1,61 @@
+package app.mango.music.adapters
+
+import android.content.Context
+import android.view.View
+import android.view.ViewGroup
+import androidx.media3.common.MediaItem
+import androidx.viewbinding.ViewBinding
+import androidx.viewpager.widget.PagerAdapter
+import app.mango.music.databinding.ViewPagerCoverBinding
+import app.mango.music.databinding.ViewPagerLyricBinding
+import app.mango.music.utils.layoutInflater
+
+class ViewPagerAdapter(context: Context,val unit:((Long)->Unit)):PagerAdapter() {
+
+    private val layoutInflater = context.layoutInflater
+    private val views = mutableListOf<ViewBinding>()
+
+    private fun <T:ViewBinding> MutableList<T>.lyric():ViewPagerLyricBinding
+        = this[1] as ViewPagerLyricBinding
+
+    private fun <T:ViewBinding> MutableList<T>.cover():ViewPagerCoverBinding
+        = this[0] as ViewPagerCoverBinding
+
+    init {
+        views.add(ViewPagerCoverBinding.inflate(layoutInflater))
+        views.add(ViewPagerLyricBinding.inflate(layoutInflater).apply {
+            lrcView.setOnPlayClickListener{
+                unit.invoke(it)
+                true
+            }
+        })
+    }
+
+    fun updatePosition(position:Long) = views.lyric().lrcView.updateTime(position)
+
+    fun updateMediaItem(mediaItem: MediaItem){
+        views.run {
+            cover().apply {
+                media = mediaItem
+                executePendingBindings()
+            }
+            lyric().apply {
+                media = mediaItem
+                executePendingBindings()
+            }
+        }
+    }
+
+    override fun getCount(): Int = views.size
+
+    override fun isViewFromObject(view: View, obj: Any): Boolean = view == obj
+
+    override fun destroyItem(container: ViewGroup, position: Int, obj: Any) {
+        container.removeView(views[position].root)
+    }
+
+    override fun instantiateItem(container: ViewGroup, position: Int): Any {
+        container.addView(views[position].root)
+        return views[position].root
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/view_pager_lyric.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/view_pager_lyric.xml b/app/src/main/res/layout/view_pager_lyric.xml
new file mode 100644
--- /dev/null	(date 1654931621976)
+++ b/app/src/main/res/layout/view_pager_lyric.xml	(date 1654931621976)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <data>
+
+        <variable
+            name="media"
+            type="androidx.media3.common.MediaItem" />
+    </data>
+
+    <androidx.appcompat.widget.LinearLayoutCompat
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <app.mango.music.views.EdgeTransparentView
+            app:edge_position="top|bottom"
+            app:edge_width="@dimen/min_touch_target_size"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+
+            <app.mango.music.views.lrcview.LrcViewKt
+                android:id="@+id/lrc_view"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                app:load_lyric="@{media}"
+                app:lrcCurrentTextColor="?colorPrimary"
+                app:lrcTimelineTextColor="?colorError" />
+        </app.mango.music.views.EdgeTransparentView>
+
+    </androidx.appcompat.widget.LinearLayoutCompat>
+</layout>
\ No newline at end of file
Index: app/src/main/res/drawable/play_button_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/play_button_background.xml b/app/src/main/res/drawable/play_button_background.xml
new file mode 100644
--- /dev/null	(date 1653968157799)
+++ b/app/src/main/res/drawable/play_button_background.xml	(date 1653968157799)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="oval">
+    <solid android:color="?android:windowBackground"/>
+
+</shape>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/manager/AudioEffectManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/manager/AudioEffectManager.kt b/app/src/main/java/app/mango/music/manager/AudioEffectManager.kt
new file mode 100644
--- /dev/null	(date 1655007914660)
+++ b/app/src/main/java/app/mango/music/manager/AudioEffectManager.kt	(date 1655007914660)
@@ -0,0 +1,38 @@
+package app.mango.music.manager
+
+import android.media.audiofx.BassBoost
+import android.media.audiofx.Equalizer
+
+class AudioEffectManager constructor(
+    audioSessionId: Int,
+    initialState: Boolean = true
+) {
+    val equalizer = XEqualizer(Integer.MAX_VALUE, audioSessionId)
+
+    val bassBoost = XBassBoost(Integer.MAX_VALUE, audioSessionId)
+
+    init {
+        bassBoost.enabled = initialState
+        equalizer.enabled = initialState
+    }
+
+    fun release() {
+        equalizer.release()
+        bassBoost.release()
+    }
+
+    inner class XEqualizer(priority: Int, audioSessionId: Int) : Equalizer(priority, audioSessionId)
+
+    inner class XBassBoost(priority: Int, audioSessionId: Int) :
+        BassBoost(priority, audioSessionId) {
+        private val maxRecommendedStrength = 19
+
+        override fun setStrength(strength: Short) {
+            super.setStrength((1000F / maxRecommendedStrength * strength).toInt().toShort())
+        }
+
+        override fun getRoundedStrength(): Short {
+            return (super.getRoundedStrength() / (1000F / maxRecommendedStrength)).toInt().toShort()
+        }
+    }
+}
Index: app/src/main/res/xml/audio_effect_preferences.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/audio_effect_preferences.xml b/app/src/main/res/xml/audio_effect_preferences.xml
new file mode 100644
--- /dev/null	(date 1654854879167)
+++ b/app/src/main/res/xml/audio_effect_preferences.xml	(date 1654854879167)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<PreferenceScreen xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <PreferenceCategory
+        app:initialExpandedChildrenCount="3"
+        app:key="@string/key_set_audio_effect"
+        app:title="@string/set_audio_effect">
+        <SwitchPreferenceCompat
+            app:key="@string/key_set_audio_effect_boost"
+            app:title="@string/set_audio_effect_boost_enable"/>
+        <SeekBarPreference
+            app:dependency="@string/key_set_audio_effect_boost"
+            app:defaultValue="@integer/set_audio_effect_boost_min"
+            app:min="@integer/set_audio_effect_boost_min"
+            android:max="@integer/set_audio_effect_boost_max"
+            app:showSeekBarValue="true"
+            app:title="@string/set_audio_effect_boost_value"
+            app:key="@string/key_set_audio_effect_boost_value"/>
+        <SwitchPreferenceCompat
+            app:key="@string/key_set_audio_effect_enable"
+            app:title="@string/set_audio_effect_enable"/>
+    </PreferenceCategory>
+</PreferenceScreen>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/settings/AudioEffectSettings.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/settings/AudioEffectSettings.kt b/app/src/main/java/app/mango/music/ui/settings/AudioEffectSettings.kt
new file mode 100644
--- /dev/null	(date 1654854268919)
+++ b/app/src/main/java/app/mango/music/ui/settings/AudioEffectSettings.kt	(date 1654854268919)
@@ -0,0 +1,208 @@
+package app.mango.music.ui.settings
+
+import android.media.audiofx.Equalizer
+import android.os.Bundle
+import android.view.View
+import androidx.appcompat.app.AlertDialog
+import androidx.media3.exoplayer.ExoPlayer
+import androidx.preference.*
+import app.mango.music.R
+import app.mango.music.manager.Config
+import app.mango.music.manager.SpManager
+
+class AudioEffectSettings:BasePreferenceFragment() {
+
+    private val seekbars = mutableListOf<BandLevel>()
+
+    override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
+        setPreferencesFromResource(R.xml.audio_effect_preferences,rootKey)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        findPreference<PreferenceCategory>(R.string.key_set_audio_effect)?.run {
+            initBands(this)
+        }
+    }
+
+    private fun initBands(preferenceCategory: PreferenceCategory) {
+
+        val exoPlayer = ExoPlayer.Builder(requireActivity().applicationContext).build()
+        val equalizer = Equalizer(Integer.MAX_VALUE, exoPlayer.audioSessionId)
+
+        val numberFrequencyBands: Short = equalizer.numberOfBands
+        val lowerEqualizerBandLevelMilliBel: Short = equalizer.bandLevelRange[0]
+        val upperEqualizerBandLevelMilliBel: Short = equalizer.bandLevelRange[1]
+
+        for (i in 0 until numberFrequencyBands) {
+            val equalizerBandIndex = i.toShort()
+            val seekbar = SeekBarPreference(preferenceCategory.context).apply {
+                max = upperEqualizerBandLevelMilliBel - lowerEqualizerBandLevelMilliBel
+                title = readableHertz(
+                    equalizer.getCenterFreq(equalizerBandIndex)
+                )
+                key = "${getString(R.string.key_set_audio_effect_enable)}_$i"
+                isIconSpaceReserved = false
+                showSeekBarValue = true
+                this.onPreferenceChangeListener =
+                    Preference.OnPreferenceChangeListener { _, newValue ->
+                        setBandLevel(
+                            i,
+                            (newValue.toString().toInt() + lowerEqualizerBandLevelMilliBel).toShort(),
+                            numberFrequencyBands,
+                            max
+                        )
+                        true
+                    }
+            }
+            val bandLevel = BandLevel(
+                seekbar,
+                equalizerBandIndex,
+                lowerEqualizerBandLevelMilliBel,
+                upperEqualizerBandLevelMilliBel
+            )
+            setProgress(equalizer,bandLevel)
+            seekbars.add(bandLevel)
+            preferenceCategory.addPreference(seekbar)
+        }
+
+        preferenceCategory.addPreference(Preference(preferenceCategory.context).apply {
+            title = getString(R.string.set_audio_effect_reset)
+            onPreferenceClickListener = Preference.OnPreferenceClickListener {
+                resetSeekbar(preferenceCategory)
+                true
+            }
+            isIconSpaceReserved = false
+        })
+
+        initPresets(preferenceCategory,equalizer){
+            updateSeekBars(equalizer)
+        }
+
+        initSeekBersEnable(preferenceCategory)
+        exoPlayer.release()
+    }
+
+    private fun initPresets(preferenceCategory: PreferenceCategory, equalizer: Equalizer, unit:((Short)->Unit)){
+
+        val presetsCount = equalizer.numberOfPresets
+        val displayValue = Array<CharSequence>(presetsCount.toInt()){ "" }
+
+        for (i in 0 until presetsCount) {
+            val preset = i.toShort()
+            displayValue[i] = equalizer.getPresetName(preset)
+        }
+        preferenceCategory.addPreference(ListPreference(preferenceCategory.context).apply {
+            title = getString(R.string.set_audio_effect_presets)
+            key = getString(R.string.key_set_audio_effect_presets)
+            entries = displayValue
+            entryValues = displayValue
+            isIconSpaceReserved = false
+            onPreferenceChangeListener = Preference.OnPreferenceChangeListener { _, newValue ->
+                val dv = newValue.toString()
+                val index = displayValue.indexOf(dv.subSequence(0,dv.length)).toShort()
+                equalizer.usePreset(index)
+                unit.invoke(index)
+                true
+            }
+            summaryProvider = ListPreference.SimpleSummaryProvider.getInstance()
+        })
+    }
+
+    private fun initSeekBersEnable(preferenceCategory: PreferenceCategory){
+        preferenceCategory.addPreference(SwitchPreferenceCompat(preferenceCategory.context).apply {
+            title = getString(R.string.set_audio_effect_seek_enable)
+            key = getString(R.string.key_set_audio_effect_seek_enable)
+            onPreferenceChangeListener = Preference.OnPreferenceChangeListener { _, newValue ->
+                setSeekBarEnable(newValue!=true)
+                true
+            }
+            setSeekBarEnable(
+                !preferenceCategory.sharedPreferences.getBoolean(key,false)
+            )
+            isIconSpaceReserved = false
+        })
+    }
+
+    private fun resetSeekbar(preferenceCategory: PreferenceCategory){
+        AlertDialog.Builder(preferenceCategory.context).apply {
+            setTitle(R.string.set_audio_effect_reset)
+            setMessage(R.string.set_audio_effect_reset_message)
+            setPositiveButton(R.string.set_audio_effect_reset_ok){ _, _ ->
+                seekbars.forEach {
+                    it.seekBarPreference.apply {
+                        value = max / 2
+                        onPreferenceChangeListener.onPreferenceChange(this, max / 2)
+                    }
+                }
+            }
+            setNegativeButton(R.string.set_audio_effect_reset_cancel,null)
+            show()
+        }
+    }
+
+    private fun setSeekBarEnable(isEnable:Boolean){
+        seekbars.forEach {
+            it.seekBarPreference.isEnabled = isEnable
+        }
+    }
+
+    private fun updateSeekBars(equalizer: Equalizer) {
+        val numberFrequencyBands: Short = equalizer.numberOfBands
+        for (i in 0 until numberFrequencyBands) {
+            val equalizerBandIndex = i.toShort()
+            updateSeekBar(equalizer,equalizerBandIndex)
+        }
+    }
+
+    private fun updateSeekBar(equalizer: Equalizer, equalizerBandIndex: Short) {
+        val bandLevel = seekbars[equalizerBandIndex.toInt()]
+        setProgress(equalizer,bandLevel,false)
+    }
+
+    private fun setBandLevel(index:Int,value:Short,count:Short,max:Int){
+        SpManager.apply {
+            val oldValue = this.getString(Config.KEY_SETTINGS_AUDIO_EFFECT_VALUE,getDefArray(count,max/2)).toString()
+            putString(Config.KEY_SETTINGS_AUDIO_EFFECT_VALUE,putArray(index,value,oldValue))
+        }
+    }
+
+    private fun putArray(index:Int,value:Short,lastArray:String):String{
+        val newValue = lastArray.split("#").map {
+            val i = it.substring(it.indexOf("[")+1,it.indexOf(":")).toInt()
+            if(i==index){
+                val oldValue = it.substring(it.indexOf(":")+1,it.indexOf("]")+1)
+                it.replace(oldValue, "$value]")
+            }else it
+        }
+        val result = StringBuilder()
+        newValue.forEach { result.append("$it#") }
+        return result.substring(0,result.length-1)
+    }
+
+    private fun getDefArray(count:Short, value:Int):String{
+        val result = StringBuilder()
+        for (i in 0 until count){
+            result.append("[$i:$value]#")
+        }
+        return result.substring(0,result.length-1)
+    }
+
+    private fun readableHertz(millihertz: Int): String =
+        "${millihertz / 1000}Hz"
+
+    private fun setProgress(equalizer: Equalizer, bandLevel: BandLevel, isAuto:Boolean = true) {
+        val level = equalizer.getBandLevel(bandLevel.index).toInt()
+        bandLevel.seekBarPreference.apply {
+            value = level + bandLevel.maxBandLevel
+            if(!isAuto) onPreferenceChangeListener.onPreferenceChange(this,value)
+        }
+    }
+
+    private data class BandLevel constructor(
+        val seekBarPreference: SeekBarPreference,
+        val index: Short,
+        val lowestBandLevel: Short,
+        val maxBandLevel: Short
+    )
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/utils/EdgeBindingAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/utils/EdgeBindingAdapter.kt b/app/src/main/java/app/mango/music/utils/EdgeBindingAdapter.kt
new file mode 100644
--- /dev/null	(date 1654496410426)
+++ b/app/src/main/java/app/mango/music/utils/EdgeBindingAdapter.kt	(date 1654496410426)
@@ -0,0 +1,162 @@
+package app.mango.music.utils
+
+import android.view.View
+import android.view.ViewGroup
+import android.widget.TextView
+import androidx.annotation.DrawableRes
+import androidx.core.view.ViewCompat
+import androidx.core.view.WindowInsetsCompat
+import androidx.core.view.updateLayoutParams
+import androidx.databinding.BindingAdapter
+
+@BindingAdapter(
+    "paddingLeftSystemWindowInsets",
+    "paddingTopSystemWindowInsets",
+    "paddingRightSystemWindowInsets",
+    "paddingBottomSystemWindowInsets",
+    requireAll = false
+)
+fun View.applySystemWindowInsetsPadding(
+    previousApplyLeft: Boolean,
+    previousApplyTop: Boolean,
+    previousApplyRight: Boolean,
+    previousApplyBottom: Boolean,
+    applyLeft: Boolean,
+    applyTop: Boolean,
+    applyRight: Boolean,
+    applyBottom: Boolean
+) {
+    if (previousApplyLeft == applyLeft &&
+        previousApplyTop == applyTop &&
+        previousApplyRight == applyRight &&
+        previousApplyBottom == applyBottom
+    ) {
+        return
+    }
+
+    doOnApplyWindowInsets { view, insets, padding, _ ->
+        val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
+        val left = if (applyLeft) systemBars.left else 0
+        val top = if (applyTop) systemBars.top else 0
+        val right = if (applyRight) systemBars.right else 0
+        val bottom = if (applyBottom) systemBars.bottom else 0
+
+        view.setPadding(
+            padding.left + left,
+            padding.top + top,
+            padding.right + right,
+            padding.bottom + bottom
+        )
+    }
+}
+
+@BindingAdapter(
+    "marginLeftSystemWindowInsets",
+    "marginTopSystemWindowInsets",
+    "marginRightSystemWindowInsets",
+    "marginBottomSystemWindowInsets",
+    requireAll = false
+)
+fun View.applySystemWindowInsetsMargin(
+    previousApplyLeft: Boolean,
+    previousApplyTop: Boolean,
+    previousApplyRight: Boolean,
+    previousApplyBottom: Boolean,
+    applyLeft: Boolean,
+    applyTop: Boolean,
+    applyRight: Boolean,
+    applyBottom: Boolean
+) {
+    if (previousApplyLeft == applyLeft &&
+        previousApplyTop == applyTop &&
+        previousApplyRight == applyRight &&
+        previousApplyBottom == applyBottom
+    ) {
+        return
+    }
+
+    doOnApplyWindowInsets { view, insets, _, margin ->
+        val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
+        val left = if (applyLeft) systemBars.left else 0
+        val top = if (applyTop) systemBars.top else 0
+        val right = if (applyRight) systemBars.right else 0
+        val bottom = if (applyBottom) systemBars.bottom else 0
+
+        view.updateLayoutParams<ViewGroup.MarginLayoutParams> {
+            leftMargin = margin.left + left
+            topMargin = margin.top + top
+            rightMargin = margin.right + right
+            bottomMargin = margin.bottom + bottom
+        }
+    }
+}
+
+class InitialPadding(val left: Int, val top: Int, val right: Int, val bottom: Int)
+
+class InitialMargin(val left: Int, val top: Int, val right: Int, val bottom: Int)
+
+private fun recordInitialPaddingForView(view: View) = InitialPadding(
+    view.paddingLeft, view.paddingTop, view.paddingRight, view.paddingBottom
+)
+
+fun View.doOnApplyWindowInsets(
+    block: (View, WindowInsetsCompat, InitialPadding, InitialMargin) -> Unit
+) {
+    val initialPadding = recordInitialPaddingForView(this)
+    val initialMargin = recordInitialMarginForView(this)
+    ViewCompat.setOnApplyWindowInsetsListener(this) { v, insets ->
+        block(v, insets, initialPadding, initialMargin)
+        insets
+    }
+    requestApplyInsetsWhenAttached()
+}
+
+private fun recordInitialMarginForView(view: View): InitialMargin {
+    val lp = view.layoutParams as? ViewGroup.MarginLayoutParams
+        ?: throw IllegalArgumentException("Invalid view layout params")
+    return InitialMargin(lp.leftMargin, lp.topMargin, lp.rightMargin, lp.bottomMargin)
+}
+
+private fun recordInitialHeightForView(view: View): Int {
+    return view.layoutParams.height
+}
+
+fun View.requestApplyInsetsWhenAttached() {
+    if (isAttachedToWindow) {
+        requestApplyInsets()
+    } else {
+        addOnAttachStateChangeListener(object : View.OnAttachStateChangeListener {
+            override fun onViewAttachedToWindow(v: View) {
+                v.removeOnAttachStateChangeListener(this)
+                v.requestApplyInsets()
+            }
+
+            override fun onViewDetachedFromWindow(v: View) = Unit
+        })
+    }
+}
+
+@BindingAdapter(
+    "drawableStart",
+    "drawableLeft",
+    "drawableTop",
+    "drawableEnd",
+    "drawableRight",
+    "drawableBottom",
+    requireAll = false
+)
+fun TextView.bindDrawables(
+    @DrawableRes drawableStart: Int? = null,
+    @DrawableRes drawableLeft: Int? = null,
+    @DrawableRes drawableTop: Int? = null,
+    @DrawableRes drawableEnd: Int? = null,
+    @DrawableRes drawableRight: Int? = null,
+    @DrawableRes drawableBottom: Int? = null
+) {
+    setCompoundDrawablesWithIntrinsicBounds(
+        context.getDrawableOrNull(drawableStart ?: drawableLeft),
+        context.getDrawableOrNull(drawableTop),
+        context.getDrawableOrNull(drawableEnd ?: drawableRight),
+        context.getDrawableOrNull(drawableBottom)
+    )
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/views/IconStateButton.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/IconStateButton.kt b/app/src/main/java/app/mango/music/views/IconStateButton.kt
new file mode 100644
--- /dev/null	(date 1655021103646)
+++ b/app/src/main/java/app/mango/music/views/IconStateButton.kt	(date 1655021103646)
@@ -0,0 +1,142 @@
+package app.mango.music.views
+
+import android.animation.ValueAnimator
+import android.content.Context
+import android.graphics.*
+import android.graphics.drawable.Drawable
+import android.util.AttributeSet
+import android.util.TypedValue
+import androidx.annotation.AttrRes
+import androidx.annotation.ColorInt
+import androidx.appcompat.widget.AppCompatImageView
+import app.mango.music.R
+import app.mango.music.utils.interpolate
+import app.mango.music.utils.interpolateArgb
+import app.mango.music.utils.themeInterpolator
+import kotlin.math.abs
+import kotlin.math.sin
+
+class IconStateButton  @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+): AppCompatImageView(context, attrs, defStyleAttr) {
+
+    private val defaultDrawable = IconStateActionDrawable(context)
+
+    init {
+        setImageDrawable(defaultDrawable)
+    }
+
+    inner class IconStateActionDrawable(val context: Context) : Drawable() {
+
+        private val paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+            color = colorPrimary()
+            style = Paint.Style.FILL
+        }
+
+        private val icon = drawable.apply {
+            setTintMode(PorterDuff.Mode.MULTIPLY)
+        }
+
+        private val iconIntrinsicWidth = icon.intrinsicWidth
+        private val iconIntrinsicHeight = icon.intrinsicHeight
+
+        @ColorInt
+        private val iconTint = colorControlNormal()
+        @ColorInt
+        private val iconTintActive = colorPrimary()
+
+        private val iconMaxScaleAddition = 0.5F
+
+        private var progress = 0F
+            set(value) {
+                val constrained = value.coerceIn(0F, 1F)
+                if (constrained != field) {
+                    field = constrained
+                    callback?.invalidateDrawable(this)
+                }
+            }
+        private var progressAnim: ValueAnimator? = null
+        private val dur = context.resources.getInteger(R.integer.motion_duration_medium)
+        private val interrupt = context.themeInterpolator(R.attr.motionInterpolatorPersistent)
+
+        override fun onBoundsChange(bounds: Rect?) {
+            if (bounds == null)  return
+            update()
+        }
+
+        private fun update() {
+            callback?.invalidateDrawable(this)
+        }
+
+        override fun isStateful(): Boolean = true
+
+        override fun onStateChange(state: IntArray?): Boolean {
+            val initialProgress = progress
+            val newProgress = if (state?.contains(android.R.attr.state_activated) == true) {
+                1F
+            } else {
+                0F
+            }
+            progressAnim?.cancel()
+            progressAnim = ValueAnimator.ofFloat(initialProgress, newProgress).apply {
+                addUpdateListener {
+                    progress = animatedValue as Float
+                }
+                interpolator = interrupt
+                duration = (abs(newProgress - initialProgress) * dur).toLong()
+            }
+            progressAnim?.start()
+            return newProgress == initialProgress
+        }
+
+        override fun draw(canvas: Canvas) {
+
+            val range = interpolate(
+                0F,
+                Math.PI.toFloat(),
+                progress
+            )
+
+            val additive = (sin(range.toDouble()) * iconMaxScaleAddition).coerceIn(0.0, 1.0)
+            val scaleFactor = 1 + additive
+            icon.setBounds(
+                (iconIntrinsicWidth / 2F - (iconIntrinsicWidth / 2F) * scaleFactor).toInt(),
+                (iconIntrinsicHeight/2F - (iconIntrinsicHeight / 2F) * scaleFactor).toInt(),
+                (iconIntrinsicWidth / 2F + (iconIntrinsicWidth / 2F) * scaleFactor).toInt(),
+                (iconIntrinsicHeight/2F + (iconIntrinsicHeight / 2F) * scaleFactor).toInt()
+            )
+
+            icon.setTint(
+                interpolateArgb(iconTint, iconTintActive, 0F, 0.15F, progress)
+            )
+
+            icon.draw(canvas)
+        }
+
+        override fun setAlpha(alpha: Int) {
+            paint.alpha = alpha
+        }
+
+        override fun getOpacity(): Int = PixelFormat.TRANSLUCENT
+
+        override fun setColorFilter(filter: ColorFilter?) {
+            paint.colorFilter = filter
+        }
+
+        private fun colorControlNormal(): Int = getColorForAttrId(androidx.appcompat.R.attr.colorControlNormal)
+
+        private fun getColorForAttrId(@AttrRes resId:Int):Int{
+            val typedValue = TypedValue()
+            val a = context.obtainStyledAttributes(typedValue.data, intArrayOf(resId))
+            val color = a.getColor(0, Color.BLUE)
+            a.recycle()
+            return color
+        }
+
+        private fun colorPrimary(): Int = getColorForAttrId(androidx.appcompat.R.attr.colorPrimary)
+
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/settings/BasePreferenceFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/settings/BasePreferenceFragment.kt b/app/src/main/java/app/mango/music/ui/settings/BasePreferenceFragment.kt
new file mode 100644
--- /dev/null	(date 1655120037976)
+++ b/app/src/main/java/app/mango/music/ui/settings/BasePreferenceFragment.kt	(date 1655120037976)
@@ -0,0 +1,39 @@
+package app.mango.music.ui.settings
+
+import android.os.Bundle
+import android.util.Log
+import android.view.View
+import androidx.preference.*
+import androidx.recyclerview.widget.RecyclerView
+
+abstract class BasePreferenceFragment : PreferenceFragmentCompat() {
+
+    private fun setAllPreferencesToAvoidHavingExtraSpace(preference: Preference) {
+        preference.isIconSpaceReserved = false
+        if (preference is PreferenceGroup)
+            preference.forEach {
+                setAllPreferencesToAvoidHavingExtraSpace(it)
+            }
+    }
+
+    protected fun <T:Preference> findPreference(strId:Int) = findPreference<T>(getString(strId))
+
+    override fun setPreferenceScreen(preferenceScreen: PreferenceScreen) {
+        setAllPreferencesToAvoidHavingExtraSpace(preferenceScreen)
+        super.setPreferenceScreen(preferenceScreen)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        this::class.java.superclass.superclass.getDeclaredField("mList").run {
+            isAccessible = true
+            (get(this@BasePreferenceFragment) as RecyclerView)
+                .overScrollMode = View.OVER_SCROLL_NEVER
+        }
+    }
+
+    companion object{
+        private const val TAG = "BasePreferenceFragment"
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/views/EdgeTransparentView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/EdgeTransparentView.kt b/app/src/main/java/app/mango/music/views/EdgeTransparentView.kt
new file mode 100644
--- /dev/null	(date 1654938195942)
+++ b/app/src/main/java/app/mango/music/views/EdgeTransparentView.kt	(date 1654938195942)
@@ -0,0 +1,116 @@
+package app.mango.music.views
+
+import android.content.Context
+import android.graphics.*
+import android.util.AttributeSet
+import android.util.TypedValue
+import android.view.View
+import android.widget.FrameLayout
+import app.mango.music.R
+
+/**
+ * 根据
+ * https://gitee.com/tryohang/EdgeTranslucent/
+ * 修改
+ */
+class EdgeTransparentView  @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+): FrameLayout(context, attrs, defStyleAttr) {
+
+    private val paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+        style = Paint.Style.FILL
+        xfermode = PorterDuffXfermode(PorterDuff.Mode.DST_OUT)
+    }
+    private var position = 0
+    private var drawSize = 0f
+
+    private val topMask = 0x01
+    private val bottomMask = topMask shl 1
+    private val leftMask = topMask shl 2
+    private val rightMask = topMask shl 3
+
+    private var mWidth = 0
+    private var mHeight = 0
+
+    init {
+        val typedArray = context.obtainStyledAttributes(attrs, R.styleable.EdgeTransparentView)
+        position = typedArray.getInt(R.styleable.EdgeTransparentView_edge_position, 0)
+        drawSize = typedArray.getDimension(R.styleable.EdgeTransparentView_edge_width, 20f.dp())
+        typedArray.recycle()
+    }
+
+    override fun dispatchDraw(canvas: Canvas?) {
+        super.dispatchDraw(canvas)
+    }
+
+    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {
+        super.onSizeChanged(w, h, oldw, oldh)
+        initShader()
+        mWidth = width
+        mHeight = height
+    }
+
+    private val mGradientColors = intArrayOf(-0x1, 0x00000000)
+    private val mGradientPosition = floatArrayOf(0f, 1f)
+    private fun initShader() {
+        paint.shader = LinearGradient(
+            0f, 0f, 0f, drawSize,
+            mGradientColors, mGradientPosition,
+            Shader.TileMode.CLAMP
+        )
+    }
+
+    override fun drawChild(canvas: Canvas, child: View?, drawingTime: Long): Boolean {
+        val layerSave = canvas.saveLayer(
+            0f, 0f, width.toFloat(),
+            height.toFloat(), null
+        )
+        val drawChild = super.drawChild(canvas, child, drawingTime)
+        if (position == 0 || position and topMask != 0) {
+            canvas.drawRect(0f, 0f, mWidth.toFloat(), drawSize, paint)
+        }
+        if (position == 0 || position and bottomMask != 0) {
+            val save = canvas.save()
+            canvas.rotate(180f, (mWidth / 2).toFloat(), (mHeight / 2).toFloat())
+            canvas.drawRect(0f, 0f, mWidth.toFloat(), drawSize, paint)
+            canvas.restoreToCount(save)
+        }
+        val offset = (mHeight - mWidth) / 2
+        if (position == 0 || position and leftMask != 0) {
+            val saveCount = canvas.save()
+            canvas.rotate(90f, (mWidth / 2).toFloat(), (mHeight / 2).toFloat())
+            canvas.translate(0f, offset.toFloat())
+            canvas.drawRect(
+                (0 - offset).toFloat(),
+                0f, (mWidth + offset).toFloat(),
+                drawSize, paint
+            )
+            canvas.restoreToCount(saveCount)
+        }
+        if (position == 0 || position and rightMask != 0) {
+            val saveCount = canvas.save()
+            canvas.rotate(270f, (mWidth / 2).toFloat(), (mHeight / 2).toFloat())
+            canvas.translate(0f, offset.toFloat())
+            canvas.drawRect(
+                (0 - offset).toFloat(),
+                0f, (mWidth + offset).toFloat(),
+                drawSize, paint
+            )
+            canvas.restoreToCount(saveCount)
+        }
+        canvas.restoreToCount(layerSave)
+        return drawChild
+    }
+
+    override fun onDraw(canvas: Canvas?) {
+        super.onDraw(canvas)
+    }
+
+    private fun Float.dp(): Float {
+        return TypedValue.applyDimension(
+            TypedValue.COMPLEX_UNIT_DIP, this, context.resources.displayMetrics
+        )
+    }
+}
\ No newline at end of file
Index: app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/colors.xml b/app/src/main/res/values/colors.xml
new file mode 100644
--- /dev/null	(date 1654938663606)
+++ b/app/src/main/res/values/colors.xml	(date 1654938663606)
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="black">#FF000000</color>
+    <color name="white">#FFFFFFFF</color>
+
+    <color name="google_blue_300">#8AB4F8</color>
+    <color name="google_grey_900">#202124</color>
+
+    <color name="color_primary_dark">@color/google_blue_300</color>
+
+    <color name="color_surface_light">@color/white</color>
+    <color name="color_surface_dark">@color/google_grey_900</color>
+    <color name="color_surface">@color/color_surface_light</color>
+
+    <color name="dark_30_percent">#4D000000</color>
+    <color name="dark_50_percent">#80000000</color>
+    <color name="dark_70_percent">#B3000000</color>
+
+    <color name="system_window_scrim_light">#99FFFFFF</color>
+    <color name="system_window_scrim_light_compat">@color/google_grey_900</color>
+    <color name="system_window_scrim_compat">@color/system_window_scrim_light_compat</color>
+    <color name="system_window_scrim">@color/system_window_scrim_light</color>
+
+    <color name="lrc_normal_text_color">#9E9E9E</color>
+    <color name="lrc_current_text_color">#FF4081</color>
+    <color name="lrc_timeline_text_color">#F8BBD0</color>
+    <color name="lrc_timeline_color">#809E9E9E</color>
+    <color name="lrc_time_text_color">#809E9E9E</color>
+</resources>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/service/MusicNotificationProvider.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/service/MusicNotificationProvider.kt b/app/src/main/java/app/mango/music/service/MusicNotificationProvider.kt
new file mode 100644
--- /dev/null	(date 1653837202863)
+++ b/app/src/main/java/app/mango/music/service/MusicNotificationProvider.kt	(date 1653837202863)
@@ -0,0 +1,291 @@
+package app.mango.music.service
+
+import android.app.NotificationChannel
+import android.app.NotificationManager
+import android.content.Context
+import android.graphics.BitmapFactory
+import android.os.Build
+import android.os.Bundle
+import androidx.core.app.NotificationCompat
+import androidx.core.content.ContextCompat
+import androidx.core.graphics.drawable.IconCompat
+import androidx.media.app.NotificationCompat.MediaStyle
+import androidx.media3.common.Player
+import androidx.media3.common.util.UnstableApi
+import androidx.media3.session.MediaController
+import androidx.media3.session.MediaNotification
+import androidx.palette.graphics.Palette
+import app.mango.music.R
+import app.mango.music.utils.getAutomaticColor
+import dagger.hilt.android.qualifiers.ApplicationContext
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.launchIn
+import kotlinx.coroutines.flow.onEach
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+import javax.inject.Singleton
+import kotlin.coroutines.CoroutineContext
+
+@Singleton
+@UnstableApi
+class MusicNotificationProvider @Inject constructor(
+    @ApplicationContext private val mContext: Context
+) : MediaNotification.Provider, CoroutineScope {
+    override val coroutineContext: CoroutineContext = Dispatchers.IO
+
+    private val notificationManager: NotificationManager = ContextCompat.getSystemService(
+        mContext, NotificationManager::class.java
+    ) as NotificationManager
+
+    private val defaultIconResId: Int by lazy {
+        val appIcon = mContext.applicationInfo.icon
+        if (appIcon != 0) appIcon else R.drawable.ic_launcher_foreground
+    }
+
+    companion object {
+        const val NOTIFICATION_ID_PLAYER = 7
+        const val NOTIFICATION_ID_LOGGER = 6
+
+        const val NOTIFICATION_CHANNEL_NAME_PLAYER = "LMusic Player"
+        const val NOTIFICATION_CHANNEL_NAME_LOGGER = "LMusic Logger"
+
+        const val NOTIFICATION_CHANNEL_ID_PLAYER = "${NOTIFICATION_CHANNEL_NAME_PLAYER}_ID"
+        const val NOTIFICATION_CHANNEL_ID_LOGGER = "${NOTIFICATION_CHANNEL_NAME_LOGGER}_ID"
+
+        const val FLAG_ALWAYS_SHOW_TICKER = 0x1000000
+        const val FLAG_ONLY_UPDATE_TICKER = 0x2000000
+
+        const val CUSTOM_ACTION = "custom_action"
+        const val CUSTOM_ACTION_TOGGLE_REPEAT_MODE = "custom_action_toggle_repeat_mode"
+        const val CUSTOM_ACTION_CLOSE_APPLICATION = "custom_action_close_application"
+    }
+
+    private val placeHolder = BitmapFactory.decodeResource(
+        mContext.resources, R.drawable.icon
+    )
+
+    private var notificationBgColor = 0
+
+    private var mediaNotification: MediaNotification? = null
+    private var callback: MediaNotification.Provider.Callback? = null
+
+    private var sentenceFlow: MutableStateFlow<String?> =
+        MutableStateFlow(null)
+
+    override fun createNotification(
+        mediaController: MediaController,
+        actionFactory: MediaNotification.ActionFactory,
+        onNotificationChangedCallback: MediaNotification.Provider.Callback
+    ): MediaNotification {
+        callback = onNotificationChangedCallback
+        ensureNotificationChannel()
+
+        val builder = NotificationCompat.Builder(
+            mContext, NOTIFICATION_CHANNEL_ID_PLAYER
+        )
+
+        /*val icon = if (mediaController.shuffleModeEnabled) {
+            R.drawable.ic_shuffle
+        } else {
+            when (mediaController.repeatMode) {
+                Player.REPEAT_MODE_ONE -> R.drawable.ic_repeat_once
+                Player.REPEAT_MODE_ALL -> R.drawable.ic_repeat
+                else -> R.drawable.ic_repeat_off
+            }
+        }
+
+        val text = if (mediaController.shuffleModeEnabled) {
+            R.string.text_button_shuffle_on
+        } else {
+            when (mediaController.repeatMode) {
+                Player.REPEAT_MODE_ONE -> R.string.text_button_repeat_one
+                Player.REPEAT_MODE_ALL -> R.string.text_button_repeat_all
+                else -> R.string.text_button_repeat_all
+            }
+        }
+
+        builder.addAction(
+            actionFactory.createCustomAction(
+                IconCompat.createWithResource(mContext, icon),
+                mContext.resources.getString(text),
+                CUSTOM_ACTION_TOGGLE_REPEAT_MODE, Bundle.EMPTY
+            )
+        )*/
+
+        builder.addAction(
+            actionFactory.createMediaAction(
+                IconCompat.createWithResource(mContext, R.drawable.ic_skip_previous),
+                mContext.resources.getString(R.string.text_button_previous),
+                MediaNotification.ActionFactory.COMMAND_SKIP_TO_PREVIOUS
+            )
+        )
+
+        if (mediaController.playWhenReady) {
+            builder.addAction(
+                actionFactory.createMediaAction(
+                    IconCompat.createWithResource(mContext, R.drawable.ic_pause),
+                    mContext.resources.getString(R.string.text_button_pause),
+                    MediaNotification.ActionFactory.COMMAND_PAUSE
+                )
+            )
+        } else {
+            builder.addAction(
+                actionFactory.createMediaAction(
+                    IconCompat.createWithResource(mContext, R.drawable.ic_play),
+                    mContext.resources.getString(R.string.text_button_play),
+                    MediaNotification.ActionFactory.COMMAND_PLAY
+                )
+            )
+        }
+
+        builder.addAction(
+            actionFactory.createMediaAction(
+                IconCompat.createWithResource(mContext, R.drawable.ic_skip_next),
+                mContext.resources.getString(R.string.text_button_next),
+                MediaNotification.ActionFactory.COMMAND_SKIP_TO_NEXT
+            )
+        )
+
+        /*builder.addAction(
+            actionFactory.createCustomAction(
+                IconCompat.createWithResource(mContext, R.drawable.ic_close),
+                mContext.resources.getString(R.string.text_button_close),
+                CUSTOM_ACTION_CLOSE_APPLICATION, Bundle.EMPTY
+            )
+        )*/
+
+        val stopIntent = actionFactory.createMediaActionPendingIntent(
+            MediaNotification.ActionFactory.COMMAND_STOP
+        )
+
+        val mediaStyle = MediaStyle()
+            .setCancelButtonIntent(stopIntent)
+            .setShowCancelButton(true)
+            .setShowActionsInCompactView(0,1,2)
+
+        val metadata = mediaController.mediaMetadata
+
+        builder.setContentIntent(mediaController.sessionActivity)
+            .setDeleteIntent(stopIntent)
+            .setOnlyAlertOnce(true)
+            .setContentTitle(metadata.title)
+            .setContentText(metadata.artist)
+            .setSubText(metadata.albumTitle)
+            .setColor(notificationBgColor)
+            .setLargeIcon(placeHolder)
+            .setStyle(mediaStyle)
+            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+            .setOngoing(false)
+
+        builder.setSmallIcon(
+            if (Build.VERSION.SDK_INT <= 25) {
+                androidx.media3.session.R.drawable.media3_notification_small_icon
+            } else {
+                defaultIconResId
+            }
+        )
+
+        metadata.artworkData?.let {
+            launch(Dispatchers.IO) {
+                val bitmap = BitmapFactory.decodeByteArray(it, 0, it.size)
+                    ?: return@launch
+                val palette = Palette.from(bitmap).generate()
+                notificationBgColor = palette.getAutomaticColor()
+
+                builder.setLargeIcon(bitmap)
+                builder.color = notificationBgColor
+
+                mediaNotification = MediaNotification(
+                    NOTIFICATION_ID_PLAYER,
+                    builder.build()
+                )
+                onNotificationChangedCallback.onNotificationChanged(mediaNotification!!)
+            }
+        }
+        mediaNotification = MediaNotification(
+            NOTIFICATION_ID_PLAYER,
+            builder.build()
+        )
+        return mediaNotification!!
+    }
+
+    override fun handleCustomAction(
+        mediaController: MediaController,
+        action: String,
+        extras: Bundle
+    ) {
+        if (action == CUSTOM_ACTION_TOGGLE_REPEAT_MODE) {
+            if (mediaController.shuffleModeEnabled) {
+                mediaController.shuffleModeEnabled = false
+            } else {
+                mediaController.repeatMode = when (mediaController.repeatMode) {
+                    Player.REPEAT_MODE_ONE -> Player.REPEAT_MODE_ALL
+                    Player.REPEAT_MODE_ALL -> Player.REPEAT_MODE_ONE
+                    else -> Player.REPEAT_MODE_ALL
+                }
+            }
+        }
+    }
+
+    private fun ensureNotificationChannel() {
+        if (Build.VERSION.SDK_INT < 26) return
+
+        if (notificationManager.getNotificationChannel(
+                NOTIFICATION_CHANNEL_ID_PLAYER
+            ) == null
+        ) {
+            notificationManager.createNotificationChannel(
+                NotificationChannel(
+                    NOTIFICATION_CHANNEL_ID_PLAYER,
+                    NOTIFICATION_CHANNEL_NAME_PLAYER,
+                    NotificationManager.IMPORTANCE_LOW
+                )
+            )
+        }
+        if (notificationManager.getNotificationChannel(
+                NOTIFICATION_CHANNEL_ID_LOGGER
+            ) == null
+        ) {
+            notificationManager.createNotificationChannel(
+                NotificationChannel(
+                    NOTIFICATION_CHANNEL_ID_LOGGER,
+                    NOTIFICATION_CHANNEL_NAME_LOGGER,
+                    NotificationManager.IMPORTANCE_LOW
+                )
+            )
+        }
+    }
+
+    /*override fun clearLyric() {
+        pushLyric(null)
+    }*/
+
+    private var lyricPusherEnable = false
+    private var sentenceToPush: String? = null
+    /*override fun pushLyric(sentence: String?) {
+        sentenceToPush = sentence
+        sentenceFlow.tryEmit(if (lyricPusherEnable) sentenceToPush else null)
+    }*/
+
+    init {
+        sentenceFlow.onEach { sentence ->
+            mediaNotification ?: return@onEach
+            mediaNotification!!.notification.apply {
+                tickerText = sentence
+                flags = flags.or(FLAG_ALWAYS_SHOW_TICKER)
+                flags = flags.or(FLAG_ONLY_UPDATE_TICKER)
+            }
+            ensureNotificationChannel()
+            callback?.onNotificationChanged(mediaNotification!!)
+        }.launchIn(this)
+
+        /*SpManager.listen(
+            Config.KEY_SETTINGS_STATUS_LYRIC_ENABLE,
+            SpManager.SpBoolListener(Config.DEFAULT_SETTINGS_STATUS_LYRIC_ENABLE) {
+                lyricPusherEnable = it
+                pushLyric(sentenceToPush)
+            })*/
+    }
+}
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
new file mode 100644
--- /dev/null	(date 1653907548529)
+++ b/build.gradle	(date 1653907548529)
@@ -0,0 +1,39 @@
+buildscript {
+    ext {
+        room_version = "2.3.0"
+        kotlin_version = '1.6.10'
+        material_version = '1.5.0'
+        appcompat_version = '1.4.1'
+        constraintlayout_version = '2.1.3'
+        navigation_version = '2.3.5'
+        hilt_compiler_version = "1.0.0"
+        hilt_navigation_fragment_version = "1.0.0"
+        hilt_version = "2.40.5"
+    }
+
+    repositories {
+        google()
+        mavenCentral()
+        maven { url 'https://jitpack.io' }
+        maven { url 'https://maven.aliyun.com/repository/central' }
+        maven { url 'https://maven.aliyun.com/repository/google' }
+    }
+
+    dependencies{
+        classpath 'com.android.tools.build:gradle:4.1.3'
+        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.40.5'
+        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10'
+        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.4.1'
+    }
+
+}
+
+plugins {
+    id 'com.android.application' version '7.2.0' apply false
+    id 'com.android.library' version '7.2.0' apply false
+    id 'org.jetbrains.kotlin.android' version '1.6.10' apply false
+}
+
+task clean(type: Delete) {
+    delete rootProject.buildDir
+}
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
new file mode 100644
--- /dev/null	(date 1654946514745)
+++ b/app/build.gradle	(date 1654946514745)
@@ -0,0 +1,88 @@
+plugins {
+    id 'com.android.application'
+    id 'org.jetbrains.kotlin.android'
+    id 'androidx.navigation.safeargs.kotlin'
+    id 'kotlin-kapt'
+    id 'dagger.hilt.android.plugin'
+    id 'kotlin-parcelize'
+}
+
+android {
+    compileSdk 32
+
+    defaultConfig {
+        applicationId "app.mango.music"
+        minSdk 21
+        targetSdk 31
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+    }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+    kotlinOptions {
+        jvmTarget = '1.8'
+    }
+
+    dataBinding {
+        enabled true
+    }
+}
+
+dependencies {
+
+    implementation 'androidx.core:core-ktx:1.7.0'
+    implementation 'androidx.fragment:fragment-ktx:1.4.1'
+    implementation 'androidx.appcompat:appcompat:1.4.1'
+    implementation 'androidx.navigation:navigation-runtime-ktx:2.4.1'
+    implementation 'com.google.android.material:material:1.5.0'
+    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
+
+    def preference_version = "1.1.1"
+    implementation "androidx.preference:preference-ktx:$preference_version"
+
+    implementation 'me.zhanghai.android.fastscroll:library:1.1.8'
+    implementation 'com.blankj:utilcodex:1.31.0'
+    implementation 'org:jaudiotagger:2.0.3'
+
+    def lifecycle_version = "2.4.1"
+    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
+    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
+
+    def coil_version = '1.4.0'
+    implementation "io.coil-kt:coil:$coil_version"
+    implementation "io.coil-kt:coil-compose:$coil_version"
+
+    implementation "androidx.hilt:hilt-navigation-fragment:$hilt_navigation_fragment_version"
+    kapt "androidx.hilt:hilt-compiler:$hilt_compiler_version"
+
+    implementation "com.google.dagger:hilt-android:$hilt_version"
+    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
+
+    implementation 'androidx.palette:palette-ktx:1.0.0'
+
+    def room_version = "2.4.2"
+    implementation "androidx.room:room-runtime:$room_version"
+    implementation "androidx.room:room-ktx:$room_version"
+    kapt "androidx.room:room-compiler:$room_version"
+
+    implementation 'androidx.media:media:1.5.0'
+    def media3_version = "1.0.0-alpha03"
+    implementation "androidx.media3:media3-common:$media3_version"
+    implementation "androidx.media3:media3-session:$media3_version"
+    implementation "androidx.media3:media3-exoplayer:$media3_version"
+
+    testImplementation 'junit:junit:4.13.2'
+    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
+    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
+}
\ No newline at end of file
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1655871817468)
+++ b/app/src/main/AndroidManifest.xml	(date 1655871817468)
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="app.mango.music">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+
+    <application
+        android:name=".App"
+        android:allowBackup="true"
+        android:dataExtractionRules="@xml/data_extraction_rules"
+        android:fullBackupContent="@xml/backup_rules"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@style/Theme.Purple"
+        tools:targetApi="31">
+        <service
+            android:name=".service.SongService"
+            android:enabled="true"
+            android:exported="false">
+            <intent-filter>
+                <action android:name="androidx.media3.session.MediaLibraryService" />
+                <action android:name="android.media.browse.MediaBrowserService" />
+            </intent-filter>
+        </service>
+        <provider
+            android:name="androidx.core.content.FileProvider"
+            android:authorities="app.mango.music.fileprovider"
+            android:exported="false"
+            android:grantUriPermissions="true">
+            <meta-data
+                android:name="android.support.FILE_PROVIDER_PATHS"
+                android:resource="@xml/filepaths" />
+        </provider>
+        <activity
+            android:name=".ui.main.MainActivity"
+            android:exported="true"
+            android:label="@string/app_name">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/data/Database.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/data/Database.kt b/app/src/main/java/app/mango/music/data/Database.kt
new file mode 100644
--- /dev/null	(date 1654497715990)
+++ b/app/src/main/java/app/mango/music/data/Database.kt	(date 1654497715990)
@@ -0,0 +1,37 @@
+package app.mango.music.data
+
+import androidx.room.*
+import kotlinx.coroutines.flow.Flow
+
+@Entity(tableName = "m_favorite")
+data class MusicFavorite(
+    @PrimaryKey
+    @ColumnInfo(name = "media_id")
+    val mediaId:String,
+
+    @ColumnInfo(name = "is_favorite")
+    val isFavorite:Boolean
+)
+
+@Dao
+interface MusicDao{
+    @Query("SELECT * FROM m_favorite")
+    fun getFavorites(): Flow<List<MusicFavorite>>
+
+    @Transaction
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    suspend fun save(musicFavorite: MusicFavorite)
+
+    @Transaction
+    @Delete(entity = MusicFavorite::class)
+    fun delete(musicFavorite: MusicFavorite)
+}
+
+@Database(
+    entities = [MusicFavorite::class],
+    version = 1,
+    exportSchema = false
+)
+abstract class MusicDatabase:RoomDatabase(){
+    abstract fun musicDao():MusicDao
+}
\ No newline at end of file
Index: app/src/main/res/drawable/ic_queue.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_queue.xml b/app/src/main/res/drawable/ic_queue.xml
new file mode 100644
--- /dev/null	(date 1650024618000)
+++ b/app/src/main/res/drawable/ic_queue.xml	(date 1650024618000)
@@ -0,0 +1,15 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M8,16h12L20,4L8,4v12zM9,9h4L13,5h2v4h4v2h-4v4h-2v-4L9,11L9,9z"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M2,20c0,1.1 0.9,2 2,2h14v-2L4,20L4,6L2,6v14zM20,2L8,2c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2L22,4c0,-1.1 -0.9,-2 -2,-2zM20,16L8,16L8,4h12v12zM13,15h2v-4h4L19,9h-4L15,5h-2v4L9,9v2h4z"/>
+</vector>
Index: app/src/main/java/app/mango/music/ui/ThemedFastScroller.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/ThemedFastScroller.kt b/app/src/main/java/app/mango/music/ui/ThemedFastScroller.kt
new file mode 100644
--- /dev/null	(date 1654522661822)
+++ b/app/src/main/java/app/mango/music/ui/ThemedFastScroller.kt	(date 1654522661822)
@@ -0,0 +1,12 @@
+package app.mango.music.ui
+
+import android.view.ViewGroup
+import me.zhanghai.android.fastscroll.FastScroller
+import me.zhanghai.android.fastscroll.FastScrollerBuilder
+
+object ThemedFastScroller {
+    fun create(view: ViewGroup): FastScroller
+        = FastScrollerBuilder(view)
+            .useMd2Style()
+            .build()
+}
Index: app/src/main/res/drawable/ic_playlist_add.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_playlist_add.xml b/app/src/main/res/drawable/ic_playlist_add.xml
new file mode 100644
--- /dev/null	(date 1655022504725)
+++ b/app/src/main/res/drawable/ic_playlist_add.xml	(date 1655022504725)
@@ -0,0 +1,16 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal"
+    android:autoMirrored="true">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M16,17m-1,0a1,1 0,1 1,2 0a1,1 0,1 1,-2 0"
+      android:strokeAlpha="0.3"
+      android:fillAlpha="0.3"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M3,10h12v2H3V10zM3,14h8v2H3V14zM3,6h12v2H3V6zM17,14.18C16.69,14.07 16.35,14 16,14c-1.66,0 -3,1.34 -3,3s1.34,3 3,3s3,-1.34 3,-3V8h3V6h-5V14.18z"/>
+</vector>
Index: app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
new file mode 100644
--- /dev/null	(date 1655120905369)
+++ b/app/src/main/res/values/styles.xml	(date 1655120905369)
@@ -0,0 +1,12 @@
+<resources>
+
+    <style name="SeekbarTheme"  parent="@style/Widget.AppCompat.SeekBar">
+        <item name="android:progressTint">?attr/colorPrimary</item>
+        <item name="android:secondaryProgressTint">#99ffffff</item>
+        <item name="android:thumbTint">?attr/colorPrimary</item>
+        <item name="android:progressDrawable">@drawable/seekbar_track</item>
+        <item name="android:paddingStart">0dp</item>
+        <item name="android:paddingEnd">0dp</item>
+    </style>
+
+</resources>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/manager/Config.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/manager/Config.kt b/app/src/main/java/app/mango/music/manager/Config.kt
new file mode 100644
--- /dev/null	(date 1655870835726)
+++ b/app/src/main/java/app/mango/music/manager/Config.kt	(date 1655870835726)
@@ -0,0 +1,27 @@
+package app.mango.music.manager
+
+object Config {
+
+    const val LAST_PLAYED_SP = "LAST_PLAYED_SP"
+    const val LAST_PLAYED_ID = "LAST_PLAYED_ID"
+    const val LAST_PLAYED_LIST = "LAST_PLAYED_LIST"
+
+    const val KEY_SETTINGS_MEDIA_UNKNOWN_FILTER = "KEY_SETTINGS_MEDIA_UNKNOWN_FILTER"
+    const val KEY_SETTINGS_IGNORE_AUDIO_FOCUS = "KEY_SETTINGS_IGNORE_AUDIO_FOCUS"
+    const val KEY_SETTINGS_REPEAT_MODE = "KEY_SETTINGS_REPEAT_MODE"
+    const val KEY_SETTINGS_PLAYBACK_PARAMETERS = "KEY_SETTINGS_PLAYBACK_PARAMETERS"
+    const val KEY_SETTINGS_VOLUME = "KEY_SETTINGS_VOLUME"
+    const val KEY_SETTINGS_AUDIO_EFFECT = "KEY_SETTINGS_AUDIO_EFFECT"
+    const val KEY_SETTINGS_AUDIO_EFFECT_VALUE = "KEY_SETTINGS_AUDIO_EFFECT_VALUE"
+    const val KEY_SETTINGS_AUDIO_EFFECT_BOOST = "KEY_SETTINGS_AUDIO_EFFECT_BOOST"
+    const val KEY_SETTINGS_AUDIO_EFFECT_BOOST_VALUE = "KEY_SETTINGS_AUDIO_EFFECT_BOOST_VALUE"
+
+    const val DEFAULT_SETTINGS_MEDIA_UNKNOWN_FILTER = true
+    const val DEFAULT_SETTINGS_IGNORE_AUDIO_FOCUS = false
+    const val DEFAULT_SETTINGS_REPEAT_MODE = 0
+    const val DEFAULT_SETTINGS_PLAYBACK_PARAMETERS = "1"
+    const val DEFAULT_SETTINGS_VOLUME = 100
+    const val DEFAULT_SETTINGS_AUDIO_EFFECT = false
+    const val DEFAULT_SETTINGS_AUDIO_EFFECT_BOOST = false
+    const val DEFAULT_SETTINGS_AUDIO_EFFECT_BOOST_VALUE = 0
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/service/SongService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/service/SongService.kt b/app/src/main/java/app/mango/music/service/SongService.kt
new file mode 100644
--- /dev/null	(date 1655041052611)
+++ b/app/src/main/java/app/mango/music/service/SongService.kt	(date 1655041052611)
@@ -0,0 +1,259 @@
+package app.mango.music.service
+
+import android.app.PendingIntent
+import androidx.media3.common.*
+import androidx.media3.common.util.UnstableApi
+import androidx.media3.exoplayer.ExoPlayer
+import androidx.media3.session.LibraryResult
+import androidx.media3.session.MediaController
+import androidx.media3.session.MediaLibraryService
+import androidx.media3.session.MediaSession
+import app.mango.music.data.BaseMediaSource
+import app.mango.music.data.GlobalData
+import app.mango.music.data.ITEM_PREFIX
+import app.mango.music.manager.AudioEffectManager
+import app.mango.music.manager.Config
+import app.mango.music.manager.SpManager
+import com.blankj.utilcode.util.GsonUtils
+import com.blankj.utilcode.util.SPUtils
+import com.google.common.collect.ImmutableList
+import com.google.common.util.concurrent.Futures
+import com.google.common.util.concurrent.ListenableFuture
+import com.google.common.util.concurrent.MoreExecutors
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+import kotlin.coroutines.CoroutineContext
+
+/**
+ * 使用
+ * https://gitee.com/lalilu/lmusic/
+ */
+@UnstableApi
+@AndroidEntryPoint
+class SongService : MediaLibraryService(), CoroutineScope {
+    override val coroutineContext: CoroutineContext = Dispatchers.IO
+    private lateinit var player: Player
+    private lateinit var exoPlayer: ExoPlayer
+
+    private lateinit var audioInit: AudioInit
+    private lateinit var mediaLibrarySession: MediaLibrarySession
+    private lateinit var mediaController: MediaController
+
+    @Inject
+    lateinit var mediaSource: BaseMediaSource
+
+    @Inject
+    lateinit var notificationProvider: MusicNotificationProvider
+
+    private val lastPlayedSp: SPUtils by lazy {
+        SPUtils.getInstance(Config.LAST_PLAYED_SP)
+    }
+
+    private val audioAttributes = AudioAttributes.Builder()
+        .setContentType(C.CONTENT_TYPE_MUSIC)
+        .setUsage(C.USAGE_MEDIA)
+        .build()
+
+    override fun onCreate() {
+        super.onCreate()
+        exoPlayer = ExoPlayer.Builder(this)
+            .setUseLazyPreparation(false)
+            .setHandleAudioBecomingNoisy(true)
+            .build()
+        audioInit = AudioInit(exoPlayer.audioSessionId).bind()
+
+        player = object : ForwardingPlayer(exoPlayer) {
+            override fun getMaxSeekToPreviousPosition(): Long = Long.MAX_VALUE
+            override fun seekToPrevious() {
+                if (player.hasPreviousMediaItem() && player.currentPosition <= maxSeekToPreviousPosition) {
+                    seekToPreviousMediaItem()
+                    return
+                }
+                super.seekToPrevious()
+            }
+        }
+
+        SpManager.listen(
+            Config.KEY_SETTINGS_IGNORE_AUDIO_FOCUS,
+            SpManager.SpBoolListener(Config.DEFAULT_SETTINGS_IGNORE_AUDIO_FOCUS) {
+                exoPlayer.setAudioAttributes(audioAttributes, !it)
+            })
+
+        SpManager.listen(
+            Config.KEY_SETTINGS_VOLUME,
+            SpManager.SpIntListener(Config.DEFAULT_SETTINGS_VOLUME){
+                exoPlayer.volume = it.toFloat()/100
+            })
+
+        SpManager.listen(Config.KEY_SETTINGS_REPEAT_MODE,
+            SpManager.SpIntListener(Config.DEFAULT_SETTINGS_REPEAT_MODE) {
+                exoPlayer.shuffleModeEnabled = it == 2
+                exoPlayer.repeatMode =
+                    if (it == 1) Player.REPEAT_MODE_ONE else Player.REPEAT_MODE_ALL
+            })
+
+        SpManager.listen(Config.KEY_SETTINGS_PLAYBACK_PARAMETERS,
+            SpManager.SpStringListener(Config.DEFAULT_SETTINGS_PLAYBACK_PARAMETERS){
+                exoPlayer.playbackParameters = PlaybackParameters(it.toFloat())
+        })
+
+        val pendingIntent: PendingIntent =
+            packageManager.getLaunchIntentForPackage(packageName).let { sessionIntent ->
+                PendingIntent.getActivity(
+                    this, 0, sessionIntent,
+                    PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
+                )
+            }
+
+        mediaLibrarySession =
+            MediaLibrarySession.Builder(this, player, CustomMediaLibrarySessionCallback())
+                .setMediaItemFiller(CustomMediaItemFiller())
+                .setSessionActivity(pendingIntent)
+                .build()
+
+        val controllerFuture =
+            MediaController.Builder(this, mediaLibrarySession.token)
+                .buildAsync()
+
+        controllerFuture.addListener({
+            mediaController = controllerFuture.get()
+            mediaController.addListener(GlobalData.playerListener)
+            mediaController.addListener(LastPlayedListener())
+            GlobalData.getIsPlayingFromPlayer = mediaController::isPlaying
+            GlobalData.getPositionFromPlayer = mediaController::getCurrentPosition
+        }, MoreExecutors.directExecutor())
+
+        setMediaNotificationProvider(notificationProvider)
+    }
+
+    private inner class LastPlayedListener : Player.Listener {
+        override fun onMediaItemTransition(mediaItem: MediaItem?, reason: Int) {
+            launch {
+                lastPlayedSp.put(Config.LAST_PLAYED_ID, mediaItem?.mediaId)
+            }
+        }
+
+        override fun onTimelineChanged(timeline: Timeline, reason: Int) {
+            val list = List(mediaController.mediaItemCount) {
+                mediaController.getMediaItemAt(it).mediaId
+            }
+            launch {
+                lastPlayedSp.put(Config.LAST_PLAYED_LIST, GsonUtils.toJson(list))
+            }
+        }
+    }
+
+    private inner class AudioInit(audioSessionId:Int){
+
+        private val audioEffectManager = AudioEffectManager(audioSessionId)
+
+        fun release() = audioEffectManager.release()
+
+        private val equalizer: AudioEffectManager.XEqualizer
+        get() = audioEffectManager.equalizer
+
+        private val bassBoost: AudioEffectManager.XBassBoost
+        get() = audioEffectManager.bassBoost
+
+        fun bind():AudioInit{
+
+            val numberFrequencyBands: Short = equalizer.numberOfBands
+            val lowerEqualizerBandLevelMilliBel: Short = equalizer.bandLevelRange[0]
+            val upperEqualizerBandLevelMilliBel: Short = equalizer.bandLevelRange[1]
+
+            SpManager.listen(Config.KEY_SETTINGS_AUDIO_EFFECT,
+                SpManager.SpBoolListener(Config.DEFAULT_SETTINGS_AUDIO_EFFECT){
+                    equalizer.enabled = it
+                })
+
+            SpManager.listen(Config.KEY_SETTINGS_AUDIO_EFFECT_BOOST,
+                SpManager.SpBoolListener(Config.DEFAULT_SETTINGS_AUDIO_EFFECT_BOOST){
+                    bassBoost.enabled = it
+                })
+
+            SpManager.listen(Config.KEY_SETTINGS_AUDIO_EFFECT_BOOST_VALUE,
+                SpManager.SpIntListener(Config.DEFAULT_SETTINGS_AUDIO_EFFECT_BOOST_VALUE){
+                    bassBoost.setStrength(it.toShort())
+                })
+
+            SpManager.listen(Config.KEY_SETTINGS_AUDIO_EFFECT_VALUE,
+                SpManager.SpStringListener(getDefArray(numberFrequencyBands,upperEqualizerBandLevelMilliBel - lowerEqualizerBandLevelMilliBel)){
+                    it.split("#").forEachIndexed { index, s ->
+                        equalizer.setBandLevel(
+                            index.toShort(),
+                            (s.substring(s.indexOf(":")+1,s.indexOf("]"))).toShort()
+                        )
+                    }
+                })
+            return this
+        }
+    }
+
+    private fun getDefArray(count:Short, value:Int):String{
+        val result = StringBuilder()
+        for (i in 0 until count){
+            result.append("[$i:$value]#")
+        }
+        return result.substring(0,result.length-1)
+    }
+
+    private inner class CustomMediaItemFiller : MediaSession.MediaItemFiller {
+        override fun fillInLocalConfiguration(
+            session: MediaSession,
+            controller: MediaSession.ControllerInfo,
+            mediaItem: MediaItem
+        ): MediaItem {
+            return mediaSource.getItemById(ITEM_PREFIX + mediaItem.mediaId) ?: mediaItem
+        }
+    }
+
+    private inner class CustomMediaLibrarySessionCallback :
+        MediaLibrarySession.MediaLibrarySessionCallback {
+        override fun onGetLibraryRoot(
+            session: MediaLibrarySession,
+            browser: MediaSession.ControllerInfo,
+            params: LibraryParams?
+        ): ListenableFuture<LibraryResult<MediaItem>> {
+            return Futures.immediateFuture(LibraryResult.ofItem(mediaSource.getRootItem(), params))
+        }
+
+        override fun onGetItem(
+            session: MediaLibrarySession,
+            browser: MediaSession.ControllerInfo,
+            mediaId: String
+        ): ListenableFuture<LibraryResult<MediaItem>> {
+            val item = mediaSource.getItemById(mediaId) ?: return Futures.immediateFuture(
+                LibraryResult.ofError(LibraryResult.RESULT_ERROR_BAD_VALUE)
+            )
+            return Futures.immediateFuture(LibraryResult.ofItem(item, null))
+        }
+
+        override fun onGetChildren(
+            session: MediaLibrarySession,
+            browser: MediaSession.ControllerInfo,
+            parentId: String,
+            page: Int,
+            pageSize: Int,
+            params: LibraryParams?
+        ): ListenableFuture<LibraryResult<ImmutableList<MediaItem>>> {
+            val children = mediaSource.getChildren(parentId) ?: return Futures.immediateFuture(
+                LibraryResult.ofError(LibraryResult.RESULT_ERROR_BAD_VALUE)
+            )
+            return Futures.immediateFuture(LibraryResult.ofItemList(children, params))
+        }
+    }
+
+    override fun onDestroy() {
+        player.release()
+        audioInit.release()
+        mediaLibrarySession.release()
+        super.onDestroy()
+    }
+
+    override fun onGetSession(controllerInfo: MediaSession.ControllerInfo): MediaLibrarySession {
+        return mediaLibrarySession
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/audio/MediaExtensions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/audio/MediaExtensions.kt b/app/src/main/java/app/mango/music/audio/MediaExtensions.kt
new file mode 100644
--- /dev/null	(date 1654939183181)
+++ b/app/src/main/java/app/mango/music/audio/MediaExtensions.kt	(date 1654939183181)
@@ -0,0 +1,184 @@
+package app.mango.music.audio
+
+import android.content.ContentUris
+import android.database.Cursor
+import android.net.Uri
+import android.os.Build
+import android.os.Bundle
+import android.provider.MediaStore
+import androidx.annotation.RequiresApi
+import androidx.media3.common.MediaItem
+import androidx.media3.common.MediaMetadata
+import java.util.*
+
+fun Cursor.getSongId(): Long {
+    val index = this.getColumnIndex(MediaStore.Audio.Media._ID)
+    return if (index < 0) return 0 else this.getLong(index)
+}
+
+fun Cursor.getSongTitle(): String {
+    val index = this.getColumnIndex(MediaStore.Audio.Media.TITLE)
+    return if (index < 0) "" else this.getString(index)
+}
+
+fun Cursor.getAlbumId(): Long {
+    val index = this.getColumnIndex(MediaStore.Audio.Media.ALBUM_ID)
+    return if (index < 0) return 0 else this.getLong(index)
+}
+
+fun Cursor.getAlbumTitle(): String {
+    val index = this.getColumnIndex(MediaStore.Audio.Media.ALBUM)
+    return if (index < 0) "" else this.getString(index)
+}
+
+fun Cursor.getArtistId(): Long {
+    val index = this.getColumnIndex(MediaStore.Audio.Media.ARTIST_ID)
+    return if (index < 0) 0 else this.getLong(index)
+}
+
+fun Cursor.getArtist(): String {
+    val index = this.getColumnIndex(MediaStore.Audio.Media.ARTIST)
+    return if (index < 0) "" else this.getString(index)
+}
+
+fun Cursor.getArtists(): List<String> {
+    return this.getArtist().split("/")
+}
+
+fun Cursor.getSongSize(): Long {
+    val index = this.getColumnIndex(MediaStore.Audio.Media.SIZE)
+    return if (index < 0) return 0 else this.getLong(index)
+}
+
+fun Cursor.getSongData(): String {
+    val index = this.getColumnIndex(MediaStore.Audio.Media.DATA)
+    return if (index < 0) "" else this.getString(index)
+}
+
+fun Cursor.getDateAdded():String {
+    val index = this.getColumnIndex(MediaStore.Audio.Media.DATE_ADDED)
+    return if(index<0) "" else this.getString(index)
+}
+
+fun Cursor.getSongDuration(): Long {
+    val index = this.getColumnIndex(MediaStore.Audio.Media.DURATION)
+    return if (index < 0) return 0 else this.getLong(index)
+}
+
+fun Cursor.getSongMimeType(): String {
+    val index = this.getColumnIndex(MediaStore.Audio.Media.MIME_TYPE)
+    return if (index < 0) "" else this.getString(index)
+}
+
+@RequiresApi(Build.VERSION_CODES.R)
+fun Cursor.getSongGenre(): String? {
+    val index = this.getColumnIndex(MediaStore.Audio.AudioColumns.GENRE)
+    return if (index == -1) null else this.getString(index)
+}
+
+fun Cursor.getAlbumArt(): Uri {
+    return ContentUris.withAppendedId(
+        Uri.parse("content://media/external/audio/albumart/"),
+        getAlbumId()
+    )
+}
+
+fun Cursor.getMediaUri(): Uri {
+    return Uri.withAppendedPath(
+        MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,
+        getSongId().toString()
+    )
+}
+
+fun Bundle.setAlbumId(albumId: Long): Bundle {
+    putLong(MediaStore.Audio.Media.ALBUM_ID, albumId)
+    return this
+}
+
+fun Bundle.setArtistId(artistId: Long): Bundle {
+    putLong(MediaStore.Audio.Media.ARTIST_ID, artistId)
+    return this
+}
+
+fun Bundle.setDuration(duration: Long): Bundle {
+    putLong(MediaStore.Audio.Media.DURATION, duration)
+    return this
+}
+
+fun Bundle.setSongData(songData: String): Bundle {
+    putString(MediaStore.Audio.Media.DATA, songData)
+    return this
+}
+
+fun Bundle.setDateAdded(date:String):Bundle{
+    putString(MediaStore.Audio.Media.DATE_ADDED,date)
+    return this
+}
+
+fun Bundle.setLyricData(lyric: String): Bundle {
+    putString("MediaStore.Audio.Media.LYRIC", lyric)
+    return this
+}
+
+fun MediaMetadata.getLyricData(): String {
+    return this.extras?.getString("MediaStore.Audio.Media.LYRIC")?:""
+}
+
+fun MediaMetadata.getDuration(): Long {
+    return this.extras?.getLong(MediaStore.Audio.Media.DURATION) ?: 0L
+}
+
+fun MediaMetadata.getArtistId(): Long {
+    return this.extras?.getLong(MediaStore.Audio.Media.ARTIST_ID) ?: 0L
+}
+
+fun MediaMetadata.getAlbumId(): Long {
+    return this.extras?.getLong(MediaStore.Audio.Media.ALBUM_ID) ?: 0L
+}
+
+fun MediaMetadata.getSongData(): String? {
+    return this.extras?.getString(MediaStore.Audio.Media.DATA)
+}
+
+fun MediaMetadata.getDateAdded(): String? {
+    return this.extras?.getString(MediaStore.Audio.Media.DATE_ADDED)
+}
+
+fun MediaItem.partCopy(): MediaItem {
+    return MediaItem.Builder()
+        .setUri(this.mediaMetadata.mediaUri)
+        .setMediaMetadata(this.mediaMetadata)
+        .setMimeType(this.localConfiguration?.mimeType)
+        .setMediaId(this.mediaId)
+        .build()
+}
+
+fun MediaItem.Builder.from(cursor: Cursor): MediaItem.Builder {
+    setMediaId(cursor.getSongId().toString())
+    setMimeType(cursor.getSongMimeType())
+    setUri(cursor.getMediaUri())
+    return this
+}
+
+fun MediaMetadata.Builder.from(cursor: Cursor): MediaMetadata.Builder {
+    setArtist(cursor.getArtist())
+    setAlbumTitle(cursor.getAlbumTitle())
+    setTitle(cursor.getSongTitle())
+    setMediaUri(cursor.getMediaUri())
+    setAlbumArtist(cursor.getArtist())
+    setArtworkUri(cursor.getAlbumArt())
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
+        val genre = cursor.getSongGenre() ?: "Empty"
+        setGenre(genre.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.ROOT) else it.toString() })
+    }
+    setFolderType(MediaMetadata.FOLDER_TYPE_NONE)
+    setIsPlayable(true)
+    setExtras(
+        Bundle()
+            .setAlbumId(cursor.getAlbumId())
+            .setArtistId(cursor.getArtistId())
+            .setDuration(cursor.getSongDuration())
+            .setSongData(cursor.getSongData())
+    )
+    return this
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/data/GlobalData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/data/GlobalData.kt b/app/src/main/java/app/mango/music/data/GlobalData.kt
new file mode 100644
--- /dev/null	(date 1654506128056)
+++ b/app/src/main/java/app/mango/music/data/GlobalData.kt	(date 1654506128056)
@@ -0,0 +1,75 @@
+package app.mango.music.data
+
+import android.os.Handler
+import android.os.Looper
+import androidx.media3.common.MediaItem
+import androidx.media3.common.Player
+import app.mango.music.audio.partCopy
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+import kotlin.coroutines.CoroutineContext
+
+object GlobalData: CoroutineScope {
+    override val coroutineContext: CoroutineContext = Dispatchers.IO
+
+    private val handler = Handler(Looper.getMainLooper())
+    var getIsPlayingFromPlayer: () -> Boolean = { false }
+    var getPositionFromPlayer: () -> Long = { 0L }
+        set(value) {
+            field = value
+            stopUpdate()
+            updatePosition()
+        }
+    private fun stopUpdate() {
+        handler.removeCallbacks(this::updatePosition)
+    }
+
+    val currentIsPlaying: MutableStateFlow<Boolean> = MutableStateFlow(false)
+    val currentMediaItem: MutableStateFlow<MediaItem?> = MutableStateFlow(null)
+    val currentPlaylist: MutableStateFlow<List<MediaItem>> = MutableStateFlow(emptyList())
+    val currentPosition: MutableStateFlow<Long> = MutableStateFlow(0L)
+
+    val playerListener = object : Player.Listener {
+        override fun onMediaItemTransition(mediaItem: MediaItem?, reason: Int) {
+            launch { currentMediaItem.emit(mediaItem) }
+            updatePosition(true)
+        }
+    }
+
+    private var lastPlayState = false
+    fun updatePosition(force: Boolean = false) {
+        if (force) {
+            val isPlaying = getIsPlayingFromPlayer()
+            val position = getPositionFromPlayer()
+            launch {
+                currentIsPlaying.emit(isPlaying)
+                currentPosition.emit(position)
+            }
+            return
+        }
+        val isPlaying = getIsPlayingFromPlayer()
+        if (lastPlayState == isPlaying) {
+            val position = getPositionFromPlayer()
+            launch {
+                currentIsPlaying.emit(isPlaying)
+                currentPosition.emit(position)
+            }
+        } else {
+            lastPlayState = isPlaying
+        }
+        handler.postDelayed(this::updatePosition, 100)
+    }
+
+    suspend fun updateCurrentMediaItem(targetMediaItemId: String) = withContext(Dispatchers.IO) {
+        val mediaItem = currentMediaItem.value
+            ?: return@withContext
+
+        if (mediaItem.mediaId == targetMediaItemId) {
+            currentMediaItem.emit(mediaItem.partCopy())
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/drawable/MusicSwipeActionDrawable.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/drawable/MusicSwipeActionDrawable.kt b/app/src/main/java/app/mango/music/drawable/MusicSwipeActionDrawable.kt
new file mode 100644
--- /dev/null	(date 1654496866317)
+++ b/app/src/main/java/app/mango/music/drawable/MusicSwipeActionDrawable.kt	(date 1654496866317)
@@ -0,0 +1,144 @@
+package app.mango.music.drawable
+
+import android.animation.ValueAnimator
+import android.content.Context
+import android.graphics.*
+import android.graphics.drawable.Drawable
+import androidx.annotation.ColorInt
+import androidx.appcompat.content.res.AppCompatResources
+import app.mango.music.R
+import app.mango.music.utils.interpolate
+import app.mango.music.utils.interpolateArgb
+import app.mango.music.utils.themeColor
+import app.mango.music.utils.themeInterpolator
+import kotlin.math.abs
+import kotlin.math.hypot
+import kotlin.math.sin
+
+class MusicSwipeActionDrawable(context: Context) : Drawable() {
+
+    private val circlePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+        color = context.themeColor(com.google.android.material.R.attr.colorSecondary)
+        style = Paint.Style.FILL
+    }
+
+    private val circle = RectF()
+    private var cx = 0F
+    private var cr = 0F
+
+    private val icon = AppCompatResources.getDrawable(
+        context,
+        R.drawable.ic_favorite
+    )!!.apply {
+        setTintMode(PorterDuff.Mode.MULTIPLY)
+    }
+    private val iconMargin = context.resources.getDimension(R.dimen.grid_4)
+    private val iconIntrinsicWidth = icon.intrinsicWidth
+    private val iconIntrinsicHeight = icon.intrinsicHeight
+
+    @ColorInt private val iconTint = context.themeColor(com.google.android.material.R.attr.colorOnBackground)
+    @ColorInt private val iconTintActive = context.themeColor(com.google.android.material.R.attr.colorOnSecondary)
+
+    private val iconMaxScaleAddition = 0.5F
+
+    private var progress = 0F
+        set(value) {
+            val constrained = value.coerceIn(0F, 1F)
+            if (constrained != field) {
+                field = constrained
+                callback?.invalidateDrawable(this)
+            }
+        }
+    private var progressAnim: ValueAnimator? = null
+    private val dur = context.resources.getInteger(R.integer.motion_duration_medium)
+    private val interrupt = context.themeInterpolator(R.attr.motionInterpolatorPersistent)
+
+    override fun onBoundsChange(bounds: Rect?) {
+        if (bounds == null)  return
+        update()
+    }
+
+    private fun update() {
+        circle.set(
+            bounds.left.toFloat(),
+            bounds.top.toFloat(),
+            bounds.right.toFloat(),
+            bounds.bottom.toFloat()
+        )
+
+        val sideToIconCenter = iconMargin + (iconIntrinsicWidth / 2F)
+        cx = circle.left + iconMargin + (iconIntrinsicWidth / 2F)
+        // Get the longest visible distance at which the circle will be displayed (the hypotenuse of
+        // the triangle from the center of the icon, to the furthest side of the rect, to the top
+        // corner of the rect.
+        cr = hypot(circle.right - sideToIconCenter, (circle.height() / 2F))
+
+        callback?.invalidateDrawable(this)
+    }
+
+    override fun isStateful(): Boolean = true
+
+    override fun onStateChange(state: IntArray?): Boolean {
+        val initialProgress = progress
+        val newProgress = if (state?.contains(android.R.attr.state_activated) == true) {
+            1F
+        } else {
+            0F
+        }
+        progressAnim?.cancel()
+        progressAnim = ValueAnimator.ofFloat(initialProgress, newProgress).apply {
+            addUpdateListener {
+                progress = animatedValue as Float
+            }
+            interpolator = interrupt
+            duration = (abs(newProgress - initialProgress) * dur).toLong()
+        }
+        progressAnim?.start()
+        return newProgress == initialProgress
+    }
+
+    override fun draw(canvas: Canvas) {
+        // Draw the circular reveal background.
+        canvas.drawCircle(
+            cx,
+            circle.centerY(),
+            cr * progress,
+            circlePaint
+        )
+
+        // Map our progress range from 0-1 to 0-PI
+        val range = interpolate(
+            0F,
+            Math.PI.toFloat(),
+            progress
+        )
+        // Take the sin of our ranged progress * our maxScaleAddition as what we should
+        // increase the icon's scale by.
+        val additive = (sin(range.toDouble()) * iconMaxScaleAddition).coerceIn(0.0, 1.0)
+        val scaleFactor = 1 + additive
+        icon.setBounds(
+            (cx - (iconIntrinsicWidth / 2F) * scaleFactor).toInt(),
+            (circle.centerY() - (iconIntrinsicHeight / 2F) * scaleFactor).toInt(),
+            (cx + (iconIntrinsicWidth / 2F) * scaleFactor).toInt(),
+            (circle.centerY() + (iconIntrinsicHeight / 2F) * scaleFactor).toInt()
+        )
+
+        // Draw/animate the color of the icon
+        icon.setTint(
+            interpolateArgb(iconTint, iconTintActive, 0F, 0.15F, progress)
+        )
+
+        // Draw the icon
+        icon.draw(canvas)
+    }
+
+    override fun setAlpha(alpha: Int) {
+        circlePaint.alpha = alpha
+    }
+
+    override fun getOpacity(): Int = PixelFormat.TRANSLUCENT
+
+    override fun setColorFilter(filter: ColorFilter?) {
+        circlePaint.colorFilter = filter
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/ReboundingSwipeActionCallback.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/ReboundingSwipeActionCallback.kt b/app/src/main/java/app/mango/music/ui/ReboundingSwipeActionCallback.kt
new file mode 100644
--- /dev/null	(date 1655026477032)
+++ b/app/src/main/java/app/mango/music/ui/ReboundingSwipeActionCallback.kt	(date 1655026477032)
@@ -0,0 +1,119 @@
+package app.mango.music.ui
+
+import android.graphics.Canvas
+import android.view.View
+import androidx.recyclerview.widget.ItemTouchHelper
+import androidx.recyclerview.widget.RecyclerView
+import kotlin.math.abs
+import kotlin.math.ln
+
+private const val swipeReboundingElasticity = 0.8F
+
+private const val trueSwipeThreshold = 0.4F
+
+class ReboundingSwipeActionCallback : ItemTouchHelper.SimpleCallback(
+    0,
+    ItemTouchHelper.RIGHT or ItemTouchHelper.LEFT
+) {
+
+    interface ReboundableViewHolder {
+
+        val reboundableView: View
+
+        fun onReboundOffsetChanged(
+            currentSwipePercentage: Float,
+            swipeThreshold: Float,
+            currentTargetHasMetThresholdOnce: Boolean,
+            dampedCoefficient:Float
+        )
+
+        fun onReboundedFavorite()
+        fun onReboundedNext()
+    }
+
+    private var dampedCoefficient = 1F
+    private var currentTargetPosition: Int = -1
+    private var currentTargetHasMetThresholdOnce: Boolean = false
+
+    override fun getSwipeThreshold(viewHolder: RecyclerView.ViewHolder): Float = Float.MAX_VALUE
+
+    override fun getSwipeVelocityThreshold(defaultValue: Float): Float {
+        return Float.MAX_VALUE
+    }
+
+    override fun getSwipeEscapeVelocity(defaultValue: Float): Float {
+        return Float.MAX_VALUE
+    }
+
+    override fun onMove(
+        recyclerView: RecyclerView,
+        viewHolder: RecyclerView.ViewHolder,
+        target: RecyclerView.ViewHolder
+    ): Boolean = false
+
+    override fun clearView(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder) {
+
+        if (currentTargetHasMetThresholdOnce && viewHolder is ReboundableViewHolder){
+            currentTargetHasMetThresholdOnce = false
+            if(dampedCoefficient>0)viewHolder.onReboundedFavorite()
+            else viewHolder.onReboundedNext()
+        }
+        super.clearView(recyclerView, viewHolder)
+    }
+
+    override fun onChildDraw(
+        c: Canvas,
+        recyclerView: RecyclerView,
+        viewHolder: RecyclerView.ViewHolder,
+        dX: Float,
+        dY: Float,
+        actionState: Int,
+        isCurrentlyActive: Boolean
+    ) {
+        if (viewHolder !is ReboundableViewHolder) return
+        if (currentTargetPosition != viewHolder.absoluteAdapterPosition) {
+            currentTargetPosition = viewHolder.absoluteAdapterPosition
+            currentTargetHasMetThresholdOnce = false
+        }
+
+        val itemView = viewHolder.itemView
+        val currentSwipePercentage = abs(dX) / itemView.width
+        viewHolder.onReboundOffsetChanged(
+            currentSwipePercentage,
+            trueSwipeThreshold,
+            currentTargetHasMetThresholdOnce,
+            dampedCoefficient
+        )
+        translateReboundingView(itemView, viewHolder, dX,isCurrentlyActive)
+
+        if (currentSwipePercentage >= trueSwipeThreshold &&
+            !currentTargetHasMetThresholdOnce) {
+            currentTargetHasMetThresholdOnce = true
+        }
+    }
+
+    private fun translateReboundingView(
+        itemView: View,
+        viewHolder: ReboundableViewHolder,
+        dX: Float,
+        isCurrentlyActive:Boolean
+    ) {
+
+        dampedCoefficient = if(isCurrentlyActive&&dX>0) 1F
+        else if(isCurrentlyActive&&dX<0) -1F
+        else dampedCoefficient
+        
+        val swipeDismissDistanceHorizontal = itemView.width * trueSwipeThreshold
+        val dragFraction = ln(
+            (1 + (dampedCoefficient*dX / swipeDismissDistanceHorizontal)).toDouble()) / dampedCoefficient*ln(3.toDouble()
+        )
+        val dragTo = dragFraction * swipeDismissDistanceHorizontal *
+            swipeReboundingElasticity
+
+        viewHolder.reboundableView.translationX = dragTo.toFloat()
+    }
+
+    override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/SearchFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/SearchFragment.kt b/app/src/main/java/app/mango/music/ui/SearchFragment.kt
new file mode 100644
--- /dev/null	(date 1654659937443)
+++ b/app/src/main/java/app/mango/music/ui/SearchFragment.kt	(date 1654659937443)
@@ -0,0 +1,57 @@
+package app.mango.music.ui
+
+import android.os.Bundle
+import android.view.View
+import androidx.recyclerview.widget.GridLayoutManager
+import androidx.recyclerview.widget.LinearLayoutManager
+import app.mango.music.R
+import app.mango.music.databinding.FragmentSearchBinding
+import app.mango.music.manager.SpManager
+import com.google.android.material.transition.MaterialSharedAxis
+import kotlinx.coroutines.flow.collect
+import kotlinx.coroutines.launch
+
+class SearchFragment:BaseFragment<FragmentSearchBinding>() {
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        enterTransition = MaterialSharedAxis(MaterialSharedAxis.Z, true).apply {
+            duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+        }
+        returnTransition = MaterialSharedAxis(MaterialSharedAxis.Z, false).apply {
+            duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+        }
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        binding.searchToolbar.setNavigationOnClickListener {
+            navController.navigateUp()
+        }
+        binding.viewmodel = musicViewModel
+        binding.lifecycleOwner = this
+        binding.executePendingBindings()
+        binding.recyclerView.run {
+            adapter = musicAdapter
+            ThemedFastScroller.create(this)
+            SpManager.listen(getString(R.string.key_set_list_filter_grid),
+                SpManager.SpIntListener(getString(R.string.set_list_filter_grid_def).toInt()) {
+                    layoutManager = GridLayoutManager(context,it)
+                })
+            itemTouchHelper()
+            scrollVisibility(binding.divider)
+        }
+
+        repeatWithViewLifecycle {
+            launch {
+                musicViewModel.searchSongs.collect {
+                    musicAdapter.submitList(it)
+                }
+            }
+        }
+    }
+
+    override fun setBinding(): FragmentSearchBinding = FragmentSearchBinding.inflate(layoutInflater)
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/views/PlayButton.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/PlayButton.kt b/app/src/main/java/app/mango/music/views/PlayButton.kt
new file mode 100644
--- /dev/null	(date 1653988351487)
+++ b/app/src/main/java/app/mango/music/views/PlayButton.kt	(date 1653988351487)
@@ -0,0 +1,36 @@
+package app.mango.music.views
+
+import android.content.Context
+import android.util.AttributeSet
+import android.widget.Checkable
+import app.mango.music.drawable.PlayPauseDrawable
+import com.google.android.material.floatingactionbutton.FloatingActionButton
+
+class PlayButton @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+): FloatingActionButton(context, attrs, defStyleAttr), Checkable {
+
+    private var _checked = false
+
+    private val drawable = PlayPauseDrawable(context)
+
+    override fun setChecked(checked: Boolean) {
+        _checked = checked
+        if (!checked) {
+            drawable.setPlay(true)
+        } else {
+            drawable.setPause(true)
+        }
+        setImageDrawable(drawable)
+    }
+
+    override fun isChecked(): Boolean {
+        return _checked
+    }
+
+    override fun toggle() {
+        isChecked = !_checked
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/views/PlayButtonMin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/views/PlayButtonMin.kt b/app/src/main/java/app/mango/music/views/PlayButtonMin.kt
new file mode 100644
--- /dev/null	(date 1654497716263)
+++ b/app/src/main/java/app/mango/music/views/PlayButtonMin.kt	(date 1654497716263)
@@ -0,0 +1,34 @@
+package app.mango.music.views
+
+import android.content.Context
+import android.util.AttributeSet
+import android.widget.Checkable
+import androidx.appcompat.widget.AppCompatImageView
+import app.mango.music.drawable.PlayPauseDrawable
+
+class PlayButtonMin @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+): AppCompatImageView(context, attrs, defStyleAttr), Checkable {
+
+    private var _checked = false
+
+    private val drawable = PlayPauseDrawable(context)
+
+    override fun setChecked(checked: Boolean) {
+        _checked = checked
+        if (!checked) {
+            drawable.setPlay(true)
+        } else {
+            drawable.setPause(true)
+        }
+        setImageDrawable(drawable)
+    }
+
+    override fun isChecked(): Boolean = _checked
+
+    override fun toggle() {
+        isChecked = !_checked
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/service/SongBrowser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/service/SongBrowser.kt b/app/src/main/java/app/mango/music/service/SongBrowser.kt
new file mode 100644
--- /dev/null	(date 1655022863957)
+++ b/app/src/main/java/app/mango/music/service/SongBrowser.kt	(date 1655022863957)
@@ -0,0 +1,232 @@
+package app.mango.music.service
+
+import android.content.ComponentName
+import android.content.Context
+import android.content.SharedPreferences
+import android.net.Uri
+import androidx.lifecycle.DefaultLifecycleObserver
+import androidx.lifecycle.LifecycleOwner
+import androidx.media3.common.MediaItem
+import androidx.media3.common.Player
+import androidx.media3.common.Timeline
+import androidx.media3.common.util.UnstableApi
+import androidx.media3.session.MediaBrowser
+import androidx.media3.session.MediaLibraryService
+import androidx.media3.session.SessionToken
+import app.mango.music.data.ALL_ID
+import app.mango.music.data.BaseMediaSource
+import app.mango.music.data.GlobalData
+import app.mango.music.data.ITEM_PREFIX
+import app.mango.music.manager.Config
+import com.blankj.utilcode.util.GsonUtils
+import com.google.common.reflect.TypeToken
+import com.google.common.util.concurrent.ListenableFuture
+import com.google.common.util.concurrent.MoreExecutors
+import dagger.hilt.android.qualifiers.ApplicationContext
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+import javax.inject.Inject
+import javax.inject.Singleton
+import kotlin.coroutines.CoroutineContext
+
+@Singleton
+class SongBrowser @Inject constructor(
+    @ApplicationContext
+    private val context: Context,
+    private val mediaSource: BaseMediaSource
+) : DefaultLifecycleObserver, CoroutineScope, EnhanceBrowser {
+
+    companion object{
+        private const val TAG = "SongBrowser"
+    }
+
+    override val coroutineContext: CoroutineContext = Dispatchers.IO
+    private lateinit var browserFuture: ListenableFuture<MediaBrowser>
+
+    private val lastPlayedSp: SharedPreferences by lazy {
+        context.getSharedPreferences(Config.LAST_PLAYED_SP, Context.MODE_PRIVATE)
+    }
+
+    val browser: MediaBrowser?
+        get() = if (browserFuture.isDone) browserFuture.get() else null
+
+    var originPlaylistIds: List<String> = emptyList()
+
+    @UnstableApi
+    override fun onStart(owner: LifecycleOwner) {
+        browserFuture = MediaBrowser.Builder(
+            context, SessionToken(context, ComponentName(context, SongService::class.java))
+        ).setListener(MyBrowserListener()).buildAsync()
+        browserFuture.addListener({ onConnected() }, MoreExecutors.directExecutor())
+    }
+
+    override fun onStop(owner: LifecycleOwner) {
+        MediaBrowser.releaseFuture(browserFuture)
+    }
+
+    private inner class MyBrowserListener : MediaBrowser.Listener {
+        override fun onChildrenChanged(
+            browser: MediaBrowser,
+            parentId: String,
+            itemCount: Int,
+            params: MediaLibraryService.LibraryParams?
+        ) {}
+    }
+
+    private fun onConnected() {
+        val browser = browserFuture.get() ?: return
+
+        if (browser.mediaItemCount == 0 || browser.currentMediaItem == null) {
+            recoverLastPlayedItem()
+        }
+
+        browser.addListener(object : Player.Listener {
+            override fun onTimelineChanged(timeline: Timeline, reason: Int) {
+                val ids = MutableList(browser.mediaItemCount) {
+                    return@MutableList browser.getMediaItemAt(it).mediaId
+                }
+
+                launch(Dispatchers.Main) {
+                    originPlaylistIds = ids
+                    GlobalData.currentPlaylist.emit(ids.mapNotNull {
+                        mediaSource.getItemById(
+                            ITEM_PREFIX + it
+                        )
+                    })
+                }
+            }
+        })
+    }
+
+    override fun togglePlay(): Boolean {
+        when (browser?.isPlaying) {
+            true -> browser?.pause()
+            false -> browser?.play()
+            else -> {}
+        }
+        return browser?.isPlaying == true
+    }
+
+    private fun recoverLastPlayedItem() =
+        launch(Dispatchers.IO) {
+            val items = recoverLastPlayedList()
+            val index = lastPlayedSp.getString(Config.LAST_PLAYED_ID, null)?.let { id ->
+                items.indexOfFirst { it.mediaId == id }
+            }?.coerceAtLeast(0) ?: 0
+            withContext(Dispatchers.Main) {
+                browser?.setMediaItems(items)
+                browser?.repeatMode = Player.REPEAT_MODE_ALL
+                browser?.seekToDefaultPosition(index)
+                browser?.prepare()
+            }
+        }
+
+    private suspend fun recoverLastPlayedList(): List<MediaItem> =
+        withContext(Dispatchers.IO) {
+            lastPlayedSp.getString(Config.LAST_PLAYED_LIST, null)?.let { json ->
+                val typeToken = object : TypeToken<List<String>>() {}
+                return@withContext GsonUtils.fromJson<List<String>>(json, typeToken.type)
+                    .mapNotNull { mediaSource.getItemById(ITEM_PREFIX + it) }
+            }
+            return@withContext mediaSource.getChildren(ALL_ID) ?: emptyList()
+        }
+
+    override fun playByUri(uri: Uri): Boolean {
+        browser?.apply {
+            addMediaItem(currentMediaItemIndex, MediaItem.fromUri(uri))
+            seekToDefaultPosition(currentMediaItemIndex)
+            prepare()
+            play()
+        }
+        return true
+    }
+
+    override fun playById(mediaId: String): Boolean {
+        return try {
+            val index = originPlaylistIds.indexOf(mediaId)
+            browser?.seekToDefaultPosition(index)
+            index >= 0
+        }catch (e:Exception){
+            e.printStackTrace()
+            false
+        }
+    }
+
+    override fun playById(mediaId: String, playWhenReady: Boolean): Boolean {
+        if (playById(mediaId) && playWhenReady) {
+            browser?.apply {
+                prepare()
+                play()
+            }
+            return true
+        }
+        return false
+    }
+
+    override fun addToNext(mediaId: String): Boolean {
+        val currentIndex = browser?.currentMediaItemIndex ?: return false
+        if (currentIndex < 0) return false
+
+        val nowIndex = originPlaylistIds.indexOf(mediaId)
+        if (currentIndex == nowIndex || (currentIndex + 1) == nowIndex) return false
+
+        if (nowIndex >= 0) {
+            val targetIndex = if (nowIndex < currentIndex) currentIndex else currentIndex + 1
+            browser?.moveMediaItem(nowIndex, targetIndex)
+        } else {
+            val item = mediaSource.getItemById(ITEM_PREFIX + mediaId) ?: return false
+            browser?.addMediaItem(currentIndex + 1, item)
+        }
+        return true
+    }
+
+    private var lastRemovedItem: MediaItem? = null
+    private var lastRemovedIndex: Int = -1
+    private var lastPlayIndex: Int = -1
+
+    override fun removeById(mediaId: String): Boolean {
+        browser ?: return false
+        return try {
+            lastRemovedIndex = originPlaylistIds.indexOf(mediaId)
+            if (lastRemovedIndex == browser!!.currentMediaItemIndex) {
+                GlobalData.currentMediaItem.tryEmit(
+                    browser!!.getMediaItemAt(browser!!.nextMediaItemIndex)
+                )
+            }
+            lastPlayIndex = browser!!.currentMediaItemIndex
+            lastRemovedItem = browser!!.getMediaItemAt(lastRemovedIndex)
+            browser!!.removeMediaItem(lastRemovedIndex)
+            true
+        } catch (e: Exception) {
+            false
+        }
+    }
+
+    override fun revokeRemove(): Boolean {
+        if (lastRemovedIndex < 0 || lastRemovedItem == null || browser == null)
+            return false
+
+        if (lastRemovedIndex >= browser!!.mediaItemCount) {
+            browser!!.addMediaItem(lastRemovedItem!!)
+        } else {
+            browser!!.addMediaItem(lastRemovedIndex, lastRemovedItem!!)
+        }
+
+        if (lastPlayIndex == lastRemovedIndex) {
+            browser!!.seekToDefaultPosition(lastPlayIndex)
+        }
+        return true
+    }
+
+    override fun moveByDelta(mediaId: String, delta: Int): Boolean {
+        return try {
+            val index = originPlaylistIds.indexOf(mediaId)
+            browser?.moveMediaItem(index, index + delta)
+            true
+        } catch (e: Exception) {
+            false
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
new file mode 100644
--- /dev/null	(date 1655349502992)
+++ b/app/src/main/res/values/strings.xml	(date 1655349502992)
@@ -0,0 +1,161 @@
+<resources>
+    <string name="app_name" translatable="false">Mango Music</string>
+    <string name="lrc_label">暂无歌词</string>
+    <string name="ok">确定</string>
+    <string name="cancel">取消</string>
+
+    <string name="navigation_music">音乐库</string>
+    <string name="navigation_favorite">收藏</string>
+    <string name="navigation_album">专辑</string>
+    <string name="navigation_artist">艺术家</string>
+    <string name="navigation_style">风格</string>
+    <string name="navigation_sync">扫描</string>
+
+    <string name="menu_item_delete">删除</string>
+    <string name="menu_item_favorite">收藏</string>
+    <string name="menu_item_search">搜索</string>
+    <string name="menu_item_filters">过滤</string>
+    <string name="menu_item_grid_view">网格大小</string>
+    <string name="menu_item_settings">设置</string>
+
+    <string name="search_suggestion_hint">歌手、专辑、歌曲名</string>
+
+    <!-- request -->
+    <string name="show_delete_dialog">确定要删除 %1$s ?\n\n注意，此操作无法撤销！</string>
+    <string name="show_delete_dialog_pos">确定删除</string>
+    <string name="music_add_next">下一首播放</string>
+    <string name="music_share_file">分享文件</string>
+
+    <string name="show_forward_to_settings_dialog">您需要在“设置”中手动授予必要的权限</string>
+    <string name="show_request_reason_dialog">程序运行需要文件读取权限</string>
+    <string name="show_request_reason_dialog_pos">@string/ok</string>
+    <string name="show_request_reason_dialog_neg">@string/cancel</string>
+
+    <!--Music Library Fragment-->
+    <string name="music_card_transition_name" translatable="false">music_card_%1$s</string>
+    <string name="music_card_detail_transition_name" translatable="false">music_card_detail</string>
+
+    <!-- MainActivity -->
+
+    <!-- Detail -->
+    <string name="detail_music_count">相关歌曲(%1$s)</string>
+
+    <!-- Service -->
+    <string name="text_button_play">播放</string>
+    <string name="text_button_pause">暂停</string>
+    <string name="text_button_search">搜索</string>
+    <string name="text_button_settings">设置</string>
+    <string name="text_button_previous">前一首</string>
+    <string name="text_button_next">后一首</string>
+    <string name="text_button_repeat_one">单曲循环</string>
+    <string name="text_button_repeat_all">列表循环</string>
+    <string name="text_button_shuffle_on">随机播放</string>
+    <string name="text_button_close">关闭</string>
+    <string name="text_button_cancel" translatable="false">@string/cancel</string>
+    <string name="text_button_confirm" translatable="false">@string/ok</string>
+
+    <!-- Playlist -->
+    <string name="playlist_title">播放列表(%1$s)</string>
+
+    <!-- Strings used for fragments for navigation -->
+    <string name="home_fragment_label">主页</string>
+    <string name="search_fragment_label">搜索</string>
+    <string name="settings_fragment_label">设置</string>
+    <string name="detail_fragment_label">详细</string>
+    <string name="style_fragment_label">风格</string>
+    <string name="playing_fragment_label">播放</string>
+
+    <!-- Preference -->
+    <string name="set_theme">主题</string>
+    <string name="set_theme_color_filter">颜色过滤</string>
+    <string name="key_set_theme_color_filter">key_set_theme_color_filter</string>
+    <string name="set_theme_dark_mode">黑暗模式</string>
+    <string name="set_theme_dark_mode_def" translatable="false">0</string>
+    <string name="key_set_theme_dark_mode" translatable="false">KEY_SET_THEME_DARK_MODE</string>
+    <string-array name="set_theme_dark_mode_value" translatable="false">
+        <item>0</item>
+        <item>1</item>
+        <item>2</item>
+    </string-array>
+    <string-array name="set_theme_dark_mode_entries">
+        <item>跟随系统</item>
+        <item>浅色</item>
+        <item>深色</item>
+    </string-array>
+
+    <string name="set_sync">歌曲过滤</string>
+    <string name="set_sync_unknown">过滤未知歌手</string>
+    <string name="key_set_sync_unknown" translatable="false">KEY_SETTINGS_MEDIA_UNKNOWN_FILTER</string>
+
+    <string name="set_play">播放</string>
+    <string name="set_play_with_other">允许和其他程序一起播放</string>
+    <string name="set_play_with_other_summary_on">失去焦点时继续播放</string>
+    <string name="set_play_with_other_summary_off">失去焦点时暂停</string>
+    <string name="key_set_play_with_other" translatable="false">KEY_SETTINGS_IGNORE_AUDIO_FOCUS</string>
+
+    <string name="set_play_playback_parameters">播放速度</string>
+    <string name="key_set_play_playback_parameters" translatable="false">KEY_SETTINGS_PLAYBACK_PARAMETERS</string>
+    <string-array name="set_play_playback_parameters_value" translatable="false">
+        <item>0.5</item>
+        <item>0.75</item>
+        <item>1</item>
+        <item>1.25</item>
+        <item>1.5</item>
+        <item>2</item>
+        <item>3</item>
+    </string-array>
+    <string-array name="set_play_playback_parameters_entries" translatable="false">
+        <item>X 0.5</item>
+        <item>X 0.75</item>
+        <item>X 1</item>
+        <item>X 1.25</item>
+        <item>X 1.5</item>
+        <item>X 2</item>
+        <item>X 3</item>
+    </string-array>
+    <string name="set_play_playback_parameters_def" translatable="false">1</string>
+    <string name="set_play_volume">音量</string>
+    <string name="key_set_play_volume" translatable="false">KEY_SETTINGS_VOLUME</string>
+    <string name="key_set_play_summary">调整应用内音量</string>
+    <integer name="set_play_volume_max">100</integer>
+    <integer name="set_play_volume_min">0</integer>
+    <integer name="set_play_volume_def">@integer/set_play_volume_max</integer>
+
+    <string name="set_list_filter_sort">排序</string>
+    <string name="set_list_filter_sort_def">添加时间</string>
+    <string-array name="set_list_filter_sort_entries">
+        <item>@string/set_list_filter_sort_def</item>
+        <item>标题</item>
+    </string-array>
+    <string-array name="set_list_filter_sort_value" translatable="false">
+        <item>add date</item>
+        <item>title</item>
+    </string-array>
+    <string name="key_set_list_filter_sort" translatable="false">key_set_list_filter_sort</string>
+    <string name="set_list_filter_grid">网格数量</string>
+    <string name="key_set_list_filter_grid" translatable="false">key_set_list_filter_grid</string>
+    <string name="set_list_filter_grid_def" translatable="false">1</string>
+    <string name="set_list_filter_grid_summary">专辑和艺术家网格数量+2</string>
+    <integer name="set_list_filter_grid_max">3</integer>
+    <integer name="set_list_filter_grid_min">1</integer>
+
+    <string name="set_audio_effect">音效</string>
+    <string name="key_set_audio_effect" translatable="false">key_set_audio_effect</string>
+    <string name="set_audio_effect_enable">启用均衡器</string>
+    <string name="set_audio_effect_reset">重置均衡器</string>
+    <string name="set_audio_effect_reset_message">重置后无法恢复，确定要重置？</string>
+    <string name="set_audio_effect_reset_ok">重置</string>
+    <string name="set_audio_effect_reset_cancel" translatable="false">@string/cancel</string>
+    <string name="set_audio_effect_seek_enable">锁定均衡器</string>
+    <string name="key_set_audio_effect_seek_enable" translatable="false">key_set_audio_effect_seek_enable</string>
+    <string name="key_set_audio_effect_enable" translatable="false">KEY_SETTINGS_AUDIO_EFFECT</string>
+    <string name="set_audio_effect_boost_enable">启用低音</string>
+    <string name="key_set_audio_effect_boost" translatable="false">KEY_SETTINGS_AUDIO_EFFECT_BOOST</string>
+    <string name="set_audio_effect_boost_value">低音强度</string>
+    <string name="key_set_audio_effect_boost_value" translatable="false">KEY_SETTINGS_AUDIO_EFFECT_BOOST_VALUE</string>
+    <integer name="set_audio_effect_boost_min">0</integer>
+    <integer name="set_audio_effect_boost_max">19</integer>
+    <string name="set_audio_effect_presets">预设</string>
+    <string name="key_set_audio_effect_presets" translatable="false">key_set_audio_effect_presets</string>
+
+</resources>
\ No newline at end of file
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
new file mode 100644
--- /dev/null	(date 1655028739446)
+++ b/app/src/main/res/layout/activity_main.xml	(date 1655028739446)
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <androidx.coordinatorlayout.widget.CoordinatorLayout
+        android:background="?scrimBackground"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:paddingLeftSystemWindowInsets="@{true}"
+        app:paddingRightSystemWindowInsets="@{true}"
+        tools:context=".ui.main.MainActivity">
+
+        <include layout="@layout/content_main" />
+
+        <com.google.android.material.bottomappbar.BottomAppBar
+            android:id="@+id/bottom_app_bar"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom"
+            app:fabAlignmentMode="center"
+            app:menu="@menu/bottom_app_bar_home_menu"
+            app:fabCradleRoundedCornerRadius="@dimen/bottom_app_bar_fab_cradle_corner_radius"
+            app:fabCradleMargin="@dimen/bottom_app_bar_fab_cradle_margin"
+            app:hideOnScroll="true">
+
+            <LinearLayout
+                android:id="@+id/bottom_app_bar_content_container"
+                android:layout_width="wrap_content"
+                android:layout_height="@dimen/min_touch_target_size"
+                android:layout_marginVertical="@dimen/grid_0_5"
+                android:paddingHorizontal="@dimen/grid_0_5"
+                android:orientation="horizontal"
+                android:gravity="center_vertical"
+                android:background="@drawable/bottom_app_bar_title_foreground">
+
+                <ImageView
+                    android:id="@+id/bottom_app_bar_chevron"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center_vertical"
+                    app:tint="?attr/colorControlNormal"
+                    app:srcCompat="@drawable/ic_arrow_up"
+                    tools:ignore="ContentDescription" />
+
+                <ImageView
+                    android:id="@+id/bottom_app_bar_logo"
+                    android:layout_width="@dimen/bottom_app_bar_logo_size"
+                    android:layout_height="@dimen/bottom_app_bar_logo_size"
+                    android:layout_marginLeft="@dimen/grid_1"
+                    android:layout_gravity="center_vertical"
+                    app:srcCompat="@drawable/ic_menu"
+                    tools:ignore="ContentDescription" />
+
+                <TextView
+                    android:id="@+id/bottom_app_bar_title"
+                    android:textAppearance="?attr/textAppearanceBody1"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center_vertical"
+                    android:layout_marginHorizontal="@dimen/grid_1"
+                    android:text="@string/navigation_music"
+                    android:textColor="?attr/colorControlNormal"/>
+
+            </LinearLayout>
+
+        </com.google.android.material.bottomappbar.BottomAppBar>
+
+        <app.mango.music.views.PlayStateButton
+            android:id="@+id/fab"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            app:layout_anchor="@id/bottom_app_bar" />
+
+    </androidx.coordinatorlayout.widget.CoordinatorLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/res/xml/filepaths.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/filepaths.xml b/app/src/main/res/xml/filepaths.xml
new file mode 100644
--- /dev/null	(date 1615100463312)
+++ b/app/src/main/res/xml/filepaths.xml	(date 1615100463312)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<paths>
+    <external-path
+        name="external_storage_root"
+        path="." />
+    <files-path
+        name="files-path"
+        path="." />
+    <cache-path
+        name="cache-path"
+        path="." />
+    <!--/storage/emulated/0/Android/data/...-->
+    <external-files-path
+        name="external_file_path"
+        path="." />
+    <!--代表app 外部存储区域根目录下的文件 Context.getExternalCacheDir目录下的目录-->
+    <external-cache-path
+        name="external_cache_path"
+        path="." />
+    <!--配置root-path。这样子可以读取到sd卡和一些应用分身的目录，否则微信分身保存的图片，就会导致 java.lang.IllegalArgumentException: Failed to find configured root that contains /storage/emulated/999/tencent/MicroMsg/WeiXin/export1544062754693.jpg，在小米6的手机上微信分身有这个crash，华为没有-->
+    <root-path
+        name="root-path"
+        path="" />
+</paths>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_music_library.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_music_library.xml b/app/src/main/res/layout/fragment_music_library.xml
new file mode 100644
--- /dev/null	(date 1654576100483)
+++ b/app/src/main/res/layout/fragment_music_library.xml	(date 1654576100483)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/recycler_view"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:clipToPadding="false"
+        android:paddingBottom="80dp"
+        android:transitionGroup="true"
+        android:scrollbars="none"
+        android:overScrollMode="never"
+        app:paddingTopSystemWindowInsets="@{true}" />
+
+</layout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_playing.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_playing.xml b/app/src/main/res/layout/fragment_playing.xml
new file mode 100644
--- /dev/null	(date 1655350122909)
+++ b/app/src/main/res/layout/fragment_playing.xml	(date 1655350122909)
@@ -0,0 +1,294 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <data>
+        <variable
+            name="media"
+            type="androidx.media3.common.MediaItem" />
+        <variable
+            name="listener"
+            type="app.mango.music.ui.BaseFragment.ControlListener" />
+        <variable
+            name="duration"
+            type="app.mango.music.audio.PlayDuration" />
+        <variable
+            name="position"
+            type="app.mango.music.audio.PlayPosition" />
+    </data>
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:paddingBottomSystemWindowInsets="@{true}"
+        tools:context=".MainActivity">
+
+        <fragment
+            android:tag="app.mango.music.ui.DisplayFragment"
+            android:name="app.mango.music.ui.DisplayFragment"
+            app:layout_constraintEnd_toEndOf="@id/layoutPlayer"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintBottom_toTopOf="@id/layoutPlayer"
+            app:layout_constraintTop_toBottomOf="@id/buttonShare"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"/>
+
+        <View
+            android:id="@+id/viewSupporterForAlbumArt"
+            android:layout_width="1dp"
+            android:layout_height="1dp"
+            app:layout_constraintBottom_toTopOf="@id/layoutPlayer"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent" />
+
+
+        <View
+            android:id="@+id/view1"
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            app:layout_constraintBottom_toTopOf="@id/viewSupporterForAlbumArt"
+            app:layout_constraintEnd_toStartOf="@id/viewSupporterForAlbumArt"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent" />
+
+        <ImageView
+            android:id="@+id/cover"
+            android:layout_width="0dp"
+            android:layout_height="260dp"
+            tools:listitem="@layout/row_music"
+            app:layout_constraintBottom_toBottomOf="@+id/viewSupporterForAlbumArt"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="@+id/viewSupporterForAlbumArt" />
+
+        <ImageView
+            android:background="?selectableItemBackgroundBorderless"
+            android:id="@+id/buttonKeyDown"
+            android:layout_width="40dp"
+            android:layout_height="40dp"
+            android:layout_marginStart="10dp"
+            android:layout_marginTop="30dp"
+            android:padding="8dp"
+            android:rotation="180"
+            android:src="@drawable/ic_arrow_up"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            android:contentDescription="TODO" />
+
+        <ImageView
+            android:id="@+id/buttonShare"
+            android:layout_width="40dp"
+            android:layout_height="40dp"
+            android:layout_marginEnd="10dp"
+            android:layout_marginTop="30dp"
+            android:padding="8dp"
+            android:src="@drawable/ic_share"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            android:background="?selectableItemBackgroundBorderless"
+            android:contentDescription="TODO" />
+
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/layoutPlayer"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:layout_constraintBottom_toBottomOf="parent">
+
+
+            <app.mango.music.views.PlayButton
+                android:id="@+id/button_play"
+                android:onClick="@{(view)->listener.togglePlay()}"
+                android:layout_width="60dp"
+                android:layout_height="60dp"
+                android:layout_marginBottom="30dp"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintBottom_toTopOf="@+id/buttonVolume"
+                android:contentDescription="TODO" />
+
+            <ImageButton
+                android:background="@drawable/play_button_background"
+                android:id="@+id/buttonPrevious"
+                android:layout_width="45dp"
+                android:layout_height="45dp"
+                android:layout_marginEnd="20dp"
+                android:padding="4dp"
+                android:onClick="@{(view)->listener.previous()}"
+                android:src="@drawable/ic_skip_previous"
+                app:layout_constraintEnd_toStartOf="@id/button_play"
+                app:layout_constraintBottom_toBottomOf="@id/button_play"
+                app:layout_constraintTop_toTopOf="@id/button_play"
+                android:contentDescription="TODO" />
+
+            <ImageButton
+                android:background="@drawable/play_button_background"
+                android:id="@+id/buttonNext"
+                android:layout_width="45dp"
+                android:layout_height="45dp"
+                android:layout_marginStart="20dp"
+                android:padding="4dp"
+                android:onClick="@{(view)->listener.next()}"
+                android:src="@drawable/ic_skip_next"
+                app:layout_constraintStart_toEndOf="@id/button_play"
+                app:layout_constraintBottom_toBottomOf="@id/button_play"
+                app:layout_constraintTop_toTopOf="@id/button_play"
+                android:contentDescription="TODO" />
+
+            <app.mango.music.views.IconStateButton
+                android:id="@+id/buttonShuffle"
+                android:layout_width="30dp"
+                android:layout_height="30dp"
+                android:layout_marginStart="30dp"
+                android:padding="4dp"
+                android:background="?selectableItemBackgroundBorderless"
+                android:src="@drawable/ic_shuffle"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintBottom_toBottomOf="@id/button_play"
+                app:layout_constraintTop_toTopOf="@id/button_play" />
+
+            <app.mango.music.views.IconStateButton
+                android:id="@+id/buttonRepeat"
+                android:layout_width="30dp"
+                android:layout_height="30dp"
+                android:layout_marginEnd="30dp"
+                android:padding="4dp"
+                android:background="?selectableItemBackgroundBorderless"
+                android:src="@drawable/ic_repeat"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintBottom_toBottomOf="@id/button_play"
+                app:layout_constraintTop_toTopOf="@id/button_play" />
+
+            <app.mango.music.views.MusicSeekBar
+                android:progress="@{position.value}"
+                android:max="@{duration.value}"
+                android:id="@+id/playerSeekbar"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:paddingStart="16dp"
+                android:paddingEnd="16dp"
+                android:layout_marginBottom="25dp"
+                android:theme="@style/SeekbarTheme"
+                app:layout_constraintEnd_toStartOf="@id/textTotalTime"
+                app:layout_constraintStart_toEndOf="@id/textCurrentTime"
+                app:layout_constraintBottom_toTopOf="@+id/button_play" />
+
+            <TextView
+                android:id="@+id/textCurrentTime"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="5dp"
+                android:padding="4dp"
+                app:music_duration="@{position}"
+                android:textColor="?attr/colorPrimaryVariant"
+                android:textSize="16sp"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintBottom_toBottomOf="@id/playerSeekbar"
+                app:layout_constraintTop_toTopOf="@id/playerSeekbar" />
+
+            <TextView
+                android:id="@+id/textTotalTime"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginEnd="5dp"
+                android:padding="4dp"
+                app:music_duration="@{duration}"
+                android:textColor="?attr/colorPrimaryVariant"
+                android:textSize="16sp"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintBottom_toBottomOf="@id/playerSeekbar"
+                app:layout_constraintTop_toTopOf="@id/playerSeekbar"/>
+
+            <TextView
+                android:id="@+id/textMusicTitle"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:text="@{media.mediaMetadata.title}"
+                android:textColor="?attr/colorPrimaryVariant"
+                android:textSize="20sp"
+                android:textStyle="bold"
+                android:layout_marginStart="50dp"
+                android:layout_marginEnd="50dp"
+                android:layout_marginBottom="40dp"
+                app:layout_constraintBottom_toTopOf="@+id/playerSeekbar" />
+
+            <TextView
+                android:id="@+id/textMusicArtist"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:text="@{media.mediaMetadata.artist}"
+                android:textColor="?attr/colorPrimaryVariant"
+                android:textSize="16sp"
+                android:textStyle="bold"
+                android:layout_marginStart="50dp"
+                android:layout_marginEnd="50dp"
+                android:layout_marginBottom="30dp"
+                app:layout_constraintTop_toBottomOf="@+id/textMusicTitle" />
+
+            <app.mango.music.views.IconStateButton
+                android:id="@+id/buttonFavorite"
+                android:layout_width="30dp"
+                android:layout_height="30dp"
+                android:layout_marginStart="10dp"
+                android:padding="4dp"
+                android:src="@drawable/ic_favorite"
+                android:background="?selectableItemBackgroundBorderless"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintBottom_toBottomOf="@id/textMusicTitle"
+                app:layout_constraintTop_toTopOf="@id/textMusicTitle"
+                tools:ignore="UseAppTint" />
+
+            <ImageView
+                android:id="@+id/buttonRadio"
+                android:layout_width="30dp"
+                android:layout_height="30dp"
+                android:layout_marginEnd="10dp"
+                android:padding="4dp"
+                android:src="@drawable/ic_radio"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintBottom_toBottomOf="@id/textMusicTitle"
+                app:layout_constraintTop_toTopOf="@id/textMusicTitle"
+                tools:ignore="ContentDescription" />
+
+            <ImageButton
+                android:id="@+id/buttonVolume"
+                android:layout_width="30dp"
+                android:layout_height="30dp"
+                android:layout_marginStart="30dp"
+                android:layout_marginBottom="10dp"
+                android:padding="4dp"
+                android:src="@drawable/ic_graphic_eq"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintBottom_toBottomOf="parent"
+                android:background="?selectableItemBackgroundBorderless"
+                tools:ignore="ContentDescription" />
+
+            <ImageButton
+                android:id="@+id/button_queue"
+                android:layout_width="30dp"
+                android:layout_height="30dp"
+                android:layout_marginEnd="30dp"
+                android:layout_marginBottom="10dp"
+                android:padding="4dp"
+                android:background="?selectableItemBackgroundBorderless"
+                android:src="@drawable/ic_playlist_add"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintBottom_toBottomOf="@id/buttonVolume"
+                app:layout_constraintTop_toTopOf="@id/buttonVolume"
+                tools:ignore="ContentDescription" />
+
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+        <fragment
+            android:id="@+id/play_list"
+            android:tag="app.mango.music.ui.playlist.PlaylistSheetFragment"
+            android:name="app.mango.music.ui.PlaylistSheetFragment"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"/>
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/res/navigation/nav_graph.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/nav_graph.xml b/app/src/main/res/navigation/nav_graph.xml
new file mode 100644
--- /dev/null	(date 1653979403306)
+++ b/app/src/main/res/navigation/nav_graph.xml	(date 1653979403306)
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="utf-8"?>
+<navigation xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/nav_graph"
+    app:startDestination="@id/music_library_fragment">
+
+    <fragment
+        android:id="@+id/music_library_fragment"
+        android:name="app.mango.music.ui.MusicLibraryFragment"
+        android:label="@string/home_fragment_label"
+        tools:layout="@layout/fragment_music_library">
+        <argument
+            android:name="musicBox"
+            app:argType="app.mango.music.audio.MusicBox"
+            android:defaultValue="MUSIC_LIBRARY"/>
+        <action
+            android:id="@+id/action_musicLibraryFragment_to_detailFragment"
+            app:destination="@id/detail_fragment" />
+    </fragment>
+
+    <action
+        android:id="@+id/action_global_homeFragment"
+        app:destination="@+id/music_library_fragment"
+        app:launchSingleTop="true"
+        app:popUpTo="@id/nav_graph"
+        app:popUpToInclusive="true"/>
+
+    <fragment
+        android:id="@+id/search_fragment"
+        android:name="app.mango.music.ui.SearchFragment"
+        android:label="@string/search_fragment_label"
+        tools:layout="@layout/fragment_search"/>
+
+    <fragment
+        android:id="@+id/settings_fragment"
+        android:name="app.mango.music.ui.settings.SettingsFragment"
+        android:label="@string/settings_fragment_label"
+        tools:layout="@layout/fragment_settings"/>
+
+    <fragment
+        android:id="@+id/detail_fragment"
+        android:name="app.mango.music.ui.DetailFragment"
+        android:label="@string/detail_fragment_label"
+        tools:layout="@layout/fragment_detail">
+        <argument
+            android:name="id"
+            app:argType="string" />
+        <argument
+            android:name="musicBox"
+            app:argType="app.mango.music.audio.MusicBox"
+            android:defaultValue="ALBUM"/>
+    </fragment>
+
+    <fragment
+        android:id="@+id/style_fragment"
+        android:name="app.mango.music.ui.style.StyleFragment"
+        android:label="@string/style_fragment_label"
+        tools:layout="@layout/fragment_style"/>
+
+    <fragment
+        android:id="@+id/playing_fragment"
+        android:name="app.mango.music.ui.PlayingFragment"
+        android:label="@string/playing_fragment_label"
+        tools:layout="@layout/fragment_playing"/>
+
+    <action
+        app:destination="@id/playing_fragment"
+        android:id="@+id/main_to_playing"/>
+
+</navigation>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/PlayingFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/PlayingFragment.kt b/app/src/main/java/app/mango/music/ui/PlayingFragment.kt
new file mode 100644
--- /dev/null	(date 1655350465081)
+++ b/app/src/main/java/app/mango/music/ui/PlayingFragment.kt	(date 1655350465081)
@@ -0,0 +1,131 @@
+package app.mango.music.ui
+
+import android.content.Intent
+import android.net.Uri
+import android.os.Build
+import android.os.Bundle
+import android.view.View
+import androidx.core.content.FileProvider
+import androidx.media3.common.Player
+import app.mango.music.BuildConfig
+import app.mango.music.R
+import app.mango.music.audio.PlayDuration
+import app.mango.music.audio.PlayPosition
+import app.mango.music.audio.getDuration
+import app.mango.music.data.MusicFavorite
+import app.mango.music.databinding.FragmentPlayingBinding
+import app.mango.music.data.GlobalData
+import app.mango.music.manager.Config
+import app.mango.music.manager.SpManager
+import app.mango.music.ui.settings.AudioEffectFragment
+import app.mango.music.views.IconStateButton
+import kotlinx.coroutines.flow.collect
+import kotlinx.coroutines.launch
+
+class PlayingFragment : BaseFragment<FragmentPlayingBinding>(), BaseFragment.ControlListener {
+
+    private val bottomPlaylist: PlaylistSheetFragment by lazy(LazyThreadSafetyMode.NONE) {
+        childFragmentManager.findFragmentById(R.id.play_list) as PlaylistSheetFragment
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        binding.listener = this
+
+        binding.apply {
+            playerSeekbar.setProgressListener {
+                mediaBrowser.browser?.seekTo(it.toLong())
+            }
+            buttonShare.setOnClickListener { share() }
+            buttonKeyDown.setOnClickListener { navController.navigateUp() }
+            buttonQueue.setOnClickListener { bottomPlaylist.open() }
+
+            buttonRepeat.setOnClickListener {
+                SpManager.putInt(
+                    Config.KEY_SETTINGS_REPEAT_MODE,
+                    if(it.isActivated) Player.REPEAT_MODE_OFF else Player.REPEAT_MODE_ONE
+                )
+            }
+            buttonVolume.setOnClickListener {
+                AudioEffectFragment()
+                    .show(childFragmentManager,null)
+            }
+            buttonShuffle.setOnClickListener {
+                SpManager.putInt(
+                    Config.KEY_SETTINGS_REPEAT_MODE,
+                    if(it.isActivated) Player.REPEAT_MODE_OFF else Player.REPEAT_MODE_ALL
+                )
+            }
+            SpManager.listen(Config.KEY_SETTINGS_REPEAT_MODE,
+                SpManager.SpIntListener(Config.DEFAULT_SETTINGS_REPEAT_MODE) {
+                    buttonShuffle.isActivated = it == 2
+                    buttonRepeat.isActivated = it == 1
+                })
+        }
+
+        repeatWithViewLifecycle {
+            launch {
+                GlobalData.currentIsPlaying.collect {
+                    binding.buttonPlay.isChecked = it
+                }
+            }
+            launch {
+                GlobalData.currentMediaItem.collect {
+                    it?.let { media ->
+                        binding.media = media
+                        musicViewModel.mediaFavoriteId.value = media.mediaId
+                        binding.duration = PlayDuration(media.mediaMetadata.getDuration().toInt())
+                    }
+                }
+            }
+            launch {
+                GlobalData.currentPosition.collect {
+                    binding.position = PlayPosition(it.toInt())
+                }
+            }
+            launch {
+                musicViewModel.mediaFavorite.collect {
+                    binding.buttonFavorite.isFavorite(it)
+                }
+            }
+        }
+    }
+
+    private fun IconStateButton.isFavorite(musicFavorite: MusicFavorite) {
+        isActivated = musicFavorite.isFavorite
+        setOnClickListener {
+            onFavoriteChanged(musicFavorite.mediaId, !musicFavorite.isFavorite)
+        }
+    }
+
+    override fun setBinding(): FragmentPlayingBinding =
+        FragmentPlayingBinding.inflate(layoutInflater)
+
+    override fun togglePlay() {
+        mediaBrowser.togglePlay()
+    }
+
+    override fun next() {
+        mediaBrowser.browser?.seekToNext()
+    }
+
+    override fun previous() {
+        mediaBrowser.browser?.seekToPrevious()
+    }
+
+    private fun share(){
+        GlobalData.currentMediaItem.value?:return
+        val uri = GlobalData.currentMediaItem.value!!.mediaMetadata.mediaUri
+        val share = Intent(Intent.ACTION_SEND)
+        share.putExtra(Intent.EXTRA_STREAM, uri)
+        share.type = "audio/*"
+        share.flags = Intent.FLAG_ACTIVITY_NEW_TASK
+        share.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
+        requireContext().startActivity(Intent.createChooser(share, getString(R.string.music_share_file)))
+    }
+
+    companion object {
+        private const val TAG = "PlayingFragment"
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/item_album.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/item_album.xml b/app/src/main/res/layout/item_album.xml
new file mode 100644
--- /dev/null	(date 1653883524313)
+++ b/app/src/main/res/layout/item_album.xml	(date 1653883524313)
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+    <data>
+
+        <variable
+            name="mediaItem"
+            type="androidx.media3.common.MediaItem" />
+    </data>
+
+    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical">
+
+        <com.google.android.material.card.MaterialCardView
+            android:transitionName="@{@string/music_card_transition_name(mediaItem.mediaId)}"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:clickable="true"
+            android:focusable="true"
+            app:strokeWidth="0dp"
+            android:id="@+id/album_root"
+            android:layout_margin="8dp">
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="?android:attr/selectableItemBackground"
+                android:orientation="vertical">
+
+                <app.mango.music.views.AutoLinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center">
+
+                    <ImageView
+                        android:id="@+id/album_image"
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent"
+                        android:scaleType="centerCrop"
+                        android:transitionName="TRANSITION_NAME"
+                        app:loadCover="@{mediaItem}" />
+                </app.mango.music.views.AutoLinearLayout>
+
+                <View
+                    android:layout_width="match_parent"
+                    android:layout_height="1dp"
+                    android:background="?colorButtonNormal" />
+
+                <TextView
+                    android:id="@+id/album_name"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_margin="8dp"
+                    android:ellipsize="end"
+                    android:singleLine="true"
+                    android:text="@{mediaItem.mediaMetadata.albumTitle}"
+                    android:textAppearance="@style/TextAppearance.AppCompat.Body2" />
+
+            </LinearLayout>
+        </com.google.android.material.card.MaterialCardView>
+
+    </LinearLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/adapters/AlbumAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/adapters/AlbumAdapter.kt b/app/src/main/java/app/mango/music/adapters/AlbumAdapter.kt
new file mode 100644
--- /dev/null	(date 1654927615690)
+++ b/app/src/main/java/app/mango/music/adapters/AlbumAdapter.kt	(date 1654927615690)
@@ -0,0 +1,61 @@
+package app.mango.music.adapters
+
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.DiffUtil
+import androidx.recyclerview.widget.ListAdapter
+import androidx.recyclerview.widget.RecyclerView
+import app.mango.music.audio.Album
+import app.mango.music.databinding.ItemAlbumBinding
+import app.mango.music.utils.layoutInflater
+import me.zhanghai.android.fastscroll.PopupTextProvider
+
+class AlbumAdapter(private val listener: AlbumItemListener): ListAdapter<Album, AlbumAdapter.AlbumViewHolder>(
+    AlbumDiffCallback()
+), PopupTextProvider {
+
+    interface AlbumItemListener {
+        fun onAlbumClick(view: View, album: Album)
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AlbumViewHolder =
+        AlbumViewHolder.from(parent)
+
+    override fun onBindViewHolder(holder: AlbumViewHolder, position: Int) {
+        holder.bind(getItem(position), listener)
+    }
+
+    class AlbumViewHolder private constructor(
+        val binding: ItemAlbumBinding
+    ) : RecyclerView.ViewHolder(binding.root) {
+
+        fun bind(album: Album, listener: AlbumItemListener) {
+            binding.albumRoot.setOnClickListener {
+                listener.onAlbumClick(it, album)
+            }
+            binding.mediaItem = album.mediaItem
+            binding.executePendingBindings()
+        }
+
+        companion object {
+            fun from(parent: ViewGroup) = AlbumViewHolder(
+                ItemAlbumBinding.inflate(parent.context.layoutInflater, parent, false)
+            )
+        }
+    }
+
+    override fun getPopupText(position: Int): String = getItem(position).first()
+
+    private fun Album.first() = albumTitle.first().toString()
+
+    class AlbumDiffCallback : DiffUtil.ItemCallback<Album>() {
+
+        override fun areItemsTheSame(oldItem: Album, newItem: Album): Boolean {
+            return oldItem.albumId == newItem.albumId
+        }
+
+        override fun areContentsTheSame(oldItem: Album, newItem: Album): Boolean {
+            return oldItem == newItem
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/item_artist.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/item_artist.xml b/app/src/main/res/layout/item_artist.xml
new file mode 100644
--- /dev/null	(date 1653883524323)
+++ b/app/src/main/res/layout/item_artist.xml	(date 1653883524323)
@@ -0,0 +1,67 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+    <data>
+
+        <variable
+            name="mediaItem"
+            type="androidx.media3.common.MediaItem" />
+    </data>
+
+    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical">
+
+        <com.google.android.material.card.MaterialCardView
+            android:id="@+id/artist_root"
+            android:transitionName="@{@string/music_card_transition_name(mediaItem.mediaId)}"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:clickable="true"
+            app:strokeWidth="0dp"
+            android:focusable="true"
+            android:layout_margin="8dp">
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="?android:attr/selectableItemBackground"
+                android:orientation="vertical">
+
+                <app.mango.music.views.AutoLinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center">
+
+                    <ImageView
+                        android:id="@+id/artist_image"
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent"
+                        android:scaleType="centerCrop"
+                        android:src="@drawable/ic_music"
+                        android:transitionName="TRANSITION_NAME"
+                        app:loadCover="@{mediaItem}" />
+                </app.mango.music.views.AutoLinearLayout>
+
+                <View
+                    android:layout_width="match_parent"
+                    android:layout_height="1dp"
+                    android:background="?colorButtonNormal" />
+
+                <TextView
+                    android:id="@+id/artist_name"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_margin="8dp"
+                    android:ellipsize="end"
+                    android:singleLine="true"
+                    android:text="@{mediaItem.mediaMetadata.artist}"
+                    android:textAppearance="@style/TextAppearance.AppCompat.Body2" />
+
+            </LinearLayout>
+        </com.google.android.material.card.MaterialCardView>
+
+    </LinearLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/adapters/ArtistAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/adapters/ArtistAdapter.kt b/app/src/main/java/app/mango/music/adapters/ArtistAdapter.kt
new file mode 100644
--- /dev/null	(date 1654927615804)
+++ b/app/src/main/java/app/mango/music/adapters/ArtistAdapter.kt	(date 1654927615804)
@@ -0,0 +1,61 @@
+package app.mango.music.adapters
+
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.DiffUtil
+import androidx.recyclerview.widget.ListAdapter
+import androidx.recyclerview.widget.RecyclerView
+import app.mango.music.audio.Artist
+import app.mango.music.databinding.ItemArtistBinding
+import app.mango.music.utils.layoutInflater
+import me.zhanghai.android.fastscroll.PopupTextProvider
+
+class ArtistAdapter(private val listener: ArtistItemListener): ListAdapter<Artist, ArtistAdapter.ArtistViewHolder>(
+    ArtistDiffCallback()
+), PopupTextProvider {
+
+    interface ArtistItemListener {
+        fun onArtistClick(view: View, artist: Artist)
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ArtistViewHolder =
+        ArtistViewHolder.from(parent)
+
+    override fun onBindViewHolder(holder: ArtistViewHolder, position: Int) {
+        holder.bind(getItem(position), listener)
+    }
+
+    class ArtistViewHolder private constructor(
+        val binding: ItemArtistBinding
+    ) : RecyclerView.ViewHolder(binding.root) {
+
+        fun bind(artist: Artist, listener: ArtistItemListener) {
+            binding.artistRoot.setOnClickListener {
+                listener.onArtistClick(it, artist)
+            }
+            binding.mediaItem = artist.mediaItem
+            binding.executePendingBindings()
+        }
+
+        companion object {
+            fun from(parent: ViewGroup) = ArtistViewHolder(
+                ItemArtistBinding.inflate(parent.context.layoutInflater, parent, false)
+            )
+        }
+    }
+
+    override fun getPopupText(position: Int): String = getItem(position).first()
+
+    private fun Artist.first() = mediaItem.mediaMetadata.artist.toString().first().toString()
+
+    class ArtistDiffCallback : DiffUtil.ItemCallback<Artist>() {
+
+        override fun areItemsTheSame(oldItem: Artist, newItem: Artist): Boolean {
+            return oldItem.artistId == newItem.artistId
+        }
+
+        override fun areContentsTheSame(oldItem: Artist, newItem: Artist): Boolean {
+            return oldItem == newItem
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/MusicLibraryFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/MusicLibraryFragment.kt b/app/src/main/java/app/mango/music/ui/MusicLibraryFragment.kt
new file mode 100644
--- /dev/null	(date 1655870803109)
+++ b/app/src/main/java/app/mango/music/ui/MusicLibraryFragment.kt	(date 1655870803109)
@@ -0,0 +1,115 @@
+package app.mango.music.ui
+
+import android.os.Bundle
+import android.view.View
+import androidx.core.view.doOnPreDraw
+import androidx.navigation.fragment.FragmentNavigatorExtras
+import androidx.navigation.fragment.navArgs
+import androidx.recyclerview.widget.GridLayoutManager
+import app.mango.music.R
+import app.mango.music.adapters.AlbumAdapter
+import app.mango.music.adapters.ArtistAdapter
+import app.mango.music.audio.Album
+import app.mango.music.audio.Artist
+import app.mango.music.audio.MusicBox
+import app.mango.music.databinding.FragmentMusicLibraryBinding
+import app.mango.music.manager.SpManager
+import com.google.android.material.transition.MaterialElevationScale
+import com.google.android.material.transition.MaterialFadeThrough
+import kotlinx.coroutines.flow.collect
+import kotlinx.coroutines.launch
+
+class MusicLibraryFragment : BaseFragment<FragmentMusicLibraryBinding>(),
+    AlbumAdapter.AlbumItemListener,
+    ArtistAdapter.ArtistItemListener {
+
+    private val args: MusicLibraryFragmentArgs by navArgs()
+
+    private val albumAdapter = AlbumAdapter(this)
+    private val artistAdapter = ArtistAdapter(this)
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        enterTransition = MaterialFadeThrough().apply {
+            duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+        }
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        postponeEnterTransition()
+        view.doOnPreDraw { startPostponedEnterTransition() }
+
+        repeatWithViewLifecycle {
+            when (args.musicBox) {
+                MusicBox.MUSIC_LIBRARY -> launch {
+                    musicViewModel.favoriteSongs.collect {
+                        musicAdapter.submitList(it)
+                    }
+                }
+                MusicBox.ALBUM -> launch {
+                    musicViewModel.albums.collect {
+                        albumAdapter.submitList(it)
+                    }
+                }
+                MusicBox.ARTIST -> launch {
+                    musicViewModel.artists.collect {
+                        artistAdapter.submitList(it)
+                    }
+                }
+                else -> launch {
+                    musicViewModel.favorited.collect {
+                        musicAdapter.submitList(it)
+                    }
+                }
+            }
+        }
+
+        binding.lifecycleOwner = viewLifecycleOwner
+        binding.recyclerView.run {
+            ThemedFastScroller.create(this)
+            adapter = when (args.musicBox) {
+                MusicBox.MUSIC_LIBRARY, MusicBox.FAVORITE -> {
+                    itemTouchHelper()
+                    musicAdapter
+                }
+                MusicBox.ALBUM -> albumAdapter
+                else -> artistAdapter
+            }
+
+            SpManager.listen(getString(R.string.key_set_list_filter_grid),
+                SpManager.SpIntListener(getString(R.string.set_list_filter_grid_def).toInt()) {
+                    layoutManager = GridLayoutManager(context,it+when (args.musicBox) {
+                        MusicBox.MUSIC_LIBRARY, MusicBox.FAVORITE -> 0
+                        else -> 2
+                    })
+                })
+        }
+
+    }
+
+    override fun onAlbumClick(view: View, album: Album) {
+        navigateToDetail(view, album.albumId, MusicBox.ALBUM)
+    }
+
+    override fun onArtistClick(view: View, artist: Artist) {
+        navigateToDetail(view, artist.artistId, MusicBox.ARTIST)
+    }
+
+    private fun navigateToDetail(view: View, id: String, musicBox: MusicBox) {
+        exitTransition = MaterialElevationScale(false).apply {
+            duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+        }
+        reenterTransition = MaterialElevationScale(true).apply {
+            duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+        }
+        val cardDetailTransitionName = getString(R.string.music_card_detail_transition_name)
+        val extras = FragmentNavigatorExtras(view to cardDetailTransitionName)
+        val directions =
+            MusicLibraryFragmentDirections.actionMusicLibraryFragmentToDetailFragment(id, musicBox)
+        navController.navigate(directions, extras)
+    }
+
+    override fun setBinding(): FragmentMusicLibraryBinding =
+        FragmentMusicLibraryBinding.inflate(layoutInflater)
+}
\ No newline at end of file
Index: app/src/main/res/drawable/seekbar_track.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/seekbar_track.xml b/app/src/main/res/drawable/seekbar_track.xml
new file mode 100644
--- /dev/null	(date 1653985151384)
+++ b/app/src/main/res/drawable/seekbar_track.xml	(date 1653985151384)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@+id/background"
+          android:gravity="center_vertical|fill_horizontal">
+        <shape android:shape="rectangle">
+            <size android:height="4dp" />
+            <corners android:radius="2dp"/>
+            <solid android:color="?attr/colorControlNormal" />
+        </shape>
+    </item>
+    <item android:id="@android:id/secondaryProgress"
+          android:gravity="center_vertical|fill_horizontal">
+        <scale android:scaleWidth="100%">
+            <selector>
+                <item android:state_enabled="false"
+                      android:drawable="@android:color/transparent" />
+                <item>
+                    <shape android:shape="rectangle"
+                           android:tint="?android:attr/colorControlActivated">
+                        <size android:height="4dp" />
+                        <corners android:radius="2dp"/>
+                        <solid android:color="?attr/colorControlNormal" />
+                    </shape>
+                </item>
+            </selector>
+        </scale>
+    </item>
+    <item android:id="@android:id/progress"
+          android:gravity="center_vertical|fill_horizontal">
+        <scale android:scaleWidth="100%">
+            <selector>
+                <item android:state_enabled="false"
+                      android:drawable="@android:color/transparent" />
+                <item>
+                    <shape android:shape="rectangle"
+                           android:tint="?android:attr/colorControlActivated">
+                        <size android:height="4dp" />
+                        <corners android:radius="2dp"/>
+                        <solid android:color="@android:color/white" />
+                    </shape>
+                </item>
+            </selector>
+        </scale>
+    </item>
+</layer-list>
\ No newline at end of file
Index: app/src/main/java/app/mango/music/App.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/App.kt b/app/src/main/java/app/mango/music/App.kt
new file mode 100644
--- /dev/null	(date 1654740876570)
+++ b/app/src/main/java/app/mango/music/App.kt	(date 1654740876570)
@@ -0,0 +1,61 @@
+package app.mango.music
+
+import android.app.Application
+import androidx.appcompat.app.AppCompatDelegate
+import androidx.preference.PreferenceManager
+import app.mango.music.fetcher.EmbeddedCoverFetcher
+import app.mango.music.fetcher.EmbeddedLyricFetchers
+import app.mango.music.fetcher.LyricsFetcher
+import app.mango.music.manager.SpManager
+import app.mango.music.utils.DimensionExtensions
+import coil.ImageLoader
+import coil.ImageLoaderFactory
+import com.google.android.material.color.DynamicColors
+import dagger.hilt.android.HiltAndroidApp
+import javax.inject.Inject
+
+@HiltAndroidApp
+class App:Application(), ImageLoaderFactory {
+
+    @Inject
+    lateinit var lyricFetchers: EmbeddedLyricFetchers
+
+    @Inject
+    lateinit var lyricsFetcher: LyricsFetcher
+
+    @Inject
+    lateinit var coverFetcher: EmbeddedCoverFetcher
+
+    override fun newImageLoader(): ImageLoader =
+        ImageLoader.Builder(this)
+            .componentRegistry {
+                add(coverFetcher)
+                add(lyricFetchers)
+            }.build()
+
+    override fun onCreate() {
+        super.onCreate()
+        SpManager.init(this)
+        DimensionExtensions.init(this)
+        DynamicColors.applyToActivitiesIfAvailable(this)
+        setupDarkModePreference()
+    }
+
+    private fun setupDarkModePreference() {
+        val defaultValue = resources.getString(R.string.set_theme_dark_mode_def)
+        val disabledValue = resources.getStringArray(R.array.set_theme_dark_mode_value)
+        val sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this)
+
+        val darkModeSetting =
+            sharedPreferences.getString(resources.getString(R.string.key_set_theme_dark_mode), defaultValue)
+
+        if (!darkModeSetting.equals(defaultValue)) {
+            if (darkModeSetting.equals(disabledValue[1])) {
+                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)
+            } else {
+                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)
+            }
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/audio/DataClass.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/audio/DataClass.kt b/app/src/main/java/app/mango/music/audio/DataClass.kt
new file mode 100644
--- /dev/null	(date 1655008297056)
+++ b/app/src/main/java/app/mango/music/audio/DataClass.kt	(date 1655008297056)
@@ -0,0 +1,15 @@
+package app.mango.music.audio
+
+import androidx.media3.common.MediaItem
+
+data class Album(val albumId:String,val albumTitle:String,val mediaItem: MediaItem)
+data class Artist(val artistId:String,val artistName:String,val mediaItem: MediaItem)
+data class Detail(val mediaItem: MediaItem,val count:Int,val duration:Long)
+data class FavoriteMusic(var isFavorite:Boolean,private val mediaItem: MediaItem){
+    fun metadata() = mediaItem.mediaMetadata
+    fun mediaItem() = mediaItem
+}
+open class PlayValue(val value:Int)
+data class PlayPosition(private val position:Int):PlayValue(position)
+data class PlayDuration(private val duration:Int):PlayValue(duration)
+data class ReadyWhenState(val time:Long,val isReady:Boolean)
\ No newline at end of file
Index: app/src/main/java/app/mango/music/data/BaseMediaSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/data/BaseMediaSource.kt b/app/src/main/java/app/mango/music/data/BaseMediaSource.kt
new file mode 100644
--- /dev/null	(date 1654938866006)
+++ b/app/src/main/java/app/mango/music/data/BaseMediaSource.kt	(date 1654938866006)
@@ -0,0 +1,174 @@
+package app.mango.music.data
+
+import android.content.Context
+import android.database.ContentObserver
+import android.database.Cursor
+import android.net.Uri
+import android.os.Build
+import android.os.Handler
+import android.os.Looper
+import android.provider.MediaStore
+import androidx.media3.common.MediaItem
+import androidx.media3.common.MediaMetadata
+import androidx.media3.common.MediaMetadata.FOLDER_TYPE_PLAYLISTS
+import app.mango.music.audio.from
+import app.mango.music.audio.getAlbumId
+import app.mango.music.audio.getArtistId
+import app.mango.music.manager.Config
+import app.mango.music.manager.SpManager
+import dagger.hilt.android.qualifiers.ApplicationContext
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+import java.util.*
+import javax.inject.Inject
+import javax.inject.Singleton
+import kotlin.coroutines.CoroutineContext
+
+const val unknownArtist = "<unknown>"
+const val minDurationLimit = 30 * 1000
+
+@Singleton
+class BaseMediaSource @Inject constructor(
+    @ApplicationContext private val mContext: Context
+) : CoroutineScope, AbstractMediaSource() {
+
+    override val coroutineContext: CoroutineContext = Dispatchers.IO
+    private val targetUri: Uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI
+    private val minSizeLimit = 0
+    private var artistFilter = unknownArtist
+    private var minDurationFilter = minDurationLimit
+    private var contentResolverState = false
+
+    private val baseProjection = ArrayList(
+        listOf(
+            MediaStore.Audio.Media._ID,
+            MediaStore.Audio.Media.TITLE,
+            MediaStore.Audio.Media.ALBUM_ID,
+            MediaStore.Audio.Media.ALBUM,
+            MediaStore.Audio.Media.ARTIST,
+            MediaStore.Audio.Media.ARTIST_ID,
+            MediaStore.Audio.Media.SIZE,
+            MediaStore.Audio.Media.DATA,
+            MediaStore.Audio.Media.DURATION,
+            MediaStore.Audio.Media.MIME_TYPE
+        )
+    ).also {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
+            it.add(MediaStore.Audio.Media.GENRE)
+        }
+    }.toTypedArray()
+
+    init {
+        mContext.contentResolver
+            .registerContentObserver(targetUri, true, MediaSourceObserver())
+
+        SpManager.listen(
+            Config.KEY_SETTINGS_MEDIA_UNKNOWN_FILTER,
+            SpManager.SpBoolListener(Config.DEFAULT_SETTINGS_MEDIA_UNKNOWN_FILTER) {
+                artistFilter = if (it) unknownArtist else ""
+                if(contentResolverState) loadSync()
+            })
+    }
+
+    inner class MediaSourceObserver : ContentObserver(Handler(Looper.getMainLooper())) {
+        override fun onChange(selfChange: Boolean) {
+            launch(Dispatchers.IO) {
+                initialize(loadMediaItems())
+            }
+        }
+    }
+
+    override fun getAlbumIdFromMediaItem(mediaItem: MediaItem): String {
+        return mediaItem.mediaMetadata.getAlbumId().toString()
+    }
+
+    override fun getArtistIdFromMediaItem(mediaItem: MediaItem): String {
+        return mediaItem.mediaMetadata.getArtistId().toString()
+    }
+
+    override fun songItemToAlbumItem(mediaItem: MediaItem): MediaItem {
+        return mediaItem.buildUpon()
+            .setMediaMetadata(
+                mediaItem.mediaMetadata.buildUpon()
+                    .setIsPlayable(false)
+                    .setFolderType(FOLDER_TYPE_PLAYLISTS)
+                    .build()
+            ).build()
+    }
+
+    override fun songItemToArtistItem(mediaItem: MediaItem): MediaItem {
+        return mediaItem.buildUpon()
+            .setMediaMetadata(
+                mediaItem.mediaMetadata.buildUpon()
+                    .setIsPlayable(false)
+                    .setFolderType(FOLDER_TYPE_PLAYLISTS)
+                    .build()
+            ).build()
+    }
+
+    override fun songItemToGenreItem(mediaItem: MediaItem): MediaItem {
+        return mediaItem.buildUpon()
+            .setMediaId(mediaItem.mediaMetadata.genre.toString())
+            .setMediaMetadata(
+                mediaItem.mediaMetadata.buildUpon()
+                    .setIsPlayable(false)
+                    .setFolderType(FOLDER_TYPE_PLAYLISTS)
+                    .build()
+            ).build()
+    }
+
+    fun loadSync() = launch {
+        contentResolverState = true
+        load()
+    }
+
+    override suspend fun load() {
+        try {
+            initialize(loadMediaItems())
+        } catch (e: Exception) {
+            readyState = STATE_ERROR
+        }
+    }
+
+    private suspend fun loadMediaItems(): MutableList<MediaItem> =
+        withContext(Dispatchers.IO) {
+            val cursor = searchForMedia(
+                projection = baseProjection,
+                selection = "${MediaStore.Audio.Media.SIZE} >= ? " +
+                        "and ${MediaStore.Audio.Media.DURATION} >= ? " +
+                        "and ${MediaStore.Audio.Artists.ARTIST} != ?",
+                selectionArgs = arrayOf("$minSizeLimit", "$minDurationFilter", artistFilter),
+                sortOrder = "${MediaStore.Audio.Media._ID} DESC"
+            ) ?: return@withContext ArrayList()
+
+            return@withContext ArrayList<MediaItem>().apply {
+                while (cursor.moveToNext()) {
+                    val mediaItem = MediaItem.Builder()
+                    .from(cursor)
+                    .setMediaMetadata(
+                        MediaMetadata.Builder()
+                            .from(cursor)
+                            .build()
+                    ).build()
+                    add(mediaItem)
+                }
+            }
+        }
+
+    private fun searchForMedia(
+        selection: String? = null,
+        projection: Array<String>? = null,
+        selectionArgs: Array<String>? = null,
+        sortOrder: String? = null
+    ): Cursor? {
+        return mContext.contentResolver.query(
+            targetUri,
+            projection,
+            selection,
+            selectionArgs,
+            sortOrder
+        )
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/data/MediaSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/data/MediaSource.kt b/app/src/main/java/app/mango/music/data/MediaSource.kt
new file mode 100644
--- /dev/null	(date 1654506128043)
+++ b/app/src/main/java/app/mango/music/data/MediaSource.kt	(date 1654506128043)
@@ -0,0 +1,217 @@
+package app.mango.music.data
+
+import android.net.Uri
+import androidx.annotation.IntDef
+import androidx.media3.common.MediaItem
+import androidx.media3.common.MediaMetadata
+import androidx.media3.common.MediaMetadata.FOLDER_TYPE_PLAYLISTS
+import com.google.common.collect.ImmutableList
+import kotlin.collections.LinkedHashSet
+
+const val STATE_CREATED = 1
+const val STATE_INITIALIZING = 2
+const val STATE_INITIALIZED = 3
+const val STATE_ERROR = 4
+
+@IntDef(
+    STATE_CREATED,
+    STATE_INITIALIZING,
+    STATE_INITIALIZED,
+    STATE_ERROR
+)
+@Retention(AnnotationRetention.SOURCE)
+annotation class ReadyState
+
+interface MediaSource {
+    suspend fun load()
+    fun whenReady(performAction: (Boolean) -> Unit): Boolean
+}
+
+const val ROOT_ID = "[rootID]"
+const val ALBUM_ID = "[albumID]"
+const val GENRE_ID = "[genreID]"
+const val ARTIST_ID = "[artistID]"
+const val ALL_ID = "[allID]"
+
+const val ALBUM_PREFIX = "[album]"
+const val GENRE_PREFIX = "[genre]"
+const val ARTIST_PREFIX = "[artist]"
+const val ITEM_PREFIX = "[item]"
+const val ALL_PREFIX = "[all]"
+
+abstract class AbstractMediaSource : MediaSource {
+    private var treeNodes: MutableMap<String, MediaItemNode> = mutableMapOf()
+
+    private val readyListener = mutableListOf<(Boolean) -> Unit>()
+    private fun buildMediaItem(
+        title: String,
+        mediaId: String,
+        isPlayable: Boolean,
+        @MediaMetadata.FolderType folderType: Int,
+        album: String? = null,
+        artist: String? = null,
+        genre: String? = null,
+        sourceUri: Uri? = null,
+        imageUri: Uri? = null,
+    ): MediaItem {
+        val metadata = MediaMetadata.Builder()
+            .setAlbumTitle(album)
+            .setTitle(title)
+            .setArtist(artist)
+            .setGenre(genre)
+            .setFolderType(folderType)
+            .setIsPlayable(isPlayable)
+            .setArtworkUri(imageUri)
+            .build()
+        return MediaItem.Builder()
+            .setMediaId(mediaId)
+            .setMediaMetadata(metadata)
+            .setUri(sourceUri)
+            .build()
+    }
+
+    abstract fun getAlbumIdFromMediaItem(mediaItem: MediaItem): String
+    abstract fun getArtistIdFromMediaItem(mediaItem: MediaItem): String
+    abstract fun songItemToAlbumItem(mediaItem: MediaItem): MediaItem
+    abstract fun songItemToArtistItem(mediaItem: MediaItem): MediaItem
+    abstract fun songItemToGenreItem(mediaItem: MediaItem): MediaItem
+
+    fun getRootItem(): MediaItem {
+        return treeNodes[ROOT_ID]!!.item
+    }
+
+    fun getItemById(id: String): MediaItem? {
+        return treeNodes[id]?.item
+    }
+
+    fun getChildren(parentId: String): List<MediaItem>? {
+        return treeNodes[parentId]?.getChildren()
+    }
+
+    inner class MediaItemNode(val item: MediaItem) {
+        private val children: LinkedHashSet<MediaItem> = LinkedHashSet()
+
+        fun addChild(childID: String) {
+            treeNodes[childID]?.let {
+                children.add(it.item)
+            }
+        }
+
+        fun getChildren(): List<MediaItem> {
+            return ImmutableList.copyOf(children)
+        }
+    }
+
+    @ReadyState
+    var readyState: Int = STATE_CREATED
+        set(value) {
+            when (value) {
+                STATE_INITIALIZED,
+                STATE_ERROR -> synchronized(readyListener) {
+                    field = value
+                    readyListener.forEach { it.invoke(value != STATE_ERROR) }
+                }
+                else -> field = value
+            }
+        }
+
+    override fun whenReady(performAction: (Boolean) -> Unit): Boolean {
+        return when (readyState) {
+            STATE_CREATED, STATE_INITIALIZING -> {
+                readyListener += performAction
+                false
+            }
+            else -> {
+                performAction.invoke(readyState != STATE_ERROR)
+                true
+            }
+        }
+    }
+
+    companion object{
+        private const val TAG = "MediaSource"
+    }
+
+    private fun initialize() {
+        treeNodes.clear()
+        treeNodes[ROOT_ID] = MediaItemNode(
+            buildMediaItem(
+                title = "Root Folder",
+                mediaId = ROOT_ID,
+                isPlayable = false,
+                folderType = MediaMetadata.FOLDER_TYPE_MIXED
+            )
+        )
+        treeNodes[ALBUM_ID] = MediaItemNode(
+            buildMediaItem(
+                title = "Album Folder",
+                mediaId = ALBUM_ID,
+                isPlayable = false,
+                folderType = MediaMetadata.FOLDER_TYPE_MIXED
+            )
+        )
+        treeNodes[ARTIST_ID] = MediaItemNode(
+            buildMediaItem(
+                title = "Artist Folder",
+                mediaId = ARTIST_ID,
+                isPlayable = false,
+                folderType = MediaMetadata.FOLDER_TYPE_MIXED
+            )
+        )
+        treeNodes[GENRE_ID] =
+            MediaItemNode(
+                buildMediaItem(
+                    title = "Genre Folder",
+                    mediaId = GENRE_ID,
+                    isPlayable = false,
+                    folderType = MediaMetadata.FOLDER_TYPE_MIXED
+                )
+            )
+        treeNodes[ALL_ID] =
+            MediaItemNode(
+                buildMediaItem(
+                    title = "All Items Folder",
+                    mediaId = ALL_ID,
+                    isPlayable = false,
+                    folderType = FOLDER_TYPE_PLAYLISTS
+                )
+            )
+        treeNodes[ROOT_ID]!!.addChild(ALBUM_ID)
+        treeNodes[ROOT_ID]!!.addChild(ARTIST_ID)
+        treeNodes[ROOT_ID]!!.addChild(GENRE_ID)
+        treeNodes[ROOT_ID]!!.addChild(ALL_ID)
+    }
+
+    @Throws(Exception::class)
+    fun initialize(data: List<MediaItem>) {
+        readyState = STATE_INITIALIZING
+        initialize()
+        data.forEach {
+            val idInTree = ITEM_PREFIX + it.mediaId
+            val albumFolderIdInTree = ALBUM_PREFIX + getAlbumIdFromMediaItem(it)
+            val artistFolderIdInTree = ARTIST_PREFIX + getArtistIdFromMediaItem(it)
+            val genreFolderIdInTree = GENRE_PREFIX + it.mediaMetadata.genre
+
+            treeNodes[idInTree] = MediaItemNode(it)
+
+            if (!treeNodes.containsKey(albumFolderIdInTree)) {
+                treeNodes[albumFolderIdInTree] = MediaItemNode(songItemToAlbumItem(it))
+                treeNodes[ALBUM_ID]?.addChild(albumFolderIdInTree)
+            }
+            if (!treeNodes.containsKey(artistFolderIdInTree)) {
+                treeNodes[artistFolderIdInTree] = MediaItemNode(songItemToArtistItem(it))
+                treeNodes[ARTIST_ID]?.addChild(artistFolderIdInTree)
+            }
+            if (!treeNodes.containsKey(genreFolderIdInTree)) {
+                treeNodes[genreFolderIdInTree] = MediaItemNode(songItemToGenreItem(it))
+                treeNodes[GENRE_ID]?.addChild(genreFolderIdInTree)
+            }
+
+            treeNodes[albumFolderIdInTree]?.addChild(idInTree)
+            treeNodes[artistFolderIdInTree]?.addChild(idInTree)
+            treeNodes[genreFolderIdInTree]?.addChild(idInTree)
+            treeNodes[ALL_ID]!!.addChild(idInTree)
+        }
+        readyState = STATE_INITIALIZED
+    }
+}
Index: app/src/main/java/app/mango/music/ui/DetailFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/DetailFragment.kt b/app/src/main/java/app/mango/music/ui/DetailFragment.kt
new file mode 100644
--- /dev/null	(date 1655007914695)
+++ b/app/src/main/java/app/mango/music/ui/DetailFragment.kt	(date 1655007914695)
@@ -0,0 +1,84 @@
+package app.mango.music.ui
+
+import android.graphics.Color
+import android.os.Bundle
+import android.view.View
+import androidx.navigation.fragment.navArgs
+import androidx.recyclerview.widget.GridLayoutManager
+import app.mango.music.R
+import app.mango.music.audio.*
+import app.mango.music.databinding.FragmentDetailBinding
+import app.mango.music.manager.SpManager
+import com.google.android.material.transition.MaterialContainerTransform
+import kotlinx.coroutines.flow.collect
+import kotlinx.coroutines.launch
+
+class DetailFragment:BaseFragment<FragmentDetailBinding>() {
+
+    companion object{
+        private const val TAG = "DetailFragment"
+    }
+
+    private val args: DetailFragmentArgs by navArgs()
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        sharedElementEnterTransition = MaterialContainerTransform().apply {
+            drawingViewId = R.id.nav_host_fragment_content_main
+            duration = resources.getInteger(R.integer.motion_duration_large).toLong()
+            scrimColor = Color.TRANSPARENT
+        }
+        musicViewModel.albumArtistId.value = args.id
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        binding.apply {
+            navigationIcon.setOnClickListener {
+                navController.navigateUp()
+            }
+            musicBox = args.musicBox
+            attachmentRecyclerView.run {
+                ThemedFastScroller.create(this)
+                scrollVisibility(binding.divider)
+                itemTouchHelper()
+                SpManager.listen(getString(R.string.key_set_list_filter_grid),
+                    SpManager.SpIntListener(getString(R.string.set_list_filter_grid_def).toInt()) {
+                        layoutManager = GridLayoutManager(context,it)
+                    })
+                post {
+                    adapter = musicAdapter
+                }
+            }
+        }
+
+        repeatWithViewLifecycle {
+            when(args.musicBox) {
+                MusicBox.ALBUM -> launch {
+                    musicViewModel.albumDetail.collect { it->
+                        if(it.isEmpty()) return@collect
+                        val find = it.first()
+                        val duration = it.sumOf { it.metadata().getDuration() }
+                        musicAdapter.submitList(it)
+                        binding.detail = Detail(find.mediaItem(),it.size,duration)
+                        binding.executePendingBindings()
+                    }
+                }
+                MusicBox.ARTIST -> launch {
+                    musicViewModel.artistDetail.collect { it ->
+                        if(it.isEmpty()) return@collect
+                        val find = it.first()
+                        val duration = it.sumOf { it.metadata().getDuration() }
+                        musicAdapter.submitList(it)
+                        binding.detail = Detail(find.mediaItem(),it.size,duration)
+                        binding.executePendingBindings()
+                    }
+                }
+                else -> {}
+            }
+        }
+    }
+
+    override fun setBinding(): FragmentDetailBinding = FragmentDetailBinding.inflate(layoutInflater)
+
+}
\ No newline at end of file
Index: app/src/main/res/layout/music_item_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/music_item_layout.xml b/app/src/main/res/layout/music_item_layout.xml
new file mode 100644
--- /dev/null	(date 1655010180238)
+++ b/app/src/main/res/layout/music_item_layout.xml	(date 1655010180238)
@@ -0,0 +1,108 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    tools:ignore="UnusedAttribute">
+
+    <data>
+        <variable
+            name="favoriteMusic"
+            type="app.mango.music.audio.FavoriteMusic" />
+        <variable
+            name="listener"
+            type="app.mango.music.adapters.MusicAdapter.ItemListener" />
+    </data>
+
+    <FrameLayout
+        android:id="@+id/email_frame"
+        android:layout_height="wrap_content"
+        android:layout_width="match_parent"
+        android:layout_marginVertical="@dimen/grid_0_25"
+        android:layout_marginHorizontal="@dimen/grid_0_5"
+        android:background="?attr/colorAccent">
+
+        <com.google.android.material.card.MaterialCardView
+            app:cardCornerRadius="0dp"
+            app:strokeWidth="0dp"
+            android:id="@+id/card_view"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:elevation="@dimen/plane_00"
+            android:clickable="true"
+            android:focusable="true"
+            android:transitionName="@{@string/music_card_transition_name(favoriteMusic.mediaItem().mediaId)}"
+            app:cardPreventCornerOverlap="false">
+
+            <androidx.constraintlayout.widget.ConstraintLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingTop="@dimen/grid_2"
+                android:paddingBottom="@dimen/grid_2">
+
+                <TextView
+                    android:ellipsize="end"
+                    android:textAppearance="?attr/textAppearanceBody2"
+                    android:id="@+id/subtitle_text_view"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/grid_1"
+                    android:layout_marginStart="@dimen/grid_2"
+                    android:layout_marginEnd="@dimen/grid_2"
+                    android:maxLines="1"
+                    app:music_info="@{favoriteMusic.mediaItem}"
+                    tools:text="Google Express - 12m"
+                    app:layout_constraintEnd_toStartOf="@+id/sender_profile_image_view"
+                    app:layout_constraintStart_toStartOf="parent"
+                    app:layout_constraintTop_toBottomOf="@+id/title_text_view"/>
+
+                <TextView
+                    android:ellipsize="end"
+                    android:id="@+id/title_text_view"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/grid_1"
+                    android:layout_marginEnd="@dimen/grid_2"
+                    android:layout_marginStart="@dimen/grid_2"
+                    android:textAppearance="?attr/textAppearanceHeadline6"
+                    app:layout_goneMarginEnd="@dimen/grid_2"
+                    android:maxLines="1"
+                    android:text="@{favoriteMusic.metadata().title}"
+                    tools:text="Package Shipped!"
+                    app:layout_constraintEnd_toStartOf="@+id/sender_profile_image_view"
+                    app:layout_constraintStart_toStartOf="parent"
+                    app:layout_constraintTop_toTopOf="parent"/>
+
+                <TextView
+                    android:textAppearance="?attr/textAppearanceBody2"
+                    app:layout_goneMarginEnd="@dimen/grid_2"
+                    app:layout_constraintTop_toBottomOf="@id/subtitle_text_view"
+                    app:layout_constraintStart_toStartOf="parent"
+                    app:layout_constraintEnd_toStartOf="@+id/sender_profile_image_view"
+                    android:layout_marginTop="@dimen/grid_0_5"
+                    android:layout_marginEnd="@dimen/grid_2"
+                    android:layout_marginStart="@dimen/grid_2"
+                    app:music_type="@{favoriteMusic.mediaItem}"
+                    android:layout_width="0dp"
+                    tools:text="mimeType"
+                    android:layout_height="wrap_content"/>
+
+                <ImageView
+                    app:loadMusicCover="@{favoriteMusic.mediaItem}"
+                    android:id="@+id/sender_profile_image_view"
+                    android:layout_width="@dimen/music_profile_image_size"
+                    android:layout_height="@dimen/music_profile_image_size"
+                    android:layout_marginTop="@dimen/grid_1"
+                    android:layout_marginStart="@dimen/grid_2"
+                    android:layout_marginEnd="@dimen/grid_2"
+                    app:layout_constraintEnd_toEndOf="parent"
+                    app:layout_constraintTop_toTopOf="parent"
+                    tools:ignore="ContentDescription" />
+
+            </androidx.constraintlayout.widget.ConstraintLayout>
+
+        </com.google.android.material.card.MaterialCardView>
+
+    </FrameLayout>
+
+</layout>
Index: app/src/main/java/app/mango/music/adapters/MusicAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/adapters/MusicAdapter.kt b/app/src/main/java/app/mango/music/adapters/MusicAdapter.kt
new file mode 100644
--- /dev/null	(date 1655026947501)
+++ b/app/src/main/java/app/mango/music/adapters/MusicAdapter.kt	(date 1655026947501)
@@ -0,0 +1,166 @@
+package app.mango.music.adapters
+
+import android.annotation.SuppressLint
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.media3.common.MediaItem
+import androidx.recyclerview.widget.DiffUtil
+import androidx.recyclerview.widget.ListAdapter
+import androidx.recyclerview.widget.RecyclerView
+import app.mango.music.R
+import app.mango.music.audio.FavoriteMusic
+import app.mango.music.databinding.MusicItemLayoutBinding
+import app.mango.music.drawable.MusicSwipeActionDrawable
+import app.mango.music.ui.ReboundingSwipeActionCallback
+import me.zhanghai.android.fastscroll.PopupTextProvider
+import kotlin.math.abs
+
+class MusicAdapter(
+    private val itemListener: ItemListener
+    ) :
+    ListAdapter<FavoriteMusic, MusicAdapter.TaskViewHolder>(
+        ListItemDiffCallback()
+    ), PopupTextProvider {
+
+    override fun onCurrentListChanged(
+        previousList: MutableList<FavoriteMusic>,
+        currentList: MutableList<FavoriteMusic>
+    ) {
+        super.onCurrentListChanged(previousList, currentList)
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TaskViewHolder {
+        val layoutInflater = LayoutInflater.from(parent.context)
+        return TaskViewHolder.from(
+            parent,
+            itemListener,
+            layoutInflater
+        )
+    }
+
+    override fun onBindViewHolder(holder: TaskViewHolder, position: Int) {
+        holder.bind(getItem(position), currentList.map { it.mediaItem() }, position)
+    }
+
+    override fun getItemViewType(position: Int): Int = ITEM_VIEW_TYPE_TASK
+
+    interface ItemListener {
+        fun onClicked(view: View, index: Int, items: List<MediaItem>)
+        fun onFavoriteChanged(mediaId: String, newValue: Boolean)
+        fun onNextChanged(mediaId:String)
+        fun onDelete(mediaItem: MediaItem)
+    }
+
+    class TaskViewHolder private constructor(
+        val binding: MusicItemLayoutBinding,
+        private val itemListener: ItemListener
+    ) :
+        RecyclerView.ViewHolder(binding.root), ReboundingSwipeActionCallback.ReboundableViewHolder {
+
+        private val starredCornerSize =
+            itemView.resources.getDimension(R.dimen.small_component_corner_radius)
+
+        fun bind(favoriteMusic: FavoriteMusic, list: List<MediaItem>, position: Int) {
+            binding.favoriteMusic = favoriteMusic.copy()
+            binding.listener = itemListener
+            favoriteMusic.isFavorite.updateCardViewTopLeftCornerSize()
+            binding.root.background = MusicSwipeActionDrawable(binding.root.context)
+            binding.root.isActivated = favoriteMusic.isFavorite
+            binding.cardView.setOnClickListener {
+                itemListener.onClicked(it, position, list)
+            }
+            binding.cardView.setOnLongClickListener {
+                itemListener.onDelete(favoriteMusic.mediaItem())
+                true
+            }
+            binding.executePendingBindings()
+        }
+
+        companion object {
+            fun from(
+                parent: ViewGroup,
+                itemListener: ItemListener,
+                layoutInflater: LayoutInflater
+            ) = TaskViewHolder(
+                MusicItemLayoutBinding.inflate(
+                    layoutInflater,
+                    parent,
+                    false
+                ), itemListener
+            )
+        }
+
+        override val reboundableView: View
+            get() = binding.cardView
+
+        override fun onReboundOffsetChanged(
+            currentSwipePercentage: Float,
+            swipeThreshold: Float,
+            currentTargetHasMetThresholdOnce: Boolean,
+            dampedCoefficient:Float
+        ) {
+            if (dampedCoefficient<0 || currentTargetHasMetThresholdOnce) return
+
+            val isStarred = binding.favoriteMusic?.isFavorite ?: false
+
+            val interpolation = (currentSwipePercentage / swipeThreshold).coerceIn(0F, 1F)
+            val adjustedInterpolation = abs((if (isStarred) 1F else 0F) - interpolation)
+            updateCardViewTopLeftCornerSize(adjustedInterpolation)
+
+            val thresholdMet = currentSwipePercentage >= swipeThreshold
+            val shouldStar = when {
+                thresholdMet && isStarred -> false
+                thresholdMet && !isStarred -> true
+                else -> return
+            }
+            binding.root.isActivated = shouldStar
+        }
+
+        override fun onReboundedFavorite() {
+            binding.favoriteMusic?.let {
+                itemListener.onFavoriteChanged(it.mediaItem().mediaId, !it.isFavorite)
+                it.isFavorite = !it.isFavorite
+            }
+        }
+
+        override fun onReboundedNext() {
+            binding.favoriteMusic?.let {
+                itemListener.onNextChanged(it.mediaItem().mediaId)
+            }
+        }
+
+        private fun Boolean.updateCardViewTopLeftCornerSize() {
+            val interpolation = if (this) 1F else 0F
+            updateCardViewTopLeftCornerSize(interpolation)
+        }
+
+        private fun updateCardViewTopLeftCornerSize(interpolation: Float) {
+            binding.cardView.apply {
+                shapeAppearanceModel = shapeAppearanceModel.toBuilder()
+                    .setTopLeftCornerSize(interpolation * starredCornerSize)
+                    .build()
+            }
+        }
+
+    }
+
+    companion object {
+        const val ITEM_VIEW_TYPE_TASK = 1
+    }
+
+    override fun getPopupText(position: Int): String = getItem(position).first()
+
+    private fun FavoriteMusic.first() = metadata().title.toString().first().toString()
+
+    class ListItemDiffCallback : DiffUtil.ItemCallback<FavoriteMusic>() {
+        override fun areItemsTheSame(oldItem: FavoriteMusic, newItem: FavoriteMusic): Boolean {
+            return oldItem.mediaItem().mediaId == newItem.mediaItem().mediaId
+        }
+
+        @SuppressLint("DiffUtilEquals")
+        override fun areContentsTheSame(oldItem: FavoriteMusic, newItem: FavoriteMusic): Boolean {
+            return oldItem == newItem
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/main/BaseActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/main/BaseActivity.kt b/app/src/main/java/app/mango/music/ui/main/BaseActivity.kt
new file mode 100644
--- /dev/null	(date 1655870853524)
+++ b/app/src/main/java/app/mango/music/ui/main/BaseActivity.kt	(date 1655870853524)
@@ -0,0 +1,101 @@
+package app.mango.music.ui.main
+
+import android.Manifest
+import android.content.Intent
+import android.content.res.Configuration
+import android.net.Uri
+import android.os.Bundle
+import android.provider.Settings
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.appcompat.app.AlertDialog
+import androidx.appcompat.app.AppCompatActivity
+import androidx.databinding.ViewDataBinding
+import androidx.lifecycle.Lifecycle
+import androidx.lifecycle.lifecycleScope
+import androidx.lifecycle.repeatOnLifecycle
+import app.mango.music.R
+import app.mango.music.manager.SpManager
+import app.mango.music.mark.Watermark
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.launch
+
+abstract class BaseActivity<T : ViewDataBinding> : AppCompatActivity() {
+
+    abstract fun setLayout(): T
+    protected lateinit var binding: T
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(setLayout().also {
+            binding = it
+        }.root)
+
+        SpManager.listen(getString(R.string.key_set_theme_color_filter),
+            SpManager.SpBoolListener(false){
+                Watermark.instance.saturation(window,it)
+            })
+    }
+
+    protected inline fun repeatWithViewLifecycle(
+        minState: Lifecycle.State = Lifecycle.State.STARTED,
+        crossinline block: suspend CoroutineScope.() -> Unit
+    ) {
+        if (minState == Lifecycle.State.INITIALIZED || minState == Lifecycle.State.DESTROYED) {
+            throw IllegalArgumentException("minState must be between INITIALIZED and DESTROYED")
+        }
+        lifecycleScope.launch {
+            lifecycle.repeatOnLifecycle(minState) {
+                block()
+            }
+        }
+    }
+
+    private fun getDarkModeStatus(): Boolean {
+        val mode = this.resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK
+        return mode == Configuration.UI_MODE_NIGHT_YES
+    }
+
+    private val activityResult =
+        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
+            result()
+        }
+
+    private val requestPermission =
+        registerForActivityResult(ActivityResultContracts.RequestPermission()) {
+            if(it) onSuccess?.invoke()
+            else showPermissionDialog()
+    }
+
+    private fun showPermissionDialog() {
+        AlertDialog.Builder(this).apply {
+            setTitle(R.string.show_request_reason_dialog)
+            setMessage(R.string.show_forward_to_settings_dialog)
+            setPositiveButton(R.string.show_request_reason_dialog_pos) { _, _ ->
+                activityResult.launch(
+                    Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
+                        data = Uri.fromParts("package", packageName, null)
+                    }
+                )
+            }
+            setNegativeButton(R.string.show_request_reason_dialog_neg, null)
+            show()
+        }
+    }
+
+    private fun result() {
+        onSuccess?.let {
+            requestPermission {
+                it.invoke()
+            }
+        }
+    }
+
+    private var onSuccess: (() -> Unit)? = null
+    protected fun requestPermission(
+        unit: (() -> Unit)
+    ) {
+        onSuccess = unit
+        requestPermission.launch(Manifest.permission.READ_EXTERNAL_STORAGE)
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/viewmodel/MusicViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/viewmodel/MusicViewModel.kt b/app/src/main/java/app/mango/music/viewmodel/MusicViewModel.kt
new file mode 100644
--- /dev/null	(date 1655027355041)
+++ b/app/src/main/java/app/mango/music/viewmodel/MusicViewModel.kt	(date 1655027355041)
@@ -0,0 +1,133 @@
+package app.mango.music.viewmodel
+
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import androidx.media3.common.MediaItem
+import app.mango.music.audio.*
+import app.mango.music.data.*
+import app.mango.music.manager.SpManager
+import app.mango.music.utils.WhileViewSubscribed
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.flow.*
+import kotlinx.coroutines.launch
+import java.text.Collator
+import java.util.*
+import javax.inject.Inject
+
+@HiltViewModel
+class MusicViewModel @Inject constructor(
+    mediaSource: BaseMediaSource,
+    queryFavoriteUseCase: QueryFavoriteUseCase,
+    private val saveFavoriteUseCase: SaveFavoriteUseCase
+) :ViewModel() {
+
+    companion object{
+        private const val TAG = "MusicViewModel"
+        private const val SORT_DEF = "add date"
+    }
+
+    val whenReady = MutableStateFlow(ReadyWhenState(System.currentTimeMillis(),false))
+
+    private val sortBy = MutableStateFlow(SORT_DEF)
+
+    init {
+        SpManager.listen("key_set_list_filter_sort",
+            SpManager.SpStringListener(SORT_DEF){
+                sortBy.value = it
+            }
+        )
+    }
+
+    private fun List<MediaItem>?.sort(sortBy:String):List<MediaItem> = when {
+        this==null -> emptyList()
+        sortBy == SORT_DEF -> sortedBy { it.mediaMetadata.getDateAdded() }
+        else -> sortedWith { o1, o2 -> Collator.getInstance(Locale.CHINESE).compare(o1.mediaMetadata.title, o2.mediaMetadata.title) }
+    }
+
+    private val songs = combine(sortBy,whenReady) { sort,ready ->
+        if(ready.isReady) mediaSource.getChildren(ALL_ID).sort(sort)
+        else emptyList()
+    }.stateIn(viewModelScope, WhileViewSubscribed, emptyList())
+
+    private val favorites = queryFavoriteUseCase()
+
+    private fun List<MusicFavorite>.contains(id:String):Boolean{
+        forEach {
+            if(it.mediaId == id&&it.isFavorite)
+                return true
+        }
+        return false
+    }
+
+    val favoriteSongs = combine(songs,favorites) { list,fas ->
+        list.map { FavoriteMusic(fas.contains(it.mediaId),it) }
+    }.stateIn(viewModelScope, WhileViewSubscribed, emptyList())
+
+    val playlist = combine(GlobalData.currentPlaylist,favorites){ list,fas ->
+        list.map { FavoriteMusic(fas.contains(it.mediaId),it) }
+    }.stateIn(viewModelScope, WhileViewSubscribed, emptyList())
+
+    val favorited = favoriteSongs.transform { list ->
+        emit(list.filter { it.isFavorite })
+    }
+
+    val mediaFavoriteId = MutableStateFlow("")
+    val mediaFavorite = combine(favorited,mediaFavoriteId) { fa,id->
+        val faState = fa.find { it.mediaItem().mediaId==id }
+        MusicFavorite(id,faState != null)
+    }
+
+    val searchKey = MutableStateFlow("")
+    val searchSongs = combine(searchKey,favoriteSongs){ k,fas ->
+        val key = k.lowercase()
+        fas.filter {
+            it.metadata().title.toString().lowercase().contains(key)||
+                    it.metadata().artist.toString().lowercase().contains(key)||
+                    it.metadata().albumTitle.toString().lowercase().contains(key)
+        }
+    }
+
+    val albums = favorites.transform {
+        val data = mediaSource.getChildren(ALBUM_ID)?: emptyList()
+        emit(
+            data.map {
+                Album(it.mediaMetadata.getAlbumId().toString(),
+                    it.mediaMetadata.albumTitle.toString(),
+                    it
+                )
+            }
+        )
+    }
+    val albumArtistId = MutableStateFlow("")
+    private val albumSongs = albumArtistId.transform { id ->
+        emit(mediaSource.getChildren(ALBUM_PREFIX +id)?: emptyList())
+    }
+    val albumDetail = combine(albumSongs,favorites) { list,fas ->
+        list.map { FavoriteMusic(fas.contains(it.mediaId),it) }
+    }.stateIn(viewModelScope, WhileViewSubscribed, emptyList())
+
+    val artists = favoriteSongs.transform {
+        val data = mediaSource.getChildren(ARTIST_ID)?: emptyList()
+        emit(
+            data.map {
+                Artist(it.mediaMetadata.getArtistId().toString(),
+                    it.mediaMetadata.albumTitle.toString(),
+                    it
+                )
+            }
+        )
+    }
+    private val artistSongs = albumArtistId.transform { id->
+        emit(mediaSource.getChildren(ARTIST_PREFIX +id)?: emptyList())
+    }
+    val artistDetail = combine(artistSongs,favorites) { list,fas ->
+        list.map { FavoriteMusic(fas.contains(it.mediaId),it) }
+    }.stateIn(viewModelScope, WhileViewSubscribed, emptyList())
+
+    fun updateFavoriteState(musicFavorite: MusicFavorite){
+        viewModelScope.launch {
+            saveFavoriteUseCase(musicFavorite)
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/app/mango/music/ui/BaseFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/app/mango/music/ui/BaseFragment.kt b/app/src/main/java/app/mango/music/ui/BaseFragment.kt
new file mode 100644
--- /dev/null	(date 1655040211177)
+++ b/app/src/main/java/app/mango/music/ui/BaseFragment.kt	(date 1655040211177)
@@ -0,0 +1,200 @@
+package app.mango.music.ui
+
+import android.app.Activity.RESULT_OK
+import android.app.RecoverableSecurityException
+import android.content.IntentSender
+import android.os.Build
+import android.os.Bundle
+import android.provider.MediaStore
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.activity.result.IntentSenderRequest
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.appcompat.app.AlertDialog
+import androidx.databinding.ViewDataBinding
+import androidx.fragment.app.Fragment
+import androidx.fragment.app.activityViewModels
+import androidx.lifecycle.*
+import androidx.media3.common.MediaItem
+import androidx.media3.common.Player
+import androidx.navigation.NavController
+import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.ItemTouchHelper
+import androidx.recyclerview.widget.RecyclerView
+import app.mango.music.R
+import app.mango.music.adapters.MusicAdapter
+import app.mango.music.data.MusicFavorite
+import app.mango.music.service.SongBrowser
+import app.mango.music.ui.main.MainActivity
+import app.mango.music.viewmodel.MusicViewModel
+import com.google.android.material.bottomsheet.BottomSheetBehavior
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlin.coroutines.CoroutineContext
+
+abstract class BaseFragment<T:ViewDataBinding>:Fragment() ,MusicAdapter.ItemListener,CoroutineScope {
+
+    override val coroutineContext: CoroutineContext = Dispatchers.IO
+
+    interface ControlListener{
+        fun togglePlay()
+        fun next()
+        fun previous()
+    }
+
+    abstract fun setBinding():T
+    open fun createViewBefore(){}
+    protected lateinit var binding:T
+    protected val musicViewModel: MusicViewModel by activityViewModels()
+    protected val musicAdapter = MusicAdapter(this)
+
+    protected val navController:NavController
+    get() = findNavController()
+
+    protected val mediaBrowser: SongBrowser
+    get() = (requireActivity() as MainActivity).mSongBrowser
+
+    override fun onCreateView(
+        inflater: LayoutInflater,
+        container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View = setBinding().also {
+        binding = it
+        createViewBefore()
+    }.root
+
+    protected fun <T:View> BottomSheetBehavior<T>.addBottomSheetCallback(onStateChanged:((View, Int)->Unit), onSlide:((View, Float)->Unit)? = null){
+        addBottomSheetCallback(object : BottomSheetBehavior.BottomSheetCallback(){
+            override fun onStateChanged(bottomSheet: View, newState: Int) { onStateChanged.invoke(bottomSheet,newState)}
+            override fun onSlide(bottomSheet: View, slideOffset: Float) { onSlide?.invoke(bottomSheet,slideOffset) }
+        })
+    }
+
+    inline fun repeatWithViewLifecycle(
+        minState: Lifecycle.State = Lifecycle.State.STARTED,
+        crossinline block: suspend CoroutineScope.() -> Unit
+    ) {
+        if (minState == Lifecycle.State.INITIALIZED || minState == Lifecycle.State.DESTROYED) {
+            throw IllegalArgumentException("minState must be between INITIALIZED and DESTROYED")
+        }
+        viewLifecycleOwner.lifecycleScope.launch {
+            viewLifecycleOwner.lifecycle.repeatOnLifecycle(minState) {
+                block()
+            }
+        }
+    }
+
+    protected fun RecyclerView.itemTouchHelper(){
+        ItemTouchHelper(ReboundingSwipeActionCallback())
+            .attachToRecyclerView(this)
+    }
+
+    protected fun RecyclerView.scrollVisibility(top: View?=null,bottom:View?=null){
+        addOnScrollListener(object :RecyclerView.OnScrollListener(){
+            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
+                super.onScrolled(recyclerView, dx, dy)
+                if (!recyclerView.canScrollVertically(-1))
+                    top?.visibility = View.INVISIBLE
+                else top?.visibility = View.VISIBLE
+
+                if (!recyclerView.canScrollVertically(1))
+                    bottom?.visibility = View.INVISIBLE
+                else bottom?.visibility = View.VISIBLE
+            }
+        })
+    }
+
+    override fun onClicked(view: View, index: Int,items: List<MediaItem>) {
+        launch(Dispatchers.Main) {
+            mediaBrowser.browser?.apply {
+                clearMediaItems()
+                setMediaItems(items)
+                seekToDefaultPosition(index)
+                prepare()
+                play()
+            }
+        }
+    }
+
+    override fun onFavoriteChanged(mediaId: String, newValue: Boolean) {
+        musicViewModel.updateFavoriteState(
+            MusicFavorite(
+                mediaId = mediaId,
+                isFavorite = newValue
+            )
+        )
+    }
+
+    override fun onNextChanged(mediaId: String) {
+        if(javaClass.simpleName==PlaylistSheetFragment::class.java.simpleName){
+            mediaBrowser.removeById(mediaId)
+        }
+        else {
+            mediaBrowser.addToNext(mediaId)
+            Toast.makeText(requireContext(), R.string.music_add_next, Toast.LENGTH_SHORT).show()
+        }
+    }
+
+    override fun onDelete(mediaItem: MediaItem) {
+        AlertDialog.Builder(requireContext()).apply {
+            setMessage(getString(R.string.show_delete_dialog,"${mediaItem.mediaMetadata.title}"))
+            setPositiveButton(R.string.show_delete_dialog_pos){_,_->
+                performDeleteImage(mediaItem)
+            }
+            setNegativeButton(R.string.cancel,null)
+            show()
+        }
+    }
+
+    private val permissionDeleteResult =
+        registerForActivityResult(ActivityResultContracts.StartIntentSenderForResult()) {
+            if(it.resultCode== RESULT_OK && pendingDeleteImage!=null){
+                performDeleteImage(pendingDeleteImage!!)
+            }
+        }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        permissionNeededForDelete.observe(viewLifecycleOwner, Observer { intentSender ->
+            intentSender?.let {
+                permissionDeleteResult.launch(
+                    IntentSenderRequest
+                        .Builder(intentSender)
+                        .build()
+                )
+            }
+        })
+    }
+
+    private var pendingDeleteImage: MediaItem? = null
+    private val _permissionNeededForDelete = MutableLiveData<IntentSender?>()
+    private val permissionNeededForDelete: LiveData<IntentSender?> = _permissionNeededForDelete
+
+    private fun performDeleteImage(media: MediaItem) {
+        launch(Dispatchers.IO) {
+            try {
+                requireActivity().application.contentResolver.delete(
+                    media.mediaMetadata.mediaUri!!,
+                    "${MediaStore.Audio.Media._ID} = ?",
+                    arrayOf(media.mediaId)
+                )
+            } catch (securityException: SecurityException) {
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+                    val recoverableSecurityException =
+                        securityException as? RecoverableSecurityException
+                            ?: throw securityException
+                    pendingDeleteImage = media
+                    _permissionNeededForDelete.postValue(
+                        recoverableSecurityException.userAction.actionIntent.intentSender
+                    )
+                } else {
+                    throw securityException
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/item_lyric.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/item_lyric.xml b/app/src/main/res/layout/item_lyric.xml
new file mode 100644
--- /dev/null	(date 1654351324429)
+++ b/app/src/main/res/layout/item_lyric.xml	(date 1654351324429)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <TextView
+            android:id="@+id/lyric"
+            android:focusable="true"
+            android:clickable="true"
+            android:background="?selectableItemBackground"
+            app:layout_constraintTop_toTopOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            android:padding="4dp"
+            android:layout_width="match_parent"
+            android:minHeight="48dp"
+            android:layout_height="wrap_content"/>
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-hdpi/ic_launcher.webp b/app/src/main/res/mipmap-hdpi/ic_launcher.webp
new file mode 100644
index 0000000000000000000000000000000000000000..c209e78ecd372343283f4157dcfd918ec5165bb3
GIT binary patch
literal 1404
zc$@)z1%vuhNk&F=1pok7MM6+kP&il$0000G0000-002h-06|PpNX!5L00Dqw+t%{r
zzW2vH!KF=w&cMnnN@{whkTw+#mAh0SV?YL=)3MimFYCWp#fpdtz~8$hD5VPuQgtcN
zXl<@<#Cm<R)d19?=)E<{+g@mp0C)CAX%7ksNnpX=jPlJEkqD9%o*fC(U7iySOYHHS
zCLH@bXPyI|^Z)Mc^PG7Oc+NfBJO`d7p5;U`M53Wbd!w|M(MUoNRc2m{@^!wFKzL?&
zx_RAc-^9Azxo%DmXW^9GV0~;n_G9&dym)|QrMEx!y_F=oDunn;1y)cvAc6z{0MHiz
zodGIH07w8nF%*bGq9Gv`YHnm80|d1T$uW=u4vGV%tX#>e5f5yr2h%@8TWh?)bSK`O
z^Z@d={gn7J{iyxL_y_%J|L>ep{dUxUP8a{byupH&!UNR*OutO~0{*T4q5R6@ApLF!
z5{w?Z150gC7#>(VHFJZ-^6O@PYp{t!<r*4*+?g*sysFgiN}}d!-T(>jH(_Z*nzTK4
zkc{fLE4Q3|mA2`CWQ3{8;gxGizgM!zccbdQoOLZc8hThi-IhN90RFT|zlxh3Ty&VG
z?Fe{#<RA5Hg_mG&BZS>9RrRnxzsu|Lg2ddugg7k%>0JeD+{XZ7>Z~{=|M+sh1MF7~
zz>To~`~LVQe1nNoR-gEzkpe{Ak^7{{ZBk2i_<+`Bq<^GB!RYG+z)h;Y3+<{zlMUYd
zrd*W4w&jZ0%kBuDZ1EW&KLpyR7r2=}fF2%0VwHM4pUs}ZI2egi#DRMYZPek*^H9YK
zay4Iy3WXFG(F14xYsoDA|KXgGc5%2DhmQ1gFCkrgHBm!lXG<W<SKpuS2eaDGkL-J-
z!+&UV_N0e<DV*|igwqdC*l{lj0T&&`uq=ycU@f9x0i8jzLa(y*X(YV?PCtUw;ks}p
z4zFn7N(-OG^(9ot1ZhYISOWe9?+l%f6v41n+j<OM$_uJgNP?ZJy}hEMMH=;WiG4I`
zs(bIWwSD<LJnAN(E(Xjr4k(^UYF37F_3f{;E%%FEa&I3I0GbdH@{pD5$m+1PN5CW)
zyZ&*9o#8wstdx@^rci;0B4BP2+H4Y<KbJI5L(bXG(k@`Kp=d>8I5h*uf{rn48Z!_@
z4Bk6TJAB2CKYqPjiX&mWoW>OPFGd$wqro<oln8GL@_6LPC)kg1!M)Y!|NCn7b*0sG
zEN=&c2xMM<>a($ne7EUK;#3V<N-jQ7j($tREa0F&-HzYCQtR#fTCZMRN*ZSm;T7a+
zuxa$}zDL8R9wGYkHb$+gJoiM@z+u{u7a_VUBwtd)bPzHxH}C`W=^2PsBr`s7taBMG
zm#Ss=-o`)W8%%x%>YkXaew%Kh^3OrMht<?zOY6P}#rBhn_hrWY$_P`{#CBR9w?+E6
zt7r#NN-tjxFY{9q75P<|L<ZJBHwn4FhG(&i>jYN?XEoY`tRPQsAkH-DSL^QqyN0>^
zmC>{#F14jz4GeW{pJoRpLFa_*GI{?T93^rX7SPQgT@LbLqpNA}<@2wH;q493)G=1Y
z#-sCiRNX~qf3KgiFzB3I>4Z%AfS(3$`-aMIBU+6?gbgDb!)L~A)je+;fR0jWLL-Fu
z4)<UE%?IC0Du41FrE~F_qc8nOq>P{c7{B4Hp91&%??2$v9iRSFnuckHUm}or9seH6
z>%NbT+5*@L5(I9<vs%8>j@06@(!<!eaZcF<_le1MVaYMg=gRy*f2#IaBH-mJIpy+L
z=Gsbhd6=3>{ZI?U0=pKn8uwIg&L{JV14+8s2hnvbRrU|hZCd}IJu7*;;ECgO%8_*W
Kmw_-CKmY()leWbG

diff --git a/app/src/main/res/mipmap-hdpi/ic_launcher_round.webp b/app/src/main/res/mipmap-hdpi/ic_launcher_round.webp
new file mode 100644
index 0000000000000000000000000000000000000000..b2dfe3d1ba5cf3ee31b3ecc1ced89044a1f3b7a9
GIT binary patch
literal 2898
zc$@)J3$650Nk&FW3jhFDMM6+kP&il$0000G0000-002h-06|PpNWB9900E$G+qN-D
z+81ABX7q?;bwx%xBg?kcwr$(C-Tex-ZCkHUw(Y9#+`E5-zuONG5fgw~E2WDng@Bc@
z24xy+R1n%~6xI#u9vJ8zREI)sb<&Il(016}Z~V1n^PU3-_H17A*Bf^o)&{_uBv}Py
zulRfeE8g(g6<I*pq!<m%e0eKLCnC;y@4a&(;z@3Oc_yGuA}p}r2a+O=6+01<KP&)j
z?X*V!2PDO_%3er*&=0L^6alyFqZiK_dhy(U3lP;LLerOI%$mpKS51g&5Mj)6#*PVe
zF_(`;R5goZ_A_QeW9~l|wn`DsB!!6;@*G4}iEuP2Ot6s0BdUVMnEezcTDX4#Y(*N4
z%PCB_a77DrWnVI8;$wcJDzUhkF$0WwCu~^;eS7IbaNIi-ro8tUGsu`9t8y&n(KArb
zV_-{Zd`}5Q__NX_45pDj6i?2BDQ58^g~1BnfGwhN=w`Zb9Jh2q7g$_Q$ABGgfGsfU
zQ%Xp}ueAZ7(7KK;B*zUoD8S$_dIs%z0xV#07bPs=!^#3izY*Sh+CVAuM|l6Flv1c)
zL>HFhk_?o_;0@tz?1I+l+Y#Q*;RVC?(ud`_cU-~n|AX-b`JHrOIqn(-t&rOg-o`#C
zh0LPxmbOAEb;zHTu!R3LDh1Q<R(Kya7{I0;4Dacb1&lp`!Jlm{pmgtAx{w^#57P>O
zZTf-|lJNUxi-PpcbRjw3n~n-pG;$+dIF6eqM5+L();B2O2tQ~|p{PlpNcvDbd1l%c
zLtXn%lu(3!<myn;X3ipg7@oW+6O}@J$7hVgi1~F#J<2qhIXme>aNK!V#+HNn_D3lp
z2%l+hK-nsj|Bi9;V*WIcQRTt5j9<byX)%{hZi!H7I(x!SO0tBzPRXWGd1Ke*j*=vy
zyQaHQRY5iP-Q*Z2C#JituSKDnx+Q<*4#r7|x$~NQt44KoTmQ*R>0A<=<I>am+cc`J
zTYIN|PsYAhJ|=&h*4wI4ebv-C=Be#u>}%m;a{IGmJDU`0snWS&$9zdrT(z8#{OZ_Y
zxwJx!ZClUi%YJjD6Xz@OP8{ieyJB=tn?>zaI-4JN;rr`JQbb%y5h2O-?_V@7pG_+y
z(lqAsqYr!NyVb0C^|uclHaeecG)Sz;WV?rtoqOdAAN{j%?Uo%owya(F&qps@Id|Of
zo@~Y-(YmfB+chv^%*3g4k3R0WqvuYUIA+8^SGJ{2Bl$X&X&v02>+0$4?di(34{pt*
zG=f#yMs@Y|b&=HyH3k4yP&goF2LJ#tBLJNNDo6lG06r}ghC-pC4Q*=x3;|+W04zte
zAl>l4kzUBQFYF(E`KJy?ZXd1tnfbH+Z~SMmA21KokJNs#eqcXWKUIC>{TuoKe^vhF
z);H)o`t9j~`$h1D`#bxe@E`oE`cM9w(@)5Bp8BNukIwM>wZHfd0S;5bcXA*5KT3bj
zc&_~`&{z7u{Et!Z_k78H75gXf4g8<_ul!H$eVspPeU3j&&Au=2R*Z<QVlXG0%J7Qu
z`uQlm{Q{cWVD7XACdR6KeMUk-Q7>p#M9$9s;fqwgzfiX=E_?BwVcfx3tG9Q-+<5fw
z%Hs64<N1NYeh_oukcz%rOcU>z)@Q*%s3_Xd5>S4d<X%6~`O&m@p+WTqnB(reB<gqb
zpaA~={ur+R)J6BZ_}KqfN1AF`u0i5>g$s>@rN^ixeVj*tqu3ZV)biDcFf&l?lGwsa
zWj3rvK}?43c{IruV2L`hUU0t^MemAn3U~x3$4mFDxj=Byowu^Q+#wKRPrWywLjIAp
z9*n}<YIhnms>eQ9-gZmnd9Y0WHtwi2sn6n~?i#n9VN1B*074_VbZZ=WrpkMYr{RsI
ztM_8X1)J*DZejxkjOTRJ&a*lrvMKBQURNP#K)a5wIitfu(CFYV4FT?LUB$jVwJSZz
zNBFTWg->Y<QdHGXO6(B7DL40#@QH~&1bt_RGfAlw%_YsP19wAkHXw%~G9G(zw;=yC
z_Wta^hs{<khF)Et{~KQ(Y!<^`L|pYl%vB@$I(;3RmQHq?VZ^(}{nUdkKh|wO|NXu)
ze|eLtM-LNkZU|pzO^)wX4?x7Y#55_{=sp>k0j&h3e*a5><wP*B;A~Y_-J8$UU=+E3
zs|^$XdARfHEBrp-b3qaNg~XRwL;d6S=>B=-xM7dE`IuOQna!u$OoxLlE;WdrNlN)1
z7**de7-hZ!(%_ZllHBLg`Ir#|t>2$*xVOZ-ADZKTN?{(NUeLU9GbuG-+Axf*AZ-P1
z0ZZ*f<D6L!WI}YtFrx~d;ZCS=O$ReN3~!sEoYV$RgCJx3D(Cp-Mie$*C4cS*q~E}&
z0BT11xQ>x+ck4{XtFsbcc%GRStht@q!m*ImssGwuK+P@%gEK!f5dHymg<9nSCXsB6
zQ*{<`%^bxB($Z@5286^-A(tR;r+p7B%^%$N5h%lb*Vlz-?DL9x;!j<5>~kmXP$E}m
zQV|7uv4SwFs0jUervsxVUm>&9Y3DBIzc1XW|CUZrUdb<&{@D5yuLe%Xniw^x&{A2s
z0q1<L&7;HiAPZm8Z=iQR8>+owDSfc3Gs?ht;3jw49c#mmrViUfX-yvc_B*wY|Lo7;
zGh!t2R#BHx{1wFXReX*~`NS-<fA!XHlF+kxYYK8u1|b%w@Tz%ELs#ab^++6I>LpSX
z#TV*miO^~B9PF%O0huw!1Zv>^d0G3$^8dsC6VI!$oK<B%_ozoN7z7_(zzYjWYY9bu
zd)NEdFua83uR-Vf-s4v#aHcT*T0qDHMRnnTV@TqU{LFRZ2dsH&3pJ!02lVAX&;IMb
z^MANDir>DKiXdJt{mGkyA`+Gwd4D-^1qtNTUK)`N*=NTG-6}=5k6suNfdLt*dt8D|
z%H#$k)z#ZRcf|zDWB|pn<3+7Nz>?WW9WdkO5(a^m+D4WRJ9{wc>Y}IN)2Kbgn;_O?
zGqdr&9~|$Y0tP=N(k7^Eu;iO*w+f%W`20BNo)=Xa@M_)+o$4LXJyiw{F?a633SC{B
zl~9FH%?^Rm*LVz`lkULs)%idDX^O)SxQol(3jDRyBVR!7d`;ar+D7do)jQ}m`g$<s
z-6tu{nP5&-otsZNY)-$k`{Pj80gwuW=4gjb+bXY>TevUD5@?*P8)vo<u;hmO(wx=4
zu#Ty4#N8dV+4db_oTh<$^Q+`f9^xq{WR#>a?kEe@_hl{_h8j&5eB-5FrYW&*FHVt$
z$kRF9Nstj<DlnDleF4(_XZ^q<)s2!0YS`L=!d-ZCs(bT}fT({j8NU<*U4dqQq?|<5
zrM4G6K$2co@=m3s4&j>%KRzpjdd_9wO=4zO8ritN*NPk_9avYrsF(!4))tm{Ga#OY
z(r{0buexOzu7+<C7l)}{Nc<qc*P;@OPvjmTK3RfnIjfpHVr4;vhpzPB(e56`ue)+^
zV<puQ4Ra`IJ1<xY9>rw8E08Gxd`LTOID{*AC1m*6Nw@osfB%0oBF5sf<~wH1kL;sd
zo)k6^VyRFU<BuKKXLDd>`)dt*iX^9&QtWbo6yE8XXH?`ztvpiOLgI3R+=MOBQ<kj1
z^+$eZoWa#nXjJMS{t(g~l-@9Ro*c@Zd2iRE?D?Zo&wSDp9cqKFwo)iB{||Ez9c*1E
z4LKsK`*%O!d#7>9<gyqCJnWR~?z%;3dw3=(Pq|GAF4ceN5fzvX+wwedai5kotW7if
w9)|ozV<th{;5oaSc=(C`Xv64I>=rMVgi<*CU%+d1PQQ0a1U=&b0vkF207%xU0ssI2

diff --git a/app/src/main/res/mipmap-mdpi/ic_launcher.webp b/app/src/main/res/mipmap-mdpi/ic_launcher.webp
new file mode 100644
index 0000000000000000000000000000000000000000..4f0f1d64e58ba64d180ce43ee13bf9a17835fbca
GIT binary patch
literal 982
zc$@*&11bDcNk&G_0{{S5MM6+kP&il$0000G0000l001ul06|PpNU8t;00Dqo+t#w^
z^1csucXz7-Qrhzl9HuH<!ckn_w-(t15itRHmqN0O$B3XH(E|jyV^QXq8=yM`Q**vy
zpEpgQd+no=J<Tlv&+_>B%l>&>1tG2^vb*E&k^T3$FG1eQZ51g$uv4V+kI`0<^1Z@N
zk?Jjh$olyC%l>)Xq;7!>{iBj&BjJ`P&$fsCfpve_epJOBkTF?nu-B7D!hO=2ZR}<p
z;bEy|mw1;}P&gp|0ssKe4*;D3Dlh;r06r}ehC-pC4mGy`3;|+W04+#B4r_x~@mHHy
z)H}bD|I2-n_L$pW;*I)~?=#N<)`92&<$3IR`#<SH6@I&FRQa6xBmQ5wPwJ2PAI(ne
z$L2Yb@JHxb`+bLk*AjR$^`b?pr|?!6=+AboIQ2D-p)UI7x(J0|5(5~ur$_+)`>C%4
zc_9eOXvPbC4kzU8YowIA8cW~Uv|eB&yYwAObSwL2vY~UYI7NXPvf3b+c^?wcs~_t{
ze_m66-0)^{JdOMKPwjpQ@Sna!*?$wTZ~su*tNv7o!gXT!GRgivP}ec?5>l1!7<(rT
zds|8x(qGc673zrvYIz;J23FG{9nHMnAuP}NpAED^laz3mAN1sy+NXK)!6v1FxQ;lh
zOBLA>$~P3r4b*NcqR;y6pwyhZ<hjKiZs6mOSFB&+cIl`GV$93-<ciUjF#*1^<p~gh
ziQ_{)r0dA7$It&Fe=obxu8n!+elxmgqxPbUL!FxW0;AOfqz@8JOz9Qbm)m-9!^7D)
z480@BoIIb<oT``+rVla8L)8fXO&6}3P9n4v$`6WG<DUNWuKb9J9rUsAn7d-_YWT^U
z{NXl@OAPIJ!>3_PiDb|%n1gGjl3ZU}ujInlP{eks-#oA6>rh&g+!f`hv#_%JrgYPu
z(U^&XLW^Q<WhKYr9rXr6*~Tmpuq6NjnD6;;NNBGIg-1ZvfACQ4{ocrwM0)?`oL2ts
zCXY5KT@`(ir63J0?%+_(-dDgf<6R$u{lCdy6Zi5d+Bf;1OXyD;xe3#Gug*&T|0o41
zD8;$|JvUv&@vsLIH&C5+S{!k&{~Z54^y@9r>X7F9Z*SRPpQl{B%x)_AMp^}_v~?j7
zapvHMKxSf*Mtyx8I}-<*UGn3)oHd(nn=)BZ`d$lDBwq_GL($_TPaS{UeevT(AJ`p0
z9%+hQb6z)U9qjbuXjg|dExCLjpS8$VKQ55VsIC%@{N5t{NsW)=hNGI`J=x97_kbz@
E0Of=7!T<mO

diff --git a/app/src/main/res/mipmap-mdpi/ic_launcher_round.webp b/app/src/main/res/mipmap-mdpi/ic_launcher_round.webp
new file mode 100644
index 0000000000000000000000000000000000000000..62b611da081676d42f6c3f78a2c91e7bcedddedb
GIT binary patch
literal 1772
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
O>FJ$wK}0tWNB{uH;AM~i

diff --git a/app/src/main/res/mipmap-xhdpi/ic_launcher.webp b/app/src/main/res/mipmap-xhdpi/ic_launcher.webp
new file mode 100644
index 0000000000000000000000000000000000000000..948a3070fe34c611c42c0d3ad3013a0dce358be0
GIT binary patch
literal 1900
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

diff --git a/app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp b/app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp
new file mode 100644
index 0000000000000000000000000000000000000000..1b9a6956b3acdc11f40ce2bb3f6efbd845cc243f
GIT binary patch
literal 3918
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

diff --git a/app/src/main/res/mipmap-xxhdpi/ic_launcher.webp b/app/src/main/res/mipmap-xxhdpi/ic_launcher.webp
new file mode 100644
index 0000000000000000000000000000000000000000..28d4b77f9f036a47549d47db79c16788749dca10
GIT binary patch
literal 2884
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

diff --git a/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp b/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp
new file mode 100644
index 0000000000000000000000000000000000000000..9287f5083623b375139afb391af71cc533a7dd37
GIT binary patch
literal 5914
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

diff --git a/app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp b/app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp
new file mode 100644
index 0000000000000000000000000000000000000000..aa7d6427e6fa1074b79ccd52ef67ac15c5637e85
GIT binary patch
literal 3844
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
G0001O&w8c+

diff --git a/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp b/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp
new file mode 100644
index 0000000000000000000000000000000000000000..9126ae37cbc3587421d6889eadd1d91fbf1994d4
GIT binary patch
literal 7778
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

diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..e708b1c023ec8b20f512888fe07c5bd3ff77bb8f
GIT binary patch
literal 59203
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

